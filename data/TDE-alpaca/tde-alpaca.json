[
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_name",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Transform first and last names into username",
        "instruction":"format(): Combine first letter of first name with full last name to create username",
        "ctx":"Context information:\nInput: First and last names separated by a tab character.\nOutput: Username created by combining the first letter of the first name with the full last name.",
        "train_pairs":"Examples:\nInput: john\tsmith\nOutput: jsmith\nInput: adam\twilliams\nOutput: awilliams\nInput: james\tjohnson\nOutput: jjohnson",
        "ctx_t_pairs":"Context information:\nInput: First and last names separated by a tab character.\nOutput: Username created by combining the first letter of the first name with the full last name.\n\nExamples:\nInput: john\tsmith\nOutput: jsmith\nInput: adam\twilliams\nOutput: awilliams\nInput: james\tjohnson\nOutput: jjohnson",
        "test_pairs":"Examples:\nInput: alice\tbob\nOutput: abob\nInput: charlie\tdenis\nOutput: cdenis"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_googlerefine_step1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract name of actor\/actress",
        "instruction":"extract(): extract name of actor\/actress from the text file.",
        "ctx":"Context information:\nInput: text format containing movie details\nOutput: extracted name of actor\/actress",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Meena Kumari\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Meena Kumari\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Kamini Kaushal",
        "ctx_t_pairs":"Context information:\nInput: text format containing movie details\nOutput: extracted name of actor\/actress\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Meena Kumari\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Meena Kumari\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Kamini Kaushal",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Geeta Bali\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Meena Kumari\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Nutan\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Nargis Dutt\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Vyjayanthimala\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Meena Kumari\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Vyjayanthimala\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Nutan\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Mala Sinha\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Meena Kumari"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_wikilist3_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract character names from wiki-style list",
        "instruction":"extract(): Extract the character name from the wiki-style list item",
        "ctx":"Context information:\nInput: Wiki-style list item containing actor and character information\nOutput: Character name extracted from the input",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Lalita\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Chakravorty",
        "ctx_t_pairs":"Context information:\nInput: Wiki-style list item containing actor and character information\nOutput: Character name extracted from the input\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Lalita\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Chakravorty",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Kamla\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Shobha\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Radha\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Champabai \/ Rajani\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Leela\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Madhumati \/ Madhavi \/ Radha\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Sujata\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Meena Khosla\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Ratna"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_dob",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"format date of birth",
        "instruction":"format(): convert YYYYMMDD to MM-DD-YYYY",
        "ctx":"Context information:\nInput: date in YYYYMMDD format\nOutput: formatted date in MM-DD-YYYY",
        "train_pairs":"Examples:\nInput: 19610223\nOutput: 02-23-1961\nInput: 19700101\nOutput: 01-01-1970\nInput: 19330212\nOutput: 02-12-1933",
        "ctx_t_pairs":"Context information:\nInput: date in YYYYMMDD format\nOutput: formatted date in MM-DD-YYYY\n\nExamples:\nInput: 19610223\nOutput: 02-23-1961\nInput: 19700101\nOutput: 01-01-1970\nInput: 19330212\nOutput: 02-12-1933",
        "test_pairs":"Examples:\nInput: 19221213\nOutput: 12-13-1922\nInput: 19111122\nOutput: 11-22-1911"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_stringcase2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract and format movie titles",
        "instruction":"transform(): Extract the movie title from the input string and convert it to lowercase",
        "ctx":"Context information:\nInput: String containing movie information with title in double quotes\nOutput: Lowercase movie title",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: baiju bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: biraj bahu",
        "ctx_t_pairs":"Context information:\nInput: String containing movie information with title in double quotes\nOutput: Lowercase movie title\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: baiju bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: biraj bahu",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: vachan\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: azaad"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_craigslist1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse the house area from the description",
        "instruction":"extract(): extract the house area from the description.",
        "ctx":"Context information:\nInput: house listings information\nOutput: house area",
        "train_pairs":"Examples:\nInput: Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 \/ 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map\nOutput: 938\nInput: Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 1535ft2 - (Renton, WA) pic map\nOutput: 1535\nInput: Mar 18 New AVAILABLE NOW FURNISHED $1650 \/ 1br - 750ft2 - (Bellevue) pic\nOutput: 750",
        "ctx_t_pairs":"Context information:\nInput: house listings information\nOutput: house area\n\nExamples:\nInput: Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 \/ 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map\nOutput: 938\nInput: Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 1535ft2 - (Renton, WA) pic map\nOutput: 1535\nInput: Mar 18 New AVAILABLE NOW FURNISHED $1650 \/ 1br - 750ft2 - (Bellevue) pic\nOutput: 750",
        "test_pairs":"Examples:\nInput: Mar 1 Lake Washington, Bellevue $1234 \/ 3br - 1899ft2 - (Bellevue, WA) pic map\nOutput: 1899\nInput: Mar 23 Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 355ft2 - (Seattle, WA) pic map\nOutput: 355"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_phonebranch",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Standardize phone numbers",
        "instruction":"format(): Convert various phone number formats to XXX-XXX-XXXX",
        "ctx":"Context information:\nInput: Phone numbers in different formats\nOutput: Phone numbers standardized to XXX-XXX-XXXX format",
        "train_pairs":"Examples:\nInput: 323-708-7700\nOutput: 323-708-7700\nInput: (425)-706-7709\nOutput: 425-706-7709\nInput: 510.220.5586\nOutput: 510-220-5586",
        "ctx_t_pairs":"Context information:\nInput: Phone numbers in different formats\nOutput: Phone numbers standardized to XXX-XXX-XXXX format\n\nExamples:\nInput: 323-708-7700\nOutput: 323-708-7700\nInput: (425)-706-7709\nOutput: 425-706-7709\nInput: 510.220.5586\nOutput: 510-220-5586",
        "test_pairs":"Examples:\nInput: 235 7654\nOutput: 425-235-7654\nInput: 745-8139\nOutput: 425-745-8139\nInput: 111-222-3333\nOutput: 111-222-3333\nInput: 888 9999\nOutput: 425-888-9999"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_removepunctuation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Remove punctuation from text",
        "instruction":"extract(): Remove all punctuation marks from the input text",
        "ctx":"Context information:\nInput: Text with various punctuation marks\nOutput: Text with punctuation marks removed",
        "train_pairs":"Examples:\nInput: \"Do you like this site?\",\nOutput: Do you like this site\nInput: \"--cool--\",\nOutput: cool\nInput: \"...ok!\",\nOutput: ok",
        "ctx_t_pairs":"Context information:\nInput: Text with various punctuation marks\nOutput: Text with punctuation marks removed\n\nExamples:\nInput: \"Do you like this site?\",\nOutput: Do you like this site\nInput: \"--cool--\",\nOutput: cool\nInput: \"...ok!\",\nOutput: ok",
        "test_pairs":"Examples:\nInput: \"None\",\nOutput: None\nInput: \"test if this works\"?\nOutput: test if this works"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_wikilist2_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract film names from wiki-style list",
        "instruction":"extract(): Extract the film name from the wiki-style list item",
        "ctx":"Context information:\nInput: Wiki-style list item containing actor and film information\nOutput: Film name extracted from the input",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Baiju Bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Bahu",
        "ctx_t_pairs":"Context information:\nInput: Wiki-style list item containing actor and film information\nOutput: Film name extracted from the input\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Baiju Bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Bahu",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Vachan\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Azaad\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Seema\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Mother India\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Sadhna\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Sahara\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Madhumati\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Sujata\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Dhool Ka Phool\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Chirag Kahan Roshni Kahan"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_unit_convert1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert unit abbreviation to full name",
        "instruction":"format(): Change 'cm' to 'centimeter' in the input",
        "ctx":"Context information:\nInput: Measurement in centimeters with 'cm' abbreviation\nOutput: Same measurement with 'cm' replaced by 'centimeter'",
        "train_pairs":"Examples:\nInput: 1.2 cm\nOutput: 1.2 centimeter\nInput: 1.3 cm\nOutput: 1.3 centimeter\nInput: 6.4 cm\nOutput: 6.4 centimeter",
        "ctx_t_pairs":"Context information:\nInput: Measurement in centimeters with 'cm' abbreviation\nOutput: Same measurement with 'cm' replaced by 'centimeter'\n\nExamples:\nInput: 1.2 cm\nOutput: 1.2 centimeter\nInput: 1.3 cm\nOutput: 1.3 centimeter\nInput: 6.4 cm\nOutput: 6.4 centimeter",
        "test_pairs":"Examples:\nInput: 1.4 cm\nOutput: 1.4 centimeter\nInput: 1.5 cm\nOutput: 1.5 centimeter"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_hierarchical1_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Transform hierarchical data",
        "instruction":"extract(): extract the first element of the second tuple from the hierarchical data.",
        "ctx":"Context information:\nInput: Hierarchical data represented as tuples separated by brackets, with elements in each tuple separated by commas.\nOutput: The first element of the second tuple from the input data.",
        "train_pairs":"Examples:\nInput: {{a, b}, {cccc, d}, {e, f}}\nOutput: cccc\nInput: {{x, aaay}, {aaaz, d}}\nOutput: aaaz\nInput: {{a}, {ffeaa}, {aa, aaa, aaa, aaa}}\nOutput: ffeaa",
        "ctx_t_pairs":"Context information:\nInput: Hierarchical data represented as tuples separated by brackets, with elements in each tuple separated by commas.\nOutput: The first element of the second tuple from the input data.\n\nExamples:\nInput: {{a, b}, {cccc, d}, {e, f}}\nOutput: cccc\nInput: {{x, aaay}, {aaaz, d}}\nOutput: aaaz\nInput: {{a}, {ffeaa}, {aa, aaa, aaa, aaa}}\nOutput: ffeaa",
        "test_pairs":"Examples:\nInput: {{ajfj, ajfie, ajaj, aj}, {jwi, ajaj, aj, a}, {aj, ajiw, ajif, jfi}}\nOutput: jwi\nInput: {{a}, {b}, {c}}\nOutput: b"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_yelpregex1_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"get consecutive exclamation points of length 2 or more",
        "instruction":"extract(): Extract consecutive exclamation points of length 2 or more from the text",
        "ctx":"Context information:\nInput: Text containing various punctuation marks\nOutput: String of consecutive exclamation points of length 2 or more found in the text",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !!!!\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !!, !!\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "ctx_t_pairs":"Context information:\nInput: Text containing various punctuation marks\nOutput: String of consecutive exclamation points of length 2 or more found in the text\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !!!!\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !!, !!\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "test_pairs":"Examples:\nInput: one! two!! three!!!\nOutput: !!, !!!\nInput: Test one!\nOutput: "
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_googlerefine_step3_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract movie roles",
        "instruction":"extract(): extract movie roles from the text file.",
        "ctx":"Context information:\nInput: text format containing movie details\nOutput: extracted movie roles",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Lalita\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Chakravorty",
        "ctx_t_pairs":"Context information:\nInput: text format containing movie details\nOutput: extracted movie roles\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Lalita\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Chakravorty",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Kamla\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Shobha\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Gauri\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Radha\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Champabai \/ Rajani\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Leela\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Madhumati \/ Madhavi \/ Radha\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Sujata\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Meena Khosla\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Ratna"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_name3",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Reformat names",
        "instruction":"format(): Split input by tabs, rearrange components, and format as 'LastName, FirstName MiddleInitial.'",
        "ctx":"Context information:\nInput: Raw name separated by tabs.\nOutput: Names formatted as 'LastName, FirstName MiddleInitial.'",
        "train_pairs":"Examples:\nInput: Freehafer\tDrew\tNancy\nOutput: Freehafer, Nancy D.\nInput: Cencini\tA\tAndrew\nOutput: Cencini, Andrew A.\nInput: Kotas\tBollen\tJan\nOutput: Kotas, Jan B.",
        "ctx_t_pairs":"Context information:\nInput: Raw name separated by tabs.\nOutput: Names formatted as 'LastName, FirstName MiddleInitial.'\n\nExamples:\nInput: Freehafer\tDrew\tNancy\nOutput: Freehafer, Nancy D.\nInput: Cencini\tA\tAndrew\nOutput: Cencini, Andrew A.\nInput: Kotas\tBollen\tJan\nOutput: Kotas, Jan B.",
        "test_pairs":"Examples:\nInput: Thorpe\tJ\tSteven\nOutput: Thorpe, Steven J.\nInput: Charlie\tBob\tAlice\nOutput: Charlie, Alice B."
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_yelp2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract 'useful' value from Yelp JSON data",
        "instruction":"extract(): Extract the value of the 'useful' key from the Yelp JSON data",
        "ctx":"Context information:\nInput: JSON string containing Yelp review data\nOutput: The 'useful' value extracted from the input",
        "train_pairs":"Examples:\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 1}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 0}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 0, \"cool\": 0}\nOutput: 0",
        "ctx_t_pairs":"Context information:\nInput: JSON string containing Yelp review data\nOutput: The 'useful' value extracted from the input\n\nExamples:\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 1}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 0}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 0, \"cool\": 0}\nOutput: 0",
        "test_pairs":"Examples:\nInput: {\"funny\": 0, \"useful\": 1, \"cool\": 1}\nOutput: 1\nInput: {\"funny\": 3, \"useful\": 3, \"cool\": 6}\nOutput: 3"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_trifacta_step4_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract exclamation marks",
        "instruction":"extract(): Extract all exclamation marks from the input text",
        "ctx":"Context information:\nInput: Long text containing various punctuation marks\nOutput: String of consecutive exclamation marks found in long text",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !, !, !, !!!!, !\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !, !, !, !!, !!\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "ctx_t_pairs":"Context information:\nInput: Long text containing various punctuation marks\nOutput: String of consecutive exclamation marks found in long text\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !, !, !, !!!!, !\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !, !, !, !!, !!\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "test_pairs":"Examples:\nInput: Test one!\nOutput: !\nInput: one! two!! three!!!\nOutput: !, !!, !!!"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_acronym_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"normalize acronyms",
        "instruction":"format(): map full phrases to their acronyms.",
        "ctx":"Context information:\nInput: full phrases with acronyms\nOutput: acronyms",
        "train_pairs":"Examples:\nInput: association computing machinery\nOutput: acm\nInput: principle of programming languages\nOutput: popl\nInput: special interest group management of data\nOutput: sigmod",
        "ctx_t_pairs":"Context information:\nInput: full phrases with acronyms\nOutput: acronyms\n\nExamples:\nInput: association computing machinery\nOutput: acm\nInput: principle of programming languages\nOutput: popl\nInput: special interest group management of data\nOutput: sigmod",
        "test_pairs":"Examples:\nInput: special interest group information retrieval\nOutput: sigir\nInput: relational data base management system\nOutput: rdbms"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_wikilist1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract actor names from wiki-style list",
        "instruction":"extract(): Extract the actor name from the wiki-style list item",
        "ctx":"Context information:\nInput: Wiki-style list item containing actor and film information\nOutput: Actor name extracted from the input",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Meena Kumari\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Meena Kumari\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Kamini Kaushal",
        "ctx_t_pairs":"Context information:\nInput: Wiki-style list item containing actor and film information\nOutput: Actor name extracted from the input\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Meena Kumari\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Meena Kumari\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Kamini Kaushal",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Geeta Bali\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Meena Kumari\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Nutan\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Nargis Dutt\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Vyjayanthimala\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Meena Kumari\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Vyjayanthimala\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Nutan\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Mala Sinha\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Meena Kumari"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_yelp1_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract business ID from Yelp JSON data",
        "instruction":"extract(): Extract the business_id from the Yelp JSON data",
        "ctx":"Context information:\nInput: JSON string containing Yelp business data\nOutput: The business_id extracted from the input",
        "train_pairs":"Examples:\nInput: {\"checkin_info\": {\"3-4\": 1, \"13-5\": 1, \"6-6\": 1, \"14-5\": 1, \"14-6\": 1, \"14-2\": 1, \"14-3\": 1, \"19-0\": 1, \"11-5\": 1, \"13-2\": 1, \"11-6\": 2, \"11-3\": 1, \"12-6\": 1, \"6-5\": 1, \"5-5\": 1, \"9-2\": 1, \"9-5\": 1, \"9-6\": 1, \"5-2\": 1, \"7-6\": 1, \"7-5\": 1, \"7-4\": 1, \"17-5\": 1, \"8-5\": 1, \"10-2\": 1, \"10-5\": 1, \"10-6\": 1}, \"type\": \"checkin\", \"business_id\": \"JwUE5GmEO-sH1FuwJgKBlQ\"}\nOutput: JwUE5GmEO-sH1FuwJgKBlQ\nInput: {\"checkin_info\": {\"9-3\": 1, \"12-5\": 1, \"15-3\": 1, \"15-5\": 1, \"7-6\": 1, \"7-5\": 1, \"15-6\": 1, \"16-3\": 1, \"10-0\": 1, \"15-4\": 1, \"6-6\": 2, \"8-5\": 2, \"6-5\": 1, \"10-4\": 1, \"10-5\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"uGykseHzyS5xAMWoN6YUqA\"}\nOutput: uGykseHzyS5xAMWoN6YUqA\nInput: {\"checkin_info\": {\"16-3\": 1, \"15-3\": 2, \"15-5\": 1, \"15-4\": 1, \"15-6\": 2, \"14-5\": 1, \"14-6\": 1, \"17-5\": 1, \"14-3\": 1, \"19-4\": 1, \"16-5\": 1, \"11-4\": 1, \"11-6\": 2, \"11-0\": 1, \"12-6\": 1, \"12-3\": 1, \"12-0\": 2, \"9-6\": 1, \"7-3\": 1, \"20-5\": 1, \"14-1\": 1, \"17-6\": 1, \"16-0\": 1, \"16-1\": 1, \"16-6\": 2, \"16-4\": 1, \"17-0\": 1, \"10-0\": 2, \"8-1\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"LRKJF43s9-3jG9Lgx4zODg\"}\nOutput: LRKJF43s9-3jG9Lgx4zODg",
        "ctx_t_pairs":"Context information:\nInput: JSON string containing Yelp business data\nOutput: The business_id extracted from the input\n\nExamples:\nInput: {\"checkin_info\": {\"3-4\": 1, \"13-5\": 1, \"6-6\": 1, \"14-5\": 1, \"14-6\": 1, \"14-2\": 1, \"14-3\": 1, \"19-0\": 1, \"11-5\": 1, \"13-2\": 1, \"11-6\": 2, \"11-3\": 1, \"12-6\": 1, \"6-5\": 1, \"5-5\": 1, \"9-2\": 1, \"9-5\": 1, \"9-6\": 1, \"5-2\": 1, \"7-6\": 1, \"7-5\": 1, \"7-4\": 1, \"17-5\": 1, \"8-5\": 1, \"10-2\": 1, \"10-5\": 1, \"10-6\": 1}, \"type\": \"checkin\", \"business_id\": \"JwUE5GmEO-sH1FuwJgKBlQ\"}\nOutput: JwUE5GmEO-sH1FuwJgKBlQ\nInput: {\"checkin_info\": {\"9-3\": 1, \"12-5\": 1, \"15-3\": 1, \"15-5\": 1, \"7-6\": 1, \"7-5\": 1, \"15-6\": 1, \"16-3\": 1, \"10-0\": 1, \"15-4\": 1, \"6-6\": 2, \"8-5\": 2, \"6-5\": 1, \"10-4\": 1, \"10-5\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"uGykseHzyS5xAMWoN6YUqA\"}\nOutput: uGykseHzyS5xAMWoN6YUqA\nInput: {\"checkin_info\": {\"16-3\": 1, \"15-3\": 2, \"15-5\": 1, \"15-4\": 1, \"15-6\": 2, \"14-5\": 1, \"14-6\": 1, \"17-5\": 1, \"14-3\": 1, \"19-4\": 1, \"16-5\": 1, \"11-4\": 1, \"11-6\": 2, \"11-0\": 1, \"12-6\": 1, \"12-3\": 1, \"12-0\": 2, \"9-6\": 1, \"7-3\": 1, \"20-5\": 1, \"14-1\": 1, \"17-6\": 1, \"16-0\": 1, \"16-1\": 1, \"16-6\": 2, \"16-4\": 1, \"17-0\": 1, \"10-0\": 2, \"8-1\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"LRKJF43s9-3jG9Lgx4zODg\"}\nOutput: LRKJF43s9-3jG9Lgx4zODg",
        "test_pairs":"Examples:\nInput: {\"checkin_info\": {\"16-3\": 1, \"15-3\": 2, \"15-5\": 1, \"15-4\": 1, \"15-6\": 2, \"14-5\": 1, \"14-6\": 1, \"17-5\": 1, \"14-3\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"AMWoN6YUqA-sH1FuwJgKBlQ\"}\nOutput: AMWoN6YUqA-sH1FuwJgKBlQ\nInput: {\"checkin_info\": {\"8-5\": 2, \"6-5\": 1, \"10-4\": 1, \"10-5\": 1, \"8-2\": 1}, \"type\": \"checkin\", \"business_id\": \"sH1FuwJgKBlQ5xAMWoN6YUqA\"}\nOutput: sH1FuwJgKBlQ5xAMWoN6YUqA"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_aka_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"normalize movie titles",
        "instruction":"transform(): normalize movie titles by removing redundant information",
        "ctx":"Context information:\nInput: movie titles with redundant information\nOutput: normalized movie titles",
        "train_pairs":"Examples:\nInput: Harry Potter 4 aka Harry Potter and the Goblet of Fire\nOutput: Harry Potter and the Goblet of Fire\nInput: Indy 4 aka Indiana Jones and the Kingdom of the Crystal Skull\nOutput: Indiana Jones and the Kingdom of the Crystal Skull\nInput: New Star Trek aka Star Trek Into Darkness\nOutput: Star Trek Into Darkness",
        "ctx_t_pairs":"Context information:\nInput: movie titles with redundant information\nOutput: normalized movie titles\n\nExamples:\nInput: Harry Potter 4 aka Harry Potter and the Goblet of Fire\nOutput: Harry Potter and the Goblet of Fire\nInput: Indy 4 aka Indiana Jones and the Kingdom of the Crystal Skull\nOutput: Indiana Jones and the Kingdom of the Crystal Skull\nInput: New Star Trek aka Star Trek Into Darkness\nOutput: Star Trek Into Darkness",
        "test_pairs":"Examples:\nInput: The Hunger Games 3 aka the hunger games mockingjay part 1\nOutput: the hunger games mockingjay part 1\nInput: New X man aka X-Men: Days of Future Past\nOutput: X-Men: Days of Future Past"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_googlerefine_step2_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract movie actor from the text file.",
        "instruction":"extract(): extract movie actor from the text file.",
        "ctx":"Context information:\nInput: text format containing movie actor\nOutput: name of actor",
        "train_pairs":"Examples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Baiju Bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Bahu",
        "ctx_t_pairs":"Context information:\nInput: text format containing movie actor\nOutput: name of actor\n\nExamples:\nInput: * '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''\nOutput: Baiju Bawra\nInput: * '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''\nOutput: Parineeta\nInput: * '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''\nOutput: Biraj Bahu",
        "test_pairs":"Examples:\nInput: ** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla\nOutput: Vachan\nInput: ** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha\nOutput: Azaad\nInput: * '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''\nOutput: Seema\nInput: * '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''\nOutput: Mother India\nInput: * '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai \/ Rajani'''\nOutput: Sadhna\nInput: ** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela\nOutput: Sahara\nInput: ** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati \/ Madhavi \/ Radha\nOutput: Madhumati\nInput: * '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''\nOutput: Sujata\nInput: ** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla\nOutput: Dhool Ka Phool\nInput: ** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna\nOutput: Chirag Kahan Roshni Kahan"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_trifacta_step5_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract uppercase words",
        "instruction":"extract(): Extract all fully uppercase words from the input text",
        "ctx":"Context information:\nInput: Text containing mixed case words\nOutput: Comma-separated list of fully uppercase words found in the input",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: OMG\nInput: When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: NO, KNOW, IT, IS, SATURDAY, TERRIBLY\nInput: This is a TEST, NOT a real line\nOutput: TEST, NOT",
        "ctx_t_pairs":"Context information:\nInput: Text containing mixed case words\nOutput: Comma-separated list of fully uppercase words found in the input\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: OMG\nInput: When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: NO, KNOW, IT, IS, SATURDAY, TERRIBLY\nInput: This is a TEST, NOT a real line\nOutput: TEST, NOT",
        "test_pairs":"Examples:\nInput: test ONE, test TWO, test THREE\nOutput: ONE, TWO, THREE\nInput: This is a TEST, not a real line\nOutput: TEST"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_duke_ds_1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse Super Bowl information",
        "instruction":"extract(): extract Super Bowl number and title from the text.",
        "ctx":"Context information:\nInput: Super Bowl listing in text format\nOutput: Super Bowl number and title",
        "train_pairs":"Examples:\nInput: | style=\"text-align:  center;\"| {{Sort|01|[[Super Bowl I|I]]}}\nOutput: Super Bowl I\nInput: | style=\"text-align:  center;\"| {{Sort|02|[[Super Bowl II|II]]}}\nOutput: Super Bowl II\nInput: | style=\"text-align:  center;\"| {{Sort|03|[[Super Bowl III|III]]}}\nOutput: Super Bowl III",
        "ctx_t_pairs":"Context information:\nInput: Super Bowl listing in text format\nOutput: Super Bowl number and title\n\nExamples:\nInput: | style=\"text-align:  center;\"| {{Sort|01|[[Super Bowl I|I]]}}\nOutput: Super Bowl I\nInput: | style=\"text-align:  center;\"| {{Sort|02|[[Super Bowl II|II]]}}\nOutput: Super Bowl II\nInput: | style=\"text-align:  center;\"| {{Sort|03|[[Super Bowl III|III]]}}\nOutput: Super Bowl III",
        "test_pairs":"Examples:\nInput: | style=\"text-align:  center;\"| {{Sort|05|[[Super Bowl IV|IV]]}}\nOutput: Super Bowl IV\nInput: | style=\"text-align:  center;\"| {{Sort|03|[[Super Bowl V|III]]}}\nOutput: Super Bowl V"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_upper",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert first column to uppercase",
        "instruction":"transform(): Convert the first column of tab-separated input to uppercase",
        "ctx":"Context information:\nInput: Two columns of text separated by a tab\nOutput: First column converted to uppercase",
        "train_pairs":"Examples:\nInput: abc\txyz\nOutput: ABC\nInput: azzz\tttt\nOutput: AZZZ\nInput: xyz\tttttt\nOutput: XYZ",
        "ctx_t_pairs":"Context information:\nInput: Two columns of text separated by a tab\nOutput: First column converted to uppercase\n\nExamples:\nInput: abc\txyz\nOutput: ABC\nInput: azzz\tttt\nOutput: AZZZ\nInput: xyz\tttttt\nOutput: XYZ",
        "test_pairs":"Examples:\nInput: cccc\tabc\nOutput: CCCC\nInput: abcdefg\tuvw\nOutput: ABCDEFG"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_trifacta_step1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract 'useful' value from JSON",
        "instruction":"extract(): Extract the value of the 'useful' key from the JSON input",
        "ctx":"Context information:\nInput: JSON string containing 'funny', 'useful', and 'cool' keys with integer values\nOutput: The integer value associated with the 'useful' key",
        "train_pairs":"Examples:\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 1}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 0}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 0, \"cool\": 0}\nOutput: 0",
        "ctx_t_pairs":"Context information:\nInput: JSON string containing 'funny', 'useful', and 'cool' keys with integer values\nOutput: The integer value associated with the 'useful' key\n\nExamples:\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 1}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 2, \"cool\": 0}\nOutput: 2\nInput: {\"funny\": 0, \"useful\": 0, \"cool\": 0}\nOutput: 0",
        "test_pairs":"Examples:\nInput: {\"funny\": 0, \"useful\": 1, \"cool\": 1}\nOutput: 1\nInput: {\"funny\": 0, \"useful\": 3, \"cool\": 1}\nOutput: 3"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_name2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Transform last name, first name to username",
        "instruction":"format(): Split input by comma, trim spaces, take first letter of first name and concatenate with full last name",
        "ctx":"Context information:\nInput: Names represented as 'first name, last name'.\nOutput: Username",
        "train_pairs":"Examples:\nInput: smith, john\nOutput: jsmith\nInput: williams, adam\nOutput: awilliams\nInput: johnson, james\nOutput: jjohnson",
        "ctx_t_pairs":"Context information:\nInput: Names represented as 'first name, last name'.\nOutput: Username\n\nExamples:\nInput: smith, john\nOutput: jsmith\nInput: williams, adam\nOutput: awilliams\nInput: johnson, james\nOutput: jjohnson",
        "test_pairs":"Examples:\nInput: denis, alice\nOutput: adenis\nInput: smith, bob\nOutput: bsmith"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_firstkchar_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"slice first k characters",
        "instruction":"extract(): slice first k characters from the text.",
        "ctx":"Context information:\nInput: raw text\nOutput: sliced text",
        "train_pairs":"Examples:\nInput: aaaaaaaa\nOutput: aaa\nInput: bb\nOutput: bb\nInput: ccc\nOutput: ccc",
        "ctx_t_pairs":"Context information:\nInput: raw text\nOutput: sliced text\n\nExamples:\nInput: aaaaaaaa\nOutput: aaa\nInput: bb\nOutput: bb\nInput: ccc\nOutput: ccc",
        "test_pairs":"Examples:\nInput: ddddd\nOutput: ddd\nInput: eeeeeee\nOutput: eee"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_duke_ds_2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract team names",
        "instruction":"extract(): extract team names and seasons from the text file.",
        "ctx":"Context information:\nInput: text format containing team listings\nOutput: extracted team names and seasons",
        "train_pairs":"Examples:\nInput: | styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 01|[[1966 Green Bay Packers season|Green Bay Packers]]<sup>^<\/sup>}}\nOutput: Green Bay Packers\nInput: | styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 02|[[1967 Green Bay Packers season|Green Bay Packers]]<sup>^<\/sup>}}\nOutput: Green Bay Packers\nInput: | styple = \"background #d0e7ff;\"|{{Sort|New York Jets 01|[[1968 Green Bay Packers season|New York Jets]]<sup>^<\/sup>}}\nOutput: New York Jets",
        "ctx_t_pairs":"Context information:\nInput: text format containing team listings\nOutput: extracted team names and seasons\n\nExamples:\nInput: | styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 01|[[1966 Green Bay Packers season|Green Bay Packers]]<sup>^<\/sup>}}\nOutput: Green Bay Packers\nInput: | styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 02|[[1967 Green Bay Packers season|Green Bay Packers]]<sup>^<\/sup>}}\nOutput: Green Bay Packers\nInput: | styple = \"background #d0e7ff;\"|{{Sort|New York Jets 01|[[1968 Green Bay Packers season|New York Jets]]<sup>^<\/sup>}}\nOutput: New York Jets",
        "test_pairs":"Examples:\nInput: | styple = \"background #d0e7ff;\"|{{Sort|San Francisco 49ers 01|[[1981 San Francisco 49ers season|San Francisco 49ers]]<sup>^<\/sup>}}\nOutput: San Francisco 49ers\nInput: | styple = \"background #d0e7ff;\"|{{Sort|Green Bay Packers 02|[[1911 Green Bay Packers season|Green Bay Packers]]<sup>^<\/sup>}}\nOutput: Green Bay Packers"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_reverse2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract specific element from nested structure",
        "instruction":"extract(): Extract the second element of the second tuple from the nested structure",
        "ctx":"Context information:\nInput: Nested structure with curly braces and comma-separated elements\nOutput: The second element of the second tuple from the input",
        "train_pairs":"Examples:\nInput: {{a, b}, {cccc, d}, {e, f}}\nOutput: d\nInput: {{x, aaay}, {aaaz, d}}\nOutput: d\nInput: {{a}, {ffeaa}, {aa, aaa, aaa, aaa}}\nOutput: ffeaa",
        "ctx_t_pairs":"Context information:\nInput: Nested structure with curly braces and comma-separated elements\nOutput: The second element of the second tuple from the input\n\nExamples:\nInput: {{a, b}, {cccc, d}, {e, f}}\nOutput: d\nInput: {{x, aaay}, {aaaz, d}}\nOutput: d\nInput: {{a}, {ffeaa}, {aa, aaa, aaa, aaa}}\nOutput: ffeaa",
        "test_pairs":"Examples:\nInput: {{ajfj, ajfie, ajaj, aj}, {jwi, ajaj, aj, a}, {aj, ajiw, ajif, jfi}}\nOutput: a\nInput: {{a}, {b}, {c}}\nOutput: b"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_trifacta_step2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract ZIP code from address",
        "instruction":"extract(): Extract the 5-digit ZIP code from the end of the address string",
        "ctx":"Context information:\nInput: Full address string including street, city, state, and ZIP code\nOutput: 5-digit ZIP code",
        "train_pairs":"Examples:\nInput: 2 N Central Avenue Phoenix, AZ 85004\nOutput: 85004\nInput: University Ave Middleton, WI 53562\nOutput: 53562\nInput: Farwell St Mc Farland, WI 53558\nOutput: 53558",
        "ctx_t_pairs":"Context information:\nInput: Full address string including street, city, state, and ZIP code\nOutput: 5-digit ZIP code\n\nExamples:\nInput: 2 N Central Avenue Phoenix, AZ 85004\nOutput: 85004\nInput: University Ave Middleton, WI 53562\nOutput: 53562\nInput: Farwell St Mc Farland, WI 53558\nOutput: 53558",
        "test_pairs":"Examples:\nInput: 1 Microsoft Way, Redmond, WA 98052\nOutput: 98052\nInput: 14820 36th ST NE, Redmond, WA 98052\nOutput: 98052"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_regexjoin_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Create acronyms from phrases",
        "instruction":"transform(): Generate acronyms by taking the first letter of each word in the input phrase",
        "ctx":"Context information:\nInput: Phrases or organization names\nOutput: Acronyms created from the input phrases",
        "train_pairs":"Examples:\nInput: Association Computing Machinery\nOutput: ACM\nInput: Principle Of Programming Lanaguages\nOutput: POPL\nInput: Special Interest Group on Management Of Data\nOutput: SIGMOD",
        "ctx_t_pairs":"Context information:\nInput: Phrases or organization names\nOutput: Acronyms created from the input phrases\n\nExamples:\nInput: Association Computing Machinery\nOutput: ACM\nInput: Principle Of Programming Lanaguages\nOutput: POPL\nInput: Special Interest Group on Management Of Data\nOutput: SIGMOD",
        "test_pairs":"Examples:\nInput: Relational Data Base Management System\nOutput: RDBMS\nInput: Table Extraction by Global Record Alignment\nOutput: TEGRA"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_extractdate",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract dates from file name",
        "instruction":"extract(): extract dates from the file name.",
        "ctx":"Context information:\nInput: file name containing dates\nOutput: extracted dates in format MM\/DD\/YYYY",
        "train_pairs":"Examples:\nInput: 03_2005_XXX.xls\nOutput: 03\/01\/2005\nInput: 12_2011_xaz.xls\nOutput: 12\/01\/2011\nInput: 04_2015_rrrrr.xls\nOutput: 04\/01\/2015",
        "ctx_t_pairs":"Context information:\nInput: file name containing dates\nOutput: extracted dates in format MM\/DD\/YYYY\n\nExamples:\nInput: 03_2005_XXX.xls\nOutput: 03\/01\/2005\nInput: 12_2011_xaz.xls\nOutput: 12\/01\/2011\nInput: 04_2015_rrrrr.xls\nOutput: 04\/01\/2015",
        "test_pairs":"Examples:\nInput: 03_2015_rrrrr.xls\nOutput: 03\/01\/2015\nInput: 11_2012_rrrrr.xls\nOutput: 11\/01\/2012"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_removespace_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Normalize spaces in text",
        "instruction":"extract(): Replace multiple spaces with a single space",
        "ctx":"Context information:\nInput: Text with varying numbers of spaces between words\nOutput: Text with single spaces between words",
        "train_pairs":"Examples:\nInput: a bb  cc    dd ee\nOutput: a bb cc dd ee\nInput: a b  c   d    e\nOutput: a b c d e\nInput: a b     e\nOutput: a b e",
        "ctx_t_pairs":"Context information:\nInput: Text with varying numbers of spaces between words\nOutput: Text with single spaces between words\n\nExamples:\nInput: a bb  cc    dd ee\nOutput: a bb cc dd ee\nInput: a b  c   d    e\nOutput: a b c d e\nInput: a b     e\nOutput: a b e",
        "test_pairs":"Examples:\nInput: a b c d e  f\nOutput: a b c d e f\nInput: aaa  bbb  ccc  ddd\nOutput: aaa bbb ccc ddd"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_upperaccent",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert text to uppercase and remove accents",
        "instruction":"transform(): Convert input text to uppercase and remove accent marks",
        "ctx":"Context information:\nInput: Text with possible lowercase letters and accent marks\nOutput: Uppercase text with accent marks removed",
        "train_pairs":"Examples:\nInput: áéíóú\nOutput: AEIOU\nInput: aeiou\nOutput: AEIOU\nInput: aeíouxyz\nOutput: AEIOUXYZ",
        "ctx_t_pairs":"Context information:\nInput: Text with possible lowercase letters and accent marks\nOutput: Uppercase text with accent marks removed\n\nExamples:\nInput: áéíóú\nOutput: AEIOU\nInput: aeiou\nOutput: AEIOU\nInput: aeíouxyz\nOutput: AEIOUXYZ",
        "test_pairs":"Examples:\nInput: aeío\nOutput: AEIOU\nInput: aeíouïöüz\nOutput: AEIOUIOUZ"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_phonebranch_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Format and standardize phone numbers",
        "instruction":"format(): Standardize phone numbers to XXX-XXX-XXXX format",
        "ctx":"Context information:\nInput: Phone numbers in various formats\nOutput: Standardized phone numbers in XXX-XXX-XXXX format",
        "train_pairs":"Examples:\nInput: 4259990200\nOutput: 425-999-0200\nInput: 390-9292\nOutput: 425-390-9292\nInput: 499-999-2020\nOutput: 499-999-2020",
        "ctx_t_pairs":"Context information:\nInput: Phone numbers in various formats\nOutput: Standardized phone numbers in XXX-XXX-XXXX format\n\nExamples:\nInput: 4259990200\nOutput: 425-999-0200\nInput: 390-9292\nOutput: 425-390-9292\nInput: 499-999-2020\nOutput: 499-999-2020",
        "test_pairs":"Examples:\nInput: (299)-398-0003\nOutput: 299-398-0003\nInput: (288) 3998888\nOutput: 288-399-8888\nInput: 999-2020\nOutput: 425-999-2020\nInput: 425-9990200\nOutput: 425-999-0200\nInput: (288) 3998888\nOutput: 288-399-8888\nInput: 499-999-2020\nOutput: 499-999-2020\nInput: (299)-398-0003\nOutput: 299-398-0003\nInput: (288) 3998888\nOutput: 288-399-8888\nInput: 425-9990200\nOutput: 425-999-0200"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_craigslist2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse rental price from Craigslist listings",
        "instruction":"extract(): extract the rental price from each Craigslist listing line.",
        "ctx":"Context information:\nInput: Craigslist listing line\nOutput: extracted rental price",
        "train_pairs":"Examples:\nInput: Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 \/ 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map\nOutput: 1410\nInput: Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 1535ft2 - (Renton, WA) pic map\nOutput: 2829\nInput: Mar 18 New AVAILABLE NOW FURNISHED $1650 \/ 1br - 750ft2 - (Bellevue) pic\nOutput: 1650",
        "ctx_t_pairs":"Context information:\nInput: Craigslist listing line\nOutput: extracted rental price\n\nExamples:\nInput: Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 \/ 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map\nOutput: 1410\nInput: Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 1535ft2 - (Renton, WA) pic map\nOutput: 2829\nInput: Mar 18 New AVAILABLE NOW FURNISHED $1650 \/ 1br - 750ft2 - (Bellevue) pic\nOutput: 1650",
        "test_pairs":"Examples:\nInput: Mar 1 Lake Washington, Bellevue $1234 \/ 3br - 1899ft2 - (Bellevue, WA) pic map\nOutput: 1234\nInput: Mar 23 Downtown Seattle Skyline. Act fast! $2829 \/ 3br - 355ft2 - (Seattle, WA) pic map\nOutput: 2829"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_split_combine_partial_match_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Combine parts of underscore-separated string",
        "instruction":"transform(): Combine the first two characters of the first part with the last two characters of the third part of an underscore-separated string",
        "ctx":"Context information:\nInput: String with underscore-separated parts\nOutput: Combined string from specific parts of the input",
        "train_pairs":"Examples:\nInput: abc_def_xyz_8922ksd\nOutput: abyz\nInput: all_i23saii_jjk_fhdkaj\nOutput: aljk\nInput: ipo_2839a_zif_fjei\nOutput: ipif",
        "ctx_t_pairs":"Context information:\nInput: String with underscore-separated parts\nOutput: Combined string from specific parts of the input\n\nExamples:\nInput: abc_def_xyz_8922ksd\nOutput: abyz\nInput: all_i23saii_jjk_fhdkaj\nOutput: aljk\nInput: ipo_2839a_zif_fjei\nOutput: ipif",
        "test_pairs":"Examples:\nInput: 32a_xxde_ttt_32eresaf\nOutput: 32tt\nInput: axd_effe_xzz_ttesfes\nOutput: axzz"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_reverse",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract last element from comma-separated list",
        "instruction":"extract(): Extract the last element from a comma-separated list of items",
        "ctx":"Context information:\nInput: Comma-separated list of items\nOutput: The last element from the input list",
        "train_pairs":"Examples:\nInput: a, b, c, d\nOutput: d\nInput: x, y, z\nOutput: z\nInput: 1, 2, 3\nOutput: 3",
        "ctx_t_pairs":"Context information:\nInput: Comma-separated list of items\nOutput: The last element from the input list\n\nExamples:\nInput: a, b, c, d\nOutput: d\nInput: x, y, z\nOutput: z\nInput: 1, 2, 3\nOutput: 3",
        "test_pairs":"Examples:\nInput: o, p\nOutput: p\nInput: 1, 2, 3, 4, 5, 6, 7\nOutput: 7"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_yelpregex3_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract uppercase words from Yelp reviews",
        "instruction":"extract(): Extract uppercase words from the Yelp review text",
        "ctx":"Context information:\nInput: Yelp review text\nOutput: Uppercase words extracted from the input",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: OMG\nInput: When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: NO, KNOW, IT, IS, SATURDAY, TERRIBLY\nInput: This is a TEST, NOT a real line\nOutput: TEST, NOT",
        "ctx_t_pairs":"Context information:\nInput: Yelp review text\nOutput: Uppercase words extracted from the input\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: OMG\nInput: When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: NO, KNOW, IT, IS, SATURDAY, TERRIBLY\nInput: This is a TEST, NOT a real line\nOutput: TEST, NOT",
        "test_pairs":"Examples:\nInput: test ONE, test TWO, test THREE\nOutput: ONE, TWO, THREE\nInput: This is a TEST, not a real line\nOutput: TEST"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_ssn",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Format Social Security Numbers",
        "instruction":"format(): Add hyphens to 9-digit Social Security Numbers",
        "ctx":"Context information:\nInput: 9-digit number representing a Social Security Number\nOutput: Formatted Social Security Number with hyphens",
        "train_pairs":"Examples:\nInput: 1922123456\nOutput: 192-212-3456\nInput: 9822135882\nOutput: 982-213-5882\nInput: 8332213215\nOutput: 833-221-3215",
        "ctx_t_pairs":"Context information:\nInput: 9-digit number representing a Social Security Number\nOutput: Formatted Social Security Number with hyphens\n\nExamples:\nInput: 1922123456\nOutput: 192-212-3456\nInput: 9822135882\nOutput: 982-213-5882\nInput: 8332213215\nOutput: 833-221-3215",
        "test_pairs":"Examples:\nInput: 9918882777\nOutput: 991-888-2777\nInput: 1234567890\nOutput: 123-456-7890"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_accent",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"normalize accented string",
        "instruction":"format(): normalize string by replacing accented characters with their ASCII equivalents.",
        "ctx":"Context information:\nInput: string with accented characters\nOutput: normalized string",
        "train_pairs":"Examples:\nInput: áéíóú\nOutput: aeiou\nInput: aeiou\nOutput: aeiou\nInput: aeíouxyz\nOutput: aeiouxyz",
        "ctx_t_pairs":"Context information:\nInput: string with accented characters\nOutput: normalized string\n\nExamples:\nInput: áéíóú\nOutput: aeiou\nInput: aeiou\nOutput: aeiou\nInput: aeíouxyz\nOutput: aeiouxyz",
        "test_pairs":"Examples:\nInput: aeío\nOutput: aeio\nInput: aeíouíóúz\nOutput: aeiouiouz"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_removequote",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Remove quotation marks from text",
        "instruction":"extract(): Remove surrounding quotation marks from the input text",
        "ctx":"Context information:\nInput: Text surrounded by quotation marks\nOutput: Text with surrounding quotation marks removed",
        "train_pairs":"Examples:\nInput: \"Do you like this site?\"\nOutput: Do you like this site?\nInput: \"--cool--\"\nOutput: --cool--\nInput: \"...ok!\"\nOutput: ...ok!",
        "ctx_t_pairs":"Context information:\nInput: Text surrounded by quotation marks\nOutput: Text with surrounding quotation marks removed\n\nExamples:\nInput: \"Do you like this site?\"\nOutput: Do you like this site?\nInput: \"--cool--\"\nOutput: --cool--\nInput: \"...ok!\"\nOutput: ...ok!",
        "test_pairs":"Examples:\nInput: \"None\"\nOutput: None\nInput: \"test if this works\"\nOutput: test if this works"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_stringcase1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Create username from first and last name",
        "instruction":"transform(): Combine the first letter of the first name (capitalized) with the last name (capitalized)",
        "ctx":"Context information:\nInput: First name and last name separated by a tab\nOutput: Username created by combining parts of the input names",
        "train_pairs":"Examples:\nInput: james\tsmith\nOutput: JSmith\nInput: jane\tjohnson\nOutput: JJohnson\nInput: bob\twhite\nOutput: BWhite",
        "ctx_t_pairs":"Context information:\nInput: First name and last name separated by a tab\nOutput: Username created by combining parts of the input names\n\nExamples:\nInput: james\tsmith\nOutput: JSmith\nInput: jane\tjohnson\nOutput: JJohnson\nInput: bob\twhite\nOutput: BWhite",
        "test_pairs":"Examples:\nInput: alice\tjohnson\nOutput: AJohnson\nInput: charlie\tdenis\nOutput: CDenis"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_hierarchical2_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract first element of second tuple from hierarchical data",
        "instruction":"extract(): extract the first element of the second tuple from the hierarchical data separated by semicolons.",
        "ctx":"Context information:\nInput: Hierarchical data represented as tuples separated by semicolons, with elements in each tuple separated by commas.\nOutput: The first element of the second tuple from the input data.",
        "train_pairs":"Examples:\nInput: a, b; cccc, d; e, f\nOutput: cccc\nInput: x, aaay; aaaz, d\nOutput: aaaz\nInput: a; ffeaa; aa, aaa, aaa, aaa\nOutput: ffeaa",
        "ctx_t_pairs":"Context information:\nInput: Hierarchical data represented as tuples separated by semicolons, with elements in each tuple separated by commas.\nOutput: The first element of the second tuple from the input data.\n\nExamples:\nInput: a, b; cccc, d; e, f\nOutput: cccc\nInput: x, aaay; aaaz, d\nOutput: aaaz\nInput: a; ffeaa; aa, aaa, aaa, aaa\nOutput: ffeaa",
        "test_pairs":"Examples:\nInput: ajfj, ajfie, ajaj, aj; jwi, ajaj, aj, a; aj, ajiw, ajif, jfi\nOutput: jwi\nInput: ccc; aaa, bbb, ccc, ddd; xyz\nOutput: aaa"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_yelpregex2_ff_fail",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract consecutive exclamation marks from Yelp reviews",
        "instruction":"extract(): Extract consecutive exclamation marks from the Yelp review text",
        "ctx":"Context information:\nInput: Yelp review text\nOutput: String of consecutive exclamation marks found in Yelp review text",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !, !, !, !!!!, !\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "ctx_t_pairs":"Context information:\nInput: Yelp review text\nOutput: String of consecutive exclamation marks found in Yelp review text\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: !, !, !, !!!!, !\nInput: Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best \"average\", the food was terrible and myself and my co-workers all agreed, this restaurant doesn't rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3\" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!\nOutput: !\nInput: Test example!!! This is a test!!!\nOutput: !!!, !!!",
        "test_pairs":"Examples:\nInput: Test one!\nOutput: !\nInput: one! two!! three!!!\nOutput: !, !!, !!!"
    },
    {
        "test_path":"benchmark-FF-Trifacta-GoogleRefine\/example_file_phone",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"format phone number data",
        "instruction":"format(): Add parentheses and dashes to phone numbers",
        "ctx":"Context information:\nInput: Phone numbers represented in a 10 digit format.\nOutput: Formatted phone numbers with parentheses and dashes.",
        "train_pairs":"Examples:\nInput: 1235550102\nOutput: (123) 555-0102\nInput: 4254423457\nOutput: (425) 442-3457\nInput: 4251239876\nOutput: (425) 123-9876",
        "ctx_t_pairs":"Context information:\nInput: Phone numbers represented in a 10 digit format.\nOutput: Formatted phone numbers with parentheses and dashes.\n\nExamples:\nInput: 1235550102\nOutput: (123) 555-0102\nInput: 4254423457\nOutput: (425) 442-3457\nInput: 4251239876\nOutput: (425) 123-9876",
        "test_pairs":"Examples:\nInput: 1231239876\nOutput: (123) 123-9876\nInput: 4259876543\nOutput: (425) 987-6543"
    },
    {
        "test_path":"benchmark-stackoverflow\/20",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"replace multiple spaces with a single space",
        "instruction":"format(): Replace multiple spaces with a single space",
        "ctx":"Context information:\nInput: string with multiple spaces\nOutput: string with a single space",
        "train_pairs":"Examples:\nInput: 1 2 3 4   5\nOutput: 1 2 3 4 5\nInput: How are    you\nOutput: How are you\nInput: What   is the   matter\nOutput: What is the matter",
        "ctx_t_pairs":"Context information:\nInput: string with multiple spaces\nOutput: string with a single space\n\nExamples:\nInput: 1 2 3 4   5\nOutput: 1 2 3 4 5\nInput: How are    you\nOutput: How are you\nInput: What   is the   matter\nOutput: What is the matter",
        "test_pairs":"Examples:\nInput: 1   2  4  4\nOutput: 1 2 4 4\nInput: How   fun\nOutput: How fun"
    },
    {
        "test_path":"benchmark-stackoverflow\/36",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert date from y-m-d to m\/d\/y",
        "instruction":"format(): Convert dates from 'y-m-d' format to 'm\/d\/y' format.",
        "ctx":"Context information:\nInput: a date in 'y-m-d' format\nOutput: the date in 'm\/d\/y' format",
        "train_pairs":"Examples:\nInput: 2009\/8\/19\nOutput: 8\/19\/2009\nInput: 2001\/12\/12\nOutput: 12\/12\/2001\nInput: 2014\/3\/20\nOutput: 3\/20\/2014",
        "ctx_t_pairs":"Context information:\nInput: a date in 'y-m-d' format\nOutput: the date in 'm\/d\/y' format\n\nExamples:\nInput: 2009\/8\/19\nOutput: 8\/19\/2009\nInput: 2001\/12\/12\nOutput: 12\/12\/2001\nInput: 2014\/3\/20\nOutput: 3\/20\/2014",
        "test_pairs":"Examples:\nInput: 2011\/12\/22\nOutput: 12\/22\/2011\nInput: 2012\/4\/11\nOutput: 4\/11\/2012"
    },
    {
        "test_path":"benchmark-stackoverflow\/41",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"ip address to country",
        "instruction":"domain_map(): Map an IP address to its corresponding country.",
        "ctx":"Context information:\nInput: an IP address\nOutput: the country associated with the IP address",
        "train_pairs":"Examples:\nInput: 131.107.160.83\nOutput: United States\nInput: 103.235.46.39\nOutput: Hong Kong\nInput: 151.249.89.230\nOutput: Germany",
        "ctx_t_pairs":"Context information:\nInput: an IP address\nOutput: the country associated with the IP address\n\nExamples:\nInput: 131.107.160.83\nOutput: United States\nInput: 103.235.46.39\nOutput: Hong Kong\nInput: 151.249.89.230\nOutput: Germany",
        "test_pairs":"Examples:\nInput: 129.97.208.23\nOutput: Canada\nInput: 173.194.44.50\nOutput: United States\nInput: 77.67.27.8\nOutput: Germany"
    },
    {
        "test_path":"benchmark-stackoverflow\/16",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract month from datetime",
        "instruction":"extract(): Extract the month from a given datetime string.",
        "ctx":"Context information:\nInput: a datetime string\nOutput: the month as a string",
        "train_pairs":"Examples:\nInput: Thursday, 1st January, 1970\nOutput: January\nInput: Wednesday, 2nd March, 1980\nOutput: March\nInput: Monday, 5th May, 1999\nOutput: May",
        "ctx_t_pairs":"Context information:\nInput: a datetime string\nOutput: the month as a string\n\nExamples:\nInput: Thursday, 1st January, 1970\nOutput: January\nInput: Wednesday, 2nd March, 1980\nOutput: March\nInput: Monday, 5th May, 1999\nOutput: May",
        "test_pairs":"Examples:\nInput: Friday, 3rd April, 1989\nOutput: April\nInput: Sunday, 3rd March, 2013\nOutput: March"
    },
    {
        "test_path":"benchmark-stackoverflow\/6",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Extract something between the first dot and the last dot, not so good an example, don't know what it tries to do",
        "instruction":"extract(): Extract substring between the first dot and the last dot",
        "ctx":"Context information:\nInput: full url\nOutput: substring between the first dot and the last dot",
        "train_pairs":"Examples:\nInput: www.google.com\nOutput: google\nInput: www.facebook.com\nOutput: facebook\nInput: www.sina.cn\nOutput: sina",
        "ctx_t_pairs":"Context information:\nInput: full url\nOutput: substring between the first dot and the last dot\n\nExamples:\nInput: www.google.com\nOutput: google\nInput: www.facebook.com\nOutput: facebook\nInput: www.sina.cn\nOutput: sina",
        "test_pairs":"Examples:\nInput: www.cs.uwaterloo.ca\nOutput: cs.uwaterloo\nInput: www.abc.com\nOutput: abc"
    },
    {
        "test_path":"benchmark-stackoverflow\/7",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Get a domain name from a URL",
        "instruction":"extract(): Extract domain names from URLs",
        "ctx":"Context information:\nInput: URL\nOutput: domain name",
        "train_pairs":"Examples:\nInput: http:\/\/www.google.com\/url?sa=t&source=web&ct=res&cd=1&ved=0CAgQFjAA&url=http:\/\/www.test.com\/&rct=j&q=test&ei=G2phS-HdJJWTjAfckvHJDA&usg=AFQjCNFSEAztaqtkaIvEzxmRm2uOARn1kQ\nOutput: google.com\nInput: http:\/\/www.beta.microsoft.com\/path\/page.htm\nOutput: microsoft.com\nInput: http:\/\/www.beta.microsoft.co.uk\/path\/page.htm\nOutput: microsoft.co.uk",
        "ctx_t_pairs":"Context information:\nInput: URL\nOutput: domain name\n\nExamples:\nInput: http:\/\/www.google.com\/url?sa=t&source=web&ct=res&cd=1&ved=0CAgQFjAA&url=http:\/\/www.test.com\/&rct=j&q=test&ei=G2phS-HdJJWTjAfckvHJDA&usg=AFQjCNFSEAztaqtkaIvEzxmRm2uOARn1kQ\nOutput: google.com\nInput: http:\/\/www.beta.microsoft.com\/path\/page.htm\nOutput: microsoft.com\nInput: http:\/\/www.beta.microsoft.co.uk\/path\/page.htm\nOutput: microsoft.co.uk",
        "test_pairs":"Examples:\nInput: ftp:\/\/username:password@website.com\nOutput: website.com\nInput: http:\/\/www.microsoft.com\/\nOutput: microsoft.com"
    },
    {
        "test_path":"benchmark-stackoverflow\/17",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Leave proper space",
        "instruction":"format(): Ensure proper spacing in the input text",
        "ctx":"Context information:\nInput: text with inconsistent spacing\nOutput: text with proper spacing",
        "train_pairs":"Examples:\nInput: SampleText\nOutput: Sample Text\nInput: DoesNotMatterHowManyWords\nOutput: Does Not Matter How Many Words\nInput: WhatIf\nOutput: What If",
        "ctx_t_pairs":"Context information:\nInput: text with inconsistent spacing\nOutput: text with proper spacing\n\nExamples:\nInput: SampleText\nOutput: Sample Text\nInput: DoesNotMatterHowManyWords\nOutput: Does Not Matter How Many Words\nInput: WhatIf\nOutput: What If",
        "test_pairs":"Examples:\nInput: SunInTheRain\nOutput: Sun In The Rain\nInput: TestIsGood\nOutput: Test Is Good"
    },
    {
        "test_path":"benchmark-stackoverflow\/40",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Standard Deviation Calculation",
        "instruction":"domain_calculate(): Calculate the standard deviation of a list of numbers.",
        "ctx":"Context information:\nInput: a list of numbers\nOutput: the standard deviation value",
        "train_pairs":"Examples:\nInput: 12, 13, 14, 12\nOutput: 0.957\nInput: 12, 13, 14, 12, 5\nOutput: 3.564\nInput: 12, 12\nOutput: 0",
        "ctx_t_pairs":"Context information:\nInput: a list of numbers\nOutput: the standard deviation value\n\nExamples:\nInput: 12, 13, 14, 12\nOutput: 0.957\nInput: 12, 13, 14, 12, 5\nOutput: 3.564\nInput: 12, 12\nOutput: 0",
        "test_pairs":"Examples:\nInput: 1, 100, 2\nOutput: 56.871\nInput: 1, 100, 2, 50\nOutput: 47.091"
    },
    {
        "test_path":"benchmark-stackoverflow\/37",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Get month name from Date",
        "instruction":"extract(): Retrieve the month name from a given date in 'MM\/DD\/YYYY' format.",
        "ctx":"Context information:\nInput: a date in 'MM\/DD\/YYYY' format\nOutput: the name of the month",
        "train_pairs":"Examples:\nInput: 10\/11\/2009\nOutput: October\nInput: 01\/12\/2012\nOutput: January\nInput: 03\/14\/2013\nOutput: March",
        "ctx_t_pairs":"Context information:\nInput: a date in 'MM\/DD\/YYYY' format\nOutput: the name of the month\n\nExamples:\nInput: 10\/11\/2009\nOutput: October\nInput: 01\/12\/2012\nOutput: January\nInput: 03\/14\/2013\nOutput: March",
        "test_pairs":"Examples:\nInput: 05\/09\/2014\nOutput: May\nInput: 12\/12\/2012\nOutput: December"
    },
    {
        "test_path":"benchmark-stackoverflow\/21",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"How does Stack Overflow generate its SEO-friendly URLs?",
        "instruction":"format(): Generate a SEO-friendly URL for the given text",
        "ctx":"Context information:\nInput: a string\nOutput: a SEO-friendly URL",
        "train_pairs":"Examples:\nInput: How do you change a title to be part of the URL like Stack Overflow\nOutput: how-do-you-change-a-title-to-be-part-of-the-url-like-stack-overflow\nInput: Built-In Character Casing functions in .Net\nOutput: built-in-character-casing-functions-in-net\nInput: What's the difference between String and string\nOutput: whats-the-difference-between-string-and-string",
        "ctx_t_pairs":"Context information:\nInput: a string\nOutput: a SEO-friendly URL\n\nExamples:\nInput: How do you change a title to be part of the URL like Stack Overflow\nOutput: how-do-you-change-a-title-to-be-part-of-the-url-like-stack-overflow\nInput: Built-In Character Casing functions in .Net\nOutput: built-in-character-casing-functions-in-net\nInput: What's the difference between String and string\nOutput: whats-the-difference-between-string-and-string",
        "test_pairs":"Examples:\nInput: Asp.Net Routing - Replace white spaces %20 with dashes from URLs generated\nOutput: asp-net-routing-replace-white-spaces-20-with-dashes-from-urls-generated\nInput: .NET method to convert a string to sentence case\nOutput: net-method-to-convert-a-string-to-sentence-case"
    },
    {
        "test_path":"benchmark-stackoverflow\/47",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"capture capital words",
        "instruction":"extract(): Capture all capitalized words from a given text.",
        "ctx":"Context information:\nInput: A string of text\nOutput: A list of capitalized words found in the text",
        "train_pairs":"Examples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: ['OMG']\nInput: When she asked if we had reservations, I replied no, and she commented NO? You KNOW IT IS SATURDAY. I wanted to say yes, yesterday was Friday and tomorrow is Sunday. Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: ['NO', 'KNOW', 'IT', 'IS', 'SATURDAY', 'TERRIBLY']\nInput: ABC ajib DDD xyz\nOutput: ['ABC', 'DDD']",
        "ctx_t_pairs":"Context information:\nInput: A string of text\nOutput: A list of capitalized words found in the text\n\nExamples:\nInput: This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!\nOutput: ['OMG']\nInput: When she asked if we had reservations, I replied no, and she commented NO? You KNOW IT IS SATURDAY. I wanted to say yes, yesterday was Friday and tomorrow is Sunday. Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation\nOutput: ['NO', 'KNOW', 'IT', 'IS', 'SATURDAY', 'TERRIBLY']\nInput: ABC ajib DDD xyz\nOutput: ['ABC', 'DDD']",
        "test_pairs":"Examples:\nInput: This is MY work\nOutput: ['MY']\nInput: HOW ARE YOU\nOutput: ['HOW', 'ARE', 'YOU']"
    },
    {
        "test_path":"benchmark-stackoverflow\/10",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"kgs to pounds, one digit after the decimal, rounding",
        "instruction":"unit_convert(): Convert kilograms to pounds, rounding to one decimal place",
        "ctx":"Context information:\nInput: a weight in kilograms\nOutput: a weight in pounds, rounded to one decimal place",
        "train_pairs":"Examples:\nInput: 1\nOutput: 2.2\nInput: 2\nOutput: 4.4\nInput: 3\nOutput: 6.6",
        "ctx_t_pairs":"Context information:\nInput: a weight in kilograms\nOutput: a weight in pounds, rounded to one decimal place\n\nExamples:\nInput: 1\nOutput: 2.2\nInput: 2\nOutput: 4.4\nInput: 3\nOutput: 6.6",
        "test_pairs":"Examples:\nInput: 4\nOutput: 8.8\nInput: 5\nOutput: 11.0\nInput: 6\nOutput: 13.2\nInput: 7\nOutput: 15.4\nInput: 8\nOutput: 17.6\nInput: 9\nOutput: 19.8\nInput: 10\nOutput: 22.0\nInput: 11\nOutput: 24.3\nInput: 12\nOutput: 26.5"
    },
    {
        "test_path":"benchmark-stackoverflow\/26",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"How to filter out xml attributes?",
        "instruction":"extract()",
        "ctx":"Context information:\nInput: xml\nOutput: xml without attributes",
        "train_pairs":"Examples:\nInput: <sample1 xns:id=\"e7b014d9-6271-4e32-921d-7488edfd6ea4\">a<\/sample1>\nOutput: <sample1>a<\/sample1>\nInput: <sample2 xns:id=\"d3450e86-7264-4512-9891-6c7183257741\">b<\/sample2>\nOutput: <sample2>b<\/sample2>\nInput: <sample4 xns:id=\"abc\">xyz<\/sample3>\nOutput: <sample3>xyz<\/sample3>",
        "ctx_t_pairs":"Context information:\nInput: xml\nOutput: xml without attributes\n\nExamples:\nInput: <sample1 xns:id=\"e7b014d9-6271-4e32-921d-7488edfd6ea4\">a<\/sample1>\nOutput: <sample1>a<\/sample1>\nInput: <sample2 xns:id=\"d3450e86-7264-4512-9891-6c7183257741\">b<\/sample2>\nOutput: <sample2>b<\/sample2>\nInput: <sample4 xns:id=\"abc\">xyz<\/sample3>\nOutput: <sample3>xyz<\/sample3>",
        "test_pairs":"Examples:\nInput: <sample3 xns:id=\"7f04f178-f235-4647-8584-c4e77f73fecf\">c<\/sample3>\nOutput: <sample3>c<\/sample3>\nInput: <sample6 xns:id=\"test\">b<\/sample6>\nOutput: <sample6>b<\/sample6>"
    },
    {
        "test_path":"benchmark-stackoverflow\/30",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Math expressions evaluation",
        "instruction":"domain_calculate(): Calculate the result of basic math expressions",
        "ctx":"Context information:\nInput: a mathematical expression\nOutput: the evaluated result",
        "train_pairs":"Examples:\nInput: 3+6\nOutput: 9\nInput: 40-9\nOutput: 31\nInput: 2*6\nOutput: 12",
        "ctx_t_pairs":"Context information:\nInput: a mathematical expression\nOutput: the evaluated result\n\nExamples:\nInput: 3+6\nOutput: 9\nInput: 40-9\nOutput: 31\nInput: 2*6\nOutput: 12",
        "test_pairs":"Examples:\nInput: 9\/3\nOutput: 3\nInput: 1+9-2\nOutput: 8\nInput: 1+4\/2\nOutput: 3"
    },
    {
        "test_path":"benchmark-stackoverflow\/31",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"How to convert number to words in Python",
        "instruction":"transform(): Provide a mapping of numbers to their corresponding words.",
        "ctx":"Context information:\nInput: a number\nOutput: number described in words",
        "train_pairs":"Examples:\nInput: 10183\nOutput: ten thousand one hundred eighty three\nInput: 90\nOutput: ninety\nInput: 5888\nOutput: five thousand eight hundred eighty eight",
        "ctx_t_pairs":"Context information:\nInput: a number\nOutput: number described in words\n\nExamples:\nInput: 10183\nOutput: ten thousand one hundred eighty three\nInput: 90\nOutput: ninety\nInput: 5888\nOutput: five thousand eight hundred eighty eight",
        "test_pairs":"Examples:\nInput: 100000\nOutput: one hundred thousand\nInput: 999999\nOutput: nine hundred ninety-nine thousand nine hundred ninety-nine\nInput: 1000001\nOutput: one million one\nInput: 10000007\nOutput: ten million seven"
    },
    {
        "test_path":"benchmark-stackoverflow\/27",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"F -> C, need calculation + rounding",
        "instruction":"unit_convert(): Fahrenheit temperatures to Celsius with rounding",
        "ctx":"Context information:\nInput: a temperature in Fahrenheit\nOutput: temperature in Celsius, rounded",
        "train_pairs":"Examples:\nInput: 40\nOutput: 4\nInput: 45\nOutput: 7\nInput: 50\nOutput: 10",
        "ctx_t_pairs":"Context information:\nInput: a temperature in Fahrenheit\nOutput: temperature in Celsius, rounded\n\nExamples:\nInput: 40\nOutput: 4\nInput: 45\nOutput: 7\nInput: 50\nOutput: 10",
        "test_pairs":"Examples:\nInput: 55\nOutput: 13\nInput: 60\nOutput: 16"
    },
    {
        "test_path":"benchmark-stackoverflow\/1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Use scientific notation only if needed",
        "instruction":"format(): Convert numbers to scientific notation when appropriate",
        "ctx":"Context information:\nInput: double value which can be int or float\nOutput: string with scientific notation",
        "train_pairs":"Examples:\nInput: .2367\nOutput: 0.23\nInput: .00367\nOutput: 3.67E-3\nInput: 22.3\nOutput: 22.3",
        "ctx_t_pairs":"Context information:\nInput: double value which can be int or float\nOutput: string with scientific notation\n\nExamples:\nInput: .2367\nOutput: 0.23\nInput: .00367\nOutput: 3.67E-3\nInput: 22.3\nOutput: 22.3",
        "test_pairs":"Examples:\nInput: 3364.0\nOutput: 3.36E3\nInput: 11\nOutput: 11"
    },
    {
        "test_path":"benchmark-stackoverflow\/11",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Add commas to numbers",
        "instruction":"format(): format numbers by adding commas",
        "ctx":"Context information:\nInput: a number\nOutput: formatted number with commas at every three digits",
        "train_pairs":"Examples:\nInput: 1234567890\nOutput: 1,234,567,890\nInput: 2134\nOutput: 2,134\nInput: 1234.123\nOutput: 1,234.123",
        "ctx_t_pairs":"Context information:\nInput: a number\nOutput: formatted number with commas at every three digits\n\nExamples:\nInput: 1234567890\nOutput: 1,234,567,890\nInput: 2134\nOutput: 2,134\nInput: 1234.123\nOutput: 1,234.123",
        "test_pairs":"Examples:\nInput: 123456789\nOutput: 123,456,789\nInput: 1234\nOutput: 1,234"
    },
    {
        "test_path":"benchmark-stackoverflow\/46",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"First element in the second set",
        "instruction":"extract(): Retrieve the first element from the second set of a given pair.",
        "ctx":"Context information:\nInput: A group of sets\nOutput: The first element from the second set",
        "train_pairs":"Examples:\nInput: {{aaa, bbb}, {ccc, ddd}, {eee, fff}}\nOutput: ccc\nInput: {{x, y}, {z, zz}}\nOutput: z\nInput: {{a}, {bb}, {ccc, ddd, eee, fff}}\nOutput: bb",
        "ctx_t_pairs":"Context information:\nInput: A group of sets\nOutput: The first element from the second set\n\nExamples:\nInput: {{aaa, bbb}, {ccc, ddd}, {eee, fff}}\nOutput: ccc\nInput: {{x, y}, {z, zz}}\nOutput: z\nInput: {{a}, {bb}, {ccc, ddd, eee, fff}}\nOutput: bb",
        "test_pairs":"Examples:\nInput: {{p, q}, {r, s, t}, {u, v, w}}\nOutput: r"
    },
    {
        "test_path":"benchmark-stackoverflow\/2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert non-ASCII characters to their URL-encoded equivalents",
        "instruction":"domain_map(): Convert characters to their URL-encoded equivalents",
        "ctx":"Context information:\nInput: single character outside the ASCII set\nOutput: URL-encoded string with a \"%\" followed by two hexadecimal digits",
        "train_pairs":"Examples:\nInput:  \nOutput: %20\nInput: !\nOutput: %21\nInput: \"\nOutput: %22",
        "ctx_t_pairs":"Context information:\nInput: single character outside the ASCII set\nOutput: URL-encoded string with a \"%\" followed by two hexadecimal digits\n\nExamples:\nInput:  \nOutput: %20\nInput: !\nOutput: %21\nInput: \"\nOutput: %22",
        "test_pairs":"Examples:\nInput: #\nOutput: %23\nInput: $\nOutput: %24\nInput: %\nOutput: %25\nInput: &\nOutput: %26\nInput: '\nOutput: %27\nInput: (\nOutput: %28\nInput: )\nOutput: %29"
    },
    {
        "test_path":"benchmark-stackoverflow\/28",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Most efficient way to remove special characters from string, only allow A-Z a-Z 0-9",
        "instruction":"extract(): Remove special characters and retain only A-Z, a-z, 0-9",
        "ctx":"Context information:\nInput: a string with special characters\nOutput: a cleaned string with only alphanumeric characters",
        "train_pairs":"Examples:\nInput: BA(kfa1237fdn\nOutput: BAkfa1237fdn\nInput: *9kk12jf7eYTk1\nOutput: 9kk12jf7eYTk1\nInput: ()kjfdsk13^$$*A\nOutput: kjfdsk13A",
        "ctx_t_pairs":"Context information:\nInput: a string with special characters\nOutput: a cleaned string with only alphanumeric characters\n\nExamples:\nInput: BA(kfa1237fdn\nOutput: BAkfa1237fdn\nInput: *9kk12jf7eYTk1\nOutput: 9kk12jf7eYTk1\nInput: ()kjfdsk13^$$*A\nOutput: kjfdsk13A",
        "test_pairs":"Examples:\nInput: 092378LLLL111\nOutput: 092378LLLL111\nInput: 11PP))(*(&^%%&*\nOutput: 11PP"
    },
    {
        "test_path":"benchmark-stackoverflow\/12",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Number formatting using K, M, B",
        "instruction":"format(): Format numbers into K, M, B notation",
        "ctx":"Context information:\nInput: a number\nOutput: formatted number with K, M, B",
        "train_pairs":"Examples:\nInput: 10000\nOutput: 10K\nInput: 212321\nOutput: 212K\nInput: 9876549\nOutput: 9M",
        "ctx_t_pairs":"Context information:\nInput: a number\nOutput: formatted number with K, M, B\n\nExamples:\nInput: 10000\nOutput: 10K\nInput: 212321\nOutput: 212K\nInput: 9876549\nOutput: 9M",
        "test_pairs":"Examples:\nInput: 7321876984\nOutput: 7M\nInput: 1111111111\nOutput: 1B\nInput: 12123123123\nOutput: 12B\nInput: 10001\nOutput: 10K\nInput: 212341\nOutput: 212K\nInput: 9876149\nOutput: 9M\nInput: 7321176984\nOutput: 7M\nInput: 2111111111\nOutput: 2B\nInput: 22123123123\nOutput: 22B"
    },
    {
        "test_path":"benchmark-stackoverflow\/45",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"phone number, default 425",
        "instruction":"format(): format the phone number to xxx-xxx-xxxx, if missing default area code, then format to 425-xxx-xxxx",
        "ctx":"Context information:\nInput: A phone number.\nOutput: A normalized phone number with the default area code if missing.",
        "train_pairs":"Examples:\nInput: 390-9292\nOutput: 425-390-9292\nInput: 499-999-2020\nOutput: 499-999-2020\nInput: (299)-398-0003\nOutput: 299-398-0003",
        "ctx_t_pairs":"Context information:\nInput: A phone number.\nOutput: A normalized phone number with the default area code if missing.\n\nExamples:\nInput: 390-9292\nOutput: 425-390-9292\nInput: 499-999-2020\nOutput: 499-999-2020\nInput: (299)-398-0003\nOutput: 299-398-0003",
        "test_pairs":"Examples:\nInput: (288) 3998888\nOutput: 288-399-8888\nInput: 999-2020\nOutput: 425-999-2020\nInput: 425-9990200\nOutput: 425-999-0200"
    },
    {
        "test_path":"benchmark-stackoverflow\/32",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Algorithm help! Fast algorithm in searching for a string with its partner",
        "instruction":"domain_map(): Map a DNA sequence to its partner sequence",
        "ctx":"Context information:\nInput: a DNA sequence\nOutput: the partner DNA sequence",
        "train_pairs":"Examples:\nInput: TAGTC\nOutput: ATCAG\nInput: CGCAT\nOutput: GCGTA\nInput: ACCAG\nOutput: TGGTC",
        "ctx_t_pairs":"Context information:\nInput: a DNA sequence\nOutput: the partner DNA sequence\n\nExamples:\nInput: TAGTC\nOutput: ATCAG\nInput: CGCAT\nOutput: GCGTA\nInput: ACCAG\nOutput: TGGTC",
        "test_pairs":"Examples:\nInput: GACTA\nOutput: CTGAT\nInput: CGCAA\nOutput: GCGTT"
    },
    {
        "test_path":"benchmark-stackoverflow\/24",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Sort alphanumeric string, then alternate numeric and alphabet characters",
        "instruction":"transform(): Sort alphanumeric strings and alternate numeric and alphabet characters in the output",
        "ctx":"Context information:\nInput: an alphanumeric string\nOutput: a sorted string with alternating numeric and alphabet characters",
        "train_pairs":"Examples:\nInput: D4C3B2A1\nOutput: A1B2C3D4\nInput: E7C3B2A1\nOutput: A1B2C3E7\nInput: ABCDE12345\nOutput: A1B2C3D4E5",
        "ctx_t_pairs":"Context information:\nInput: an alphanumeric string\nOutput: a sorted string with alternating numeric and alphabet characters\n\nExamples:\nInput: D4C3B2A1\nOutput: A1B2C3D4\nInput: E7C3B2A1\nOutput: A1B2C3E7\nInput: ABCDE12345\nOutput: A1B2C3D4E5",
        "test_pairs":"Examples:\nInput: AB12345CDE\nOutput: A1B2C3D4E5\nInput: E12HY5\nOutput: E1H2Y5"
    },
    {
        "test_path":"benchmark-stackoverflow\/49",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"plus 20",
        "instruction":"domain_calculate(): Add 20 to the input number.",
        "ctx":"Context information:\nInput: A number\nOutput: A number increased by 20",
        "train_pairs":"Examples:\nInput: 25\nOutput: 45\nInput: 35\nOutput: 55\nInput: 10\nOutput: 30",
        "ctx_t_pairs":"Context information:\nInput: A number\nOutput: A number increased by 20\n\nExamples:\nInput: 25\nOutput: 45\nInput: 35\nOutput: 55\nInput: 10\nOutput: 30",
        "test_pairs":"Examples:\nInput: 1\nOutput: 21\nInput: 11\nOutput: 31"
    },
    {
        "test_path":"benchmark-stackoverflow\/48",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert y-m-d to m\/d\/y, add 0 if necessary",
        "instruction":"format(): Convert date format from y-m-d to m\/d\/y, ensuring zero-padded month and day.",
        "ctx":"Context information:\nInput: A string of dates in y-m-d format\nOutput: A string of dates in m\/d\/y format",
        "train_pairs":"Examples:\nInput: 2009\/8\/1\nOutput: 08\/01\/2009\nInput: 2001\/12\/12\nOutput: 12\/12\/2001\nInput: 2014\/3\/2\nOutput: 03\/02\/2014",
        "ctx_t_pairs":"Context information:\nInput: A string of dates in y-m-d format\nOutput: A string of dates in m\/d\/y format\n\nExamples:\nInput: 2009\/8\/1\nOutput: 08\/01\/2009\nInput: 2001\/12\/12\nOutput: 12\/12\/2001\nInput: 2014\/3\/2\nOutput: 03\/02\/2014",
        "test_pairs":"Examples:\nInput: 2011\/12\/22\nOutput: 12\/22\/2011\nInput: 2012\/4\/11\nOutput: 04\/11\/2012"
    },
    {
        "test_path":"benchmark-stackoverflow\/25",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Month to number conversion",
        "instruction":"domain_map(): Convert month names to their corresponding numerical values",
        "ctx":"Context information:\nInput: a particular month name\nOutput: the corresponding month number",
        "train_pairs":"Examples:\nInput: January\nOutput: 1\nInput: February\nOutput: 2\nInput: March\nOutput: 3",
        "ctx_t_pairs":"Context information:\nInput: a particular month name\nOutput: the corresponding month number\n\nExamples:\nInput: January\nOutput: 1\nInput: February\nOutput: 2\nInput: March\nOutput: 3",
        "test_pairs":"Examples:\nInput: April\nOutput: 4\nInput: May\nOutput: 5\nInput: June\nOutput: 6\nInput: July\nOutput: 7\nInput: August\nOutput: 8\nInput: September\nOutput: 9\nInput: October\nOutput: 10\nInput: November\nOutput: 11\nInput: December\nOutput: 12"
    },
    {
        "test_path":"benchmark-stackoverflow\/33",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Prefix a word with 'a' or 'an'",
        "instruction":"transform(): Determine the correct article ('a' or 'an') to prefix a given word.",
        "ctx":"Context information:\nInput: a word\nOutput: the word prefixed with the correct article",
        "train_pairs":"Examples:\nInput: used car\nOutput: a used car\nInput: honest mistake\nOutput: an honest mistake\nInput: computer\nOutput: a computer",
        "ctx_t_pairs":"Context information:\nInput: a word\nOutput: the word prefixed with the correct article\n\nExamples:\nInput: used car\nOutput: a used car\nInput: honest mistake\nOutput: an honest mistake\nInput: computer\nOutput: a computer",
        "test_pairs":"Examples:\nInput: orange\nOutput: an orange\nInput: hour\nOutput: an hour"
    },
    {
        "test_path":"benchmark-stackoverflow\/44",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"phone number, default 425",
        "instruction":"format(): Format a phone number to include a default area code if missing.",
        "ctx":"Context information:\nInput: a phone number\nOutput: a formatted phone number",
        "train_pairs":"Examples:\nInput: 499-999-2020\nOutput: 499-999-2020\nInput: 999-2020\nOutput: 425-999-2020\nInput: 390-9292\nOutput: 425-390-9292",
        "ctx_t_pairs":"Context information:\nInput: a phone number\nOutput: a formatted phone number\n\nExamples:\nInput: 499-999-2020\nOutput: 499-999-2020\nInput: 999-2020\nOutput: 425-999-2020\nInput: 390-9292\nOutput: 425-390-9292",
        "test_pairs":"Examples:\nInput: 299-398-0003\nOutput: 299-398-0003\nInput: 321-2020\nOutput: 425-321-2020"
    },
    {
        "test_path":"benchmark-stackoverflow\/13",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Number formatting, use , before . , and keep two digits after .",
        "instruction":"format(): Format numbers by adding commas and keeping two decimal places",
        "ctx":"Context information:\nInput: a number\nOutput: formatted number with commas and two decimal places",
        "train_pairs":"Examples:\nInput: 432324\nOutput: 432,324.00\nInput: 12334.13\nOutput: 12,334.13\nInput: 12334.133\nOutput: 12,334.13",
        "ctx_t_pairs":"Context information:\nInput: a number\nOutput: formatted number with commas and two decimal places\n\nExamples:\nInput: 432324\nOutput: 432,324.00\nInput: 12334.13\nOutput: 12,334.13\nInput: 12334.133\nOutput: 12,334.13",
        "test_pairs":"Examples:\nInput: 12334.137\nOutput: 12,334.13"
    },
    {
        "test_path":"benchmark-stackoverflow\/29",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Chemistry: Parsing a chemical formula",
        "instruction":"transform(): Convert chemical formulas to their corresponding elemental compositions",
        "ctx":"Context information:\nInput: a chemical formula\nOutput: the corresponding elemental composition",
        "train_pairs":"Examples:\nInput: Pb\nOutput: Pb\nInput: H\nOutput: H\nInput: Pb2\nOutput: 2Pb",
        "ctx_t_pairs":"Context information:\nInput: a chemical formula\nOutput: the corresponding elemental composition\n\nExamples:\nInput: Pb\nOutput: Pb\nInput: H\nOutput: H\nInput: Pb2\nOutput: 2Pb",
        "test_pairs":"Examples:\nInput: H2\nOutput: 2H\nInput: 3Pb2\nOutput: 6Pb\nInput: PbH2\nOutput: Pb 2H\nInput: (PbH2)2\nOutput: 2Pb 4H\nInput: Pb(H2)2\nOutput: Pb 4H\nInput: (Pb(H2)2)2NO3\nOutput: 2Pb 8H N 3O\nInput: (Ag(Pb(H2)2)2)2SO4\nOutput: 2Ag 4Pb 16H S 4O\nInput: Pb(CH3(CH2)2CH3)2\nOutput: Pb 2C 6H 4C 8H 2C 6H\nInput: Na2(CH3(CH2)2CH3)2\nOutput: 2Na 2C 6H 4C 8H 2C 6H\nInput: Tc(H2O)3Fe3(SO4)2\nOutput: Tc 6H 3O 3Fe 2S 8O\nInput: Tc(H2O)3(Fe3(SO4)2)2\nOutput: Tc 6H 3O 6Fe 4S 16O\nInput: (Tc(H2O)3(Fe3(SO4)2)2)2\nOutput: 2Tc 12H 6O 12Fe 8S 32O\nInput: (Tc(H2O)3CO(Fe3(SO4)2)2)2\nOutput: 2Tc 12H 6O 2C 2O 12Fe 8S 32O"
    },
    {
        "test_path":"benchmark-stackoverflow\/3",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Remove HTML tags from string",
        "instruction":"extract(): Remove HTML tags from text",
        "ctx":"Context information:\nInput: string with HTML tags\nOutput: string without HTML tags",
        "train_pairs":"Examples:\nInput: <b>Hello World.<\/b><br\/><p><i>Is there anyone out there?<\/i><p>\nOutput: Hello World. Is there anyone out there?\nInput: <html><body>bla bla<\/td><td>bla bla<body><html>\nOutput: bla bla bla bla\nInput: <b>hello world!<\/b><br \/><i>it is me! !<\/i>\nOutput: hello world! it is me! !",
        "ctx_t_pairs":"Context information:\nInput: string with HTML tags\nOutput: string without HTML tags\n\nExamples:\nInput: <b>Hello World.<\/b><br\/><p><i>Is there anyone out there?<\/i><p>\nOutput: Hello World. Is there anyone out there?\nInput: <html><body>bla bla<\/td><td>bla bla<body><html>\nOutput: bla bla bla bla\nInput: <b>hello world!<\/b><br \/><i>it is me! !<\/i>\nOutput: hello world! it is me! !",
        "test_pairs":"Examples:\nInput: <b>test<\/b>\nOutput: test"
    },
    {
        "test_path":"benchmark-stackoverflow\/34",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Median",
        "instruction":"domain_calculate(): Calculate the median of a list of numbers.",
        "ctx":"Context information:\nInput: a list of numbers\nOutput: the median value",
        "train_pairs":"Examples:\nInput: 2, 2, 3, 4, 7, 8, 9\nOutput: 4\nInput: 1, 2, 3, 5, 6, 7, 8\nOutput: 5\nInput: 1, 2, 3\nOutput: 2",
        "ctx_t_pairs":"Context information:\nInput: a list of numbers\nOutput: the median value\n\nExamples:\nInput: 2, 2, 3, 4, 7, 8, 9\nOutput: 4\nInput: 1, 2, 3, 5, 6, 7, 8\nOutput: 5\nInput: 1, 2, 3\nOutput: 2",
        "test_pairs":"Examples:\nInput: 4, 5, 6, 7, 8, 9, 10, 11, 12\nOutput: 8\nInput: 1, 2, 3, 4, 5\nOutput: 3"
    },
    {
        "test_path":"benchmark-stackoverflow\/8",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Remove spaces in HTML source in between markups?",
        "instruction":"extract(): Remove unnecessary spaces in HTML source code",
        "ctx":"Context information:\nInput: HTML source code\nOutput: cleaned HTML source code",
        "train_pairs":"Examples:\nInput: <p>blahblahblah<\/p>            <p>blahblahblah<\/p>\nOutput: <p>blahblahblah<\/p><p>blahblahblah<\/p>\nInput: <head> <title>A Simple HTML Example<\/title> <\/head>\nOutput: <head><title>A Simple HTML Example<\/title><\/head>\nInput: <h2>HTML is Easy To Learn<\/h2> <p>Welcome to the world of the <\/p>\nOutput: <h2>HTML is Easy To Learn<\/h2><p>Welcome to the world of the <\/p>",
        "ctx_t_pairs":"Context information:\nInput: HTML source code\nOutput: cleaned HTML source code\n\nExamples:\nInput: <p>blahblahblah<\/p>            <p>blahblahblah<\/p>\nOutput: <p>blahblahblah<\/p><p>blahblahblah<\/p>\nInput: <head> <title>A Simple HTML Example<\/title> <\/head>\nOutput: <head><title>A Simple HTML Example<\/title><\/head>\nInput: <h2>HTML is Easy To Learn<\/h2> <p>Welcome to the world of the <\/p>\nOutput: <h2>HTML is Easy To Learn<\/h2><p>Welcome to the world of the <\/p>",
        "test_pairs":"Examples:\nInput: <h2>test1<\/h2> <p>test2<\/p>\nOutput: <h2>test1<\/h2><p>test2<\/p>\nInput: <h2>test1<\/h2> <p>test2<\/p> <p>test3<\/p> <p>test4<\/p>\nOutput: <h2>test1<\/h2><p>test2<\/p><p>test3<\/p><p>test4<\/p>"
    },
    {
        "test_path":"benchmark-stackoverflow\/22",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Phone number processing",
        "instruction":"format(): Process phone numbers by removing non-numeric characters",
        "ctx":"Context information:\nInput: a phone number\nOutput: a numeric phone number",
        "train_pairs":"Examples:\nInput: 519-781-8816\nOutput: 5197818816\nInput: (913)-444-5555\nOutput: 9134445555\nInput: 509-791-8816\nOutput: 5097918816",
        "ctx_t_pairs":"Context information:\nInput: a phone number\nOutput: a numeric phone number\n\nExamples:\nInput: 519-781-8816\nOutput: 5197818816\nInput: (913)-444-5555\nOutput: 9134445555\nInput: 509-791-8816\nOutput: 5097918816",
        "test_pairs":"Examples:\nInput: (912)-444-5555\nOutput: 9124445555\nInput: 4654764768\nOutput: 4654764768"
    },
    {
        "test_path":"benchmark-stackoverflow\/18",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Concateneate words with Camel Case",
        "instruction":"format(): Convert phrases to Camel Case",
        "ctx":"Context information:\nInput: text with phrases to convert\nOutput: text with Camel Case",
        "train_pairs":"Examples:\nInput: Hello there everyone\nOutput: HelloThereEveryone\nInput: What is wrong\nOutput: WhatIsWrong\nInput: Wait for a while\nOutput: WaitForAWhile",
        "ctx_t_pairs":"Context information:\nInput: text with phrases to convert\nOutput: text with Camel Case\n\nExamples:\nInput: Hello there everyone\nOutput: HelloThereEveryone\nInput: What is wrong\nOutput: WhatIsWrong\nInput: Wait for a while\nOutput: WaitForAWhile",
        "test_pairs":"Examples:\nInput: Main page\nOutput: MainPage\nInput: Test is good for everyone\nOutput: TestIsGoodForEveryone"
    },
    {
        "test_path":"benchmark-stackoverflow\/38",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"person name abbreviation",
        "instruction":"format(): Generate the abbreviation for a given person's name.",
        "ctx":"Context information:\nInput: a person's full name\nOutput: the abbreviated name",
        "train_pairs":"Examples:\nInput: Jack Bauer\nOutput: J. Bauer\nInput: Charles Wooten\nOutput: C. Wooten\nInput: Kim Lee\nOutput: K. Lee",
        "ctx_t_pairs":"Context information:\nInput: a person's full name\nOutput: the abbreviated name\n\nExamples:\nInput: Jack Bauer\nOutput: J. Bauer\nInput: Charles Wooten\nOutput: C. Wooten\nInput: Kim Lee\nOutput: K. Lee",
        "test_pairs":"Examples:\nInput: Lucy Goodman\nOutput: L. Goodman\nInput: Rachel Green\nOutput: R. Green"
    },
    {
        "test_path":"benchmark-stackoverflow\/4",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Get distinct characters of a string",
        "instruction":"extract(): Get distinct characters from text",
        "ctx":"Context information:\nInput: string with possibly repeated characters\nOutput: string with only distinct characters",
        "train_pairs":"Examples:\nInput: DHCH\nOutput: DHC\nInput: KLKLHHMO\nOutput: KLHMO\nInput: XUCHU\nOutput: XUCH",
        "ctx_t_pairs":"Context information:\nInput: string with possibly repeated characters\nOutput: string with only distinct characters\n\nExamples:\nInput: DHCH\nOutput: DHC\nInput: KLKLHHMO\nOutput: KLHMO\nInput: XUCHU\nOutput: XUCH",
        "test_pairs":"Examples:\nInput: 123123\nOutput: 123\nInput: 9090\nOutput: 90"
    },
    {
        "test_path":"benchmark-stackoverflow\/14",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Pad numbers to the left",
        "instruction":"format(): Pad numbers to the left with zeros to ensure they are two digits.",
        "ctx":"Context information:\nInput: a number\nOutput: padded number with leading zeros",
        "train_pairs":"Examples:\nInput: 2\nOutput: 02\nInput: 3\nOutput: 03\nInput: 12\nOutput: 12",
        "ctx_t_pairs":"Context information:\nInput: a number\nOutput: padded number with leading zeros\n\nExamples:\nInput: 2\nOutput: 02\nInput: 3\nOutput: 03\nInput: 12\nOutput: 12",
        "test_pairs":"Examples:\nInput: 1\nOutput: 01\nInput: 5\nOutput: 05"
    },
    {
        "test_path":"benchmark-stackoverflow\/43",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Email Validation",
        "instruction":"transform(): Check if the provided email address is valid.",
        "ctx":"Context information:\nInput: an email address\nOutput: return original email address if valid, otherwise return 'invalid'",
        "train_pairs":"Examples:\nInput: testing@invalid@email.com\nOutput: invalid\nInput: walter@xyz.com\nOutput: walter@xyz.com\nInput: tom@qq.com\nOutput: tom@qq.com",
        "ctx_t_pairs":"Context information:\nInput: an email address\nOutput: return original email address if valid, otherwise return 'invalid'\n\nExamples:\nInput: testing@invalid@email.com\nOutput: invalid\nInput: walter@xyz.com\nOutput: walter@xyz.com\nInput: tom@qq.com\nOutput: tom@qq.com",
        "test_pairs":"Examples:\nInput: asdf\nOutput: invalid\nInput: ab@xyz.xyz\nOutput: ab@xyz.xyz\nInput: wa@lter@xyz.com\nOutput: invalid"
    },
    {
        "test_path":"benchmark-stackoverflow\/42",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Year to common year or leap year",
        "instruction":"domain_calculate(): Classify a year as 'common' or 'leap'.",
        "ctx":"Context information:\nInput: a year\nOutput: the classification of the year as 'common' or 'leap'",
        "train_pairs":"Examples:\nInput: 2007\nOutput: common\nInput: 2008\nOutput: leap\nInput: 2009\nOutput: common",
        "ctx_t_pairs":"Context information:\nInput: a year\nOutput: the classification of the year as 'common' or 'leap'\n\nExamples:\nInput: 2007\nOutput: common\nInput: 2008\nOutput: leap\nInput: 2009\nOutput: common",
        "test_pairs":"Examples:\nInput: 2010\nOutput: common\nInput: 2011\nOutput: common\nInput: 2012\nOutput: leap\nInput: 2016\nOutput: leap\nInput: 2017\nOutput: common"
    },
    {
        "test_path":"benchmark-stackoverflow\/15",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Parse an integer from a string with trailing garbage",
        "instruction":"extract(): Parse an integer from a string with trailing garbage",
        "ctx":"Context information:\nInput: a string containing an integer and possibly some trailing garbage\nOutput: the integer part of the string, ignoring any trailing garbage",
        "train_pairs":"Examples:\nInput: 1\nOutput: 1\nInput:  42 \nOutput: 42\nInput: 3 -x..\nOutput: 3",
        "ctx_t_pairs":"Context information:\nInput: a string containing an integer and possibly some trailing garbage\nOutput: the integer part of the string, ignoring any trailing garbage\n\nExamples:\nInput: 1\nOutput: 1\nInput:  42 \nOutput: 42\nInput: 3 -x..\nOutput: 3",
        "test_pairs":"Examples:\nInput: 2 3 4 5\nOutput: 2\nInput: 3 1 4 1\nOutput: 3\nInput: 21 asg\nOutput: 21"
    },
    {
        "test_path":"benchmark-stackoverflow\/5",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"How to strip http:\/\/ and www. from an entered domain name using c#",
        "instruction":"extract(): Remove http and www from domain names",
        "ctx":"Context information:\nInput: domain names\nOutput: domain names without http and www",
        "train_pairs":"Examples:\nInput: http:\/\/stackoverflow.com\nOutput: stackoverflow.com\nInput: www.stackoverflow.com\nOutput: stackoverflow.com\nInput: http:\/\/www.stackoverflow.com\nOutput: stackoverflow.com",
        "ctx_t_pairs":"Context information:\nInput: domain names\nOutput: domain names without http and www\n\nExamples:\nInput: http:\/\/stackoverflow.com\nOutput: stackoverflow.com\nInput: www.stackoverflow.com\nOutput: stackoverflow.com\nInput: http:\/\/www.stackoverflow.com\nOutput: stackoverflow.com",
        "test_pairs":"Examples:\nInput: facebook.com\nOutput: facebook.com\nInput: www.facebook.com\nOutput: facebook.com\nInput: http:\/\/facebook.com\nOutput: facebook.com\nInput: http:\/\/www.facebook.com\nOutput: facebook.com\nInput: google.com\nOutput: google.com\nInput: www.google.com\nOutput: google.com\nInput: http:\/\/google.com\nOutput: google.com\nInput: http:\/\/www.google.com\nOutput: google.com"
    },
    {
        "test_path":"benchmark-stackoverflow\/39",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Splitting string into sizes of 4",
        "instruction":"format(): Split a given string into chunks of 4 characters.",
        "ctx":"Context information:\nInput: a string of characters\nOutput: a string of characters, with each chunk of 4 characters separated by comma",
        "train_pairs":"Examples:\nInput: 1111222233334444\nOutput: 1111,2222,3333,4444\nInput: 123412341234\nOutput: 1234,1234,1234\nInput: 1111222\nOutput: 1111,222",
        "ctx_t_pairs":"Context information:\nInput: a string of characters\nOutput: a string of characters, with each chunk of 4 characters separated by comma\n\nExamples:\nInput: 1111222233334444\nOutput: 1111,2222,3333,4444\nInput: 123412341234\nOutput: 1234,1234,1234\nInput: 1111222\nOutput: 1111,222",
        "test_pairs":"Examples:\nInput: 123412345\nOutput: 1234,1234,5\nInput: 1\nOutput: 1"
    },
    {
        "test_path":"benchmark-stackoverflow\/19",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"lower to upper case",
        "instruction":"format(): Convert phrases to upper case",
        "ctx":"Context information:\nInput: text with phrases to convert to upper case\nOutput: text with upper case",
        "train_pairs":"Examples:\nInput: What is the matter\nOutput: WHAT IS THE MATTER\nInput: Something is wrong\nOutput: SOMETHING IS WRONG\nInput: Background color\nOutput: BACKGROUND COLOR",
        "ctx_t_pairs":"Context information:\nInput: text with phrases to convert to upper case\nOutput: text with upper case\n\nExamples:\nInput: What is the matter\nOutput: WHAT IS THE MATTER\nInput: Something is wrong\nOutput: SOMETHING IS WRONG\nInput: Background color\nOutput: BACKGROUND COLOR",
        "test_pairs":"Examples:\nInput: Everyday activity\nOutput: EVERYDAY ACTIVITY\nInput: Test is good for everyone\nOutput: TEST IS GOOD FOR EVERYONE"
    },
    {
        "test_path":"benchmark-stackoverflow\/23",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Phone number processing",
        "instruction":"format(): Process phone numbers by formatting them into a standard format",
        "ctx":"Context information:\nInput: a phone number\nOutput: a formatted phone number",
        "train_pairs":"Examples:\nInput: 5197818816\nOutput: 519-781-8816\nInput: 9134445555\nOutput: 913-444-5555\nInput: 5097918816\nOutput: 509-791-8816",
        "ctx_t_pairs":"Context information:\nInput: a phone number\nOutput: a formatted phone number\n\nExamples:\nInput: 5197818816\nOutput: 519-781-8816\nInput: 9134445555\nOutput: 913-444-5555\nInput: 5097918816\nOutput: 509-791-8816",
        "test_pairs":"Examples:\nInput: 9124445555\nOutput: 912-444-5555\nInput: 4654764768\nOutput: 465-476-4768"
    },
    {
        "test_path":"benchmark-stackoverflow\/9",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Get MIME type from filename extension",
        "instruction":"domain_map(): Map the MIME type from the filename extension",
        "ctx":"Context information:\nInput: the extension of the filename\nOutput: the MIME type",
        "train_pairs":"Examples:\nInput: .html\nOutput: text\/html\nInput: .css\nOutput: text\/css\nInput: .js\nOutput: application\/javascript",
        "ctx_t_pairs":"Context information:\nInput: the extension of the filename\nOutput: the MIME type\n\nExamples:\nInput: .html\nOutput: text\/html\nInput: .css\nOutput: text\/css\nInput: .js\nOutput: application\/javascript",
        "test_pairs":"Examples:\nInput: .json\nOutput: application\/json\nInput: .xml\nOutput: application\/xml\nInput: .jpg\nOutput: image\/jpeg\nInput: .jpeg\nOutput: image\/jpeg\nInput: .png\nOutput: image\/png\nInput: .gif\nOutput: image\/gif\nInput: .svg\nOutput: image\/svg+xml\nInput: .pdf\nOutput: application\/pdf\nInput: .zip\nOutput: application\/zip\nInput: .rar\nOutput: application\/vnd.rar\nInput: .mp4\nOutput: video\/mp4\nInput: .mp3\nOutput: audio\/mpeg\nInput: .wav\nOutput: audio\/wav\nInput: .ogg\nOutput: audio\/ogg\nInput: .csv\nOutput: text\/csv\nInput: .txt\nOutput: text\/plain\nInput: .doc\nOutput: application\/msword\nInput: .docx\nOutput: application\/vnd.openxmlformats-officedocument.wordprocessingml.document\nInput: .xls\nOutput: application\/vnd.ms-excel\nInput: .xlsx\nOutput: application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nInput: .ppt\nOutput: application\/vnd.ms-powerpoint\nInput: .pptx\nOutput: application\/vnd.openxmlformats-officedocument.presentationml.presentation"
    },
    {
        "test_path":"benchmark-stackoverflow\/35",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Increment date by one day",
        "instruction":"domain_calculate(): Increment a given date by one day.",
        "ctx":"Context information:\nInput: a date in YYYY-MM-DD format\nOutput: the date incremented by one day in YYYY-MM-DD format",
        "train_pairs":"Examples:\nInput: 2007-01-01\nOutput: 2007-01-02\nInput: 2008-12-12\nOutput: 2008-12-13\nInput: 2009-03-31\nOutput: 2010-04-01",
        "ctx_t_pairs":"Context information:\nInput: a date in YYYY-MM-DD format\nOutput: the date incremented by one day in YYYY-MM-DD format\n\nExamples:\nInput: 2007-01-01\nOutput: 2007-01-02\nInput: 2008-12-12\nOutput: 2008-12-13\nInput: 2009-03-31\nOutput: 2010-04-01",
        "test_pairs":"Examples:\nInput: 2015-02-28\nOutput: 2015-03-01\nInput: 2015-12-31\nOutput: 2016-01-01"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_pname_initials",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert name to initials",
        "instruction":"format(): Convert the name to initials",
        "ctx":"Context information:\nInput: full name\nOutput: initials",
        "train_pairs":"Examples:\nInput: Doe, John\nOutput: DJ\nInput: James Smith\nOutput: SJ\nInput: Mr. Charles P. Wooten, III\nOutput: WC",
        "ctx_t_pairs":"Context information:\nInput: full name\nOutput: initials\n\nExamples:\nInput: Doe, John\nOutput: DJ\nInput: James Smith\nOutput: SJ\nInput: Mr. Charles P. Wooten, III\nOutput: WC",
        "test_pairs":"Examples:\nInput: John Johnson\nOutput: JJ\nInput: Alice Bob Doe\nOutput: DA"
    },
    {
        "test_path":"benchmark-headcase\/funct_iprange_begin",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract beginning of IP range",
        "instruction":"transform(): Extract the beginning of the IP range",
        "ctx":"Context information:\nInput: IP range\nOutput: beginning IP",
        "train_pairs":"Examples:\nInput: 192.168.70.30-192.168.70.31\nOutput: 192.168.70.31\nInput: fe80::\/10\nOutput: fe80::\nInput: fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586\nOutput: fe80::d502:4ee:3882:c586",
        "ctx_t_pairs":"Context information:\nInput: IP range\nOutput: beginning IP\n\nExamples:\nInput: 192.168.70.30-192.168.70.31\nOutput: 192.168.70.31\nInput: fe80::\/10\nOutput: fe80::\nInput: fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586\nOutput: fe80::d502:4ee:3882:c586",
        "test_pairs":"Examples:\nInput: 192.168.100.0\/22\nOutput: 192.168.100.0\nInput: 192.168.100.14\/24\nOutput: 192.168.100.14"
    },
    {
        "test_path":"benchmark-headcase\/funct_unit",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert feet to meters",
        "instruction":"unit_convert(): Convert the length from feet to meters",
        "ctx":"Context information:\nInput: length in feet\nOutput: length in meters",
        "train_pairs":"Examples:\nInput: 1 ft\nOutput: 0.3 m\nInput: 3 ft\nOutput: 0.9 m\nInput: 10.5 ft\nOutput: 3.2 m",
        "ctx_t_pairs":"Context information:\nInput: length in feet\nOutput: length in meters\n\nExamples:\nInput: 1 ft\nOutput: 0.3 m\nInput: 3 ft\nOutput: 0.9 m\nInput: 10.5 ft\nOutput: 3.2 m",
        "test_pairs":"Examples:\nInput: 11 ft\nOutput: 3.4 m\nInput: 12 ft\nOutput: 3.7 m"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_pname_middle",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract middle name from full name",
        "instruction":"extract(): Extract the middle name from the full name",
        "ctx":"Context information:\nInput: full name\nOutput: middle name initials",
        "train_pairs":"Examples:\nInput: Mr. Charles P. Wooten, III\nOutput: P\nInput: John Adam Johnson\nOutput: A\nInput: Doe, John\nOutput: ",
        "ctx_t_pairs":"Context information:\nInput: full name\nOutput: middle name initials\n\nExamples:\nInput: Mr. Charles P. Wooten, III\nOutput: P\nInput: John Adam Johnson\nOutput: A\nInput: Doe, John\nOutput: ",
        "test_pairs":"Examples:\nInput: James Bob Smith\nOutput: B\nInput: Charlie Denis Edwards\nOutput: D"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_datetime_timezone",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"compute date time by adding 12 hours and 30 minutes",
        "instruction":"domain_calculate(): Compute the datetime by adding 12 hours and 30 minutes",
        "ctx":"Context information:\nInput: original datetime\nOutput: shifted datetime",
        "train_pairs":"Examples:\nInput: August 20, 2015, 16:11\nOutput: August 21, 2015, 04:41\nInput: April 11, 2015, 15:14\nOutput: April 12, 2015, 03:44\nInput: April 27, 2015, 10:00\nOutput: April 27, 2015, 22:30",
        "ctx_t_pairs":"Context information:\nInput: original datetime\nOutput: shifted datetime\n\nExamples:\nInput: August 20, 2015, 16:11\nOutput: August 21, 2015, 04:41\nInput: April 11, 2015, 15:14\nOutput: April 12, 2015, 03:44\nInput: April 27, 2015, 10:00\nOutput: April 27, 2015, 22:30",
        "test_pairs":"Examples:\nInput: May 27, 2015, 01:00\nOutput: May 27, 2015, 13:30\nInput: December 27, 2015, 15:00\nOutput: December 28, 2015, 03:30"
    },
    {
        "test_path":"benchmark-headcase\/funct_datetime_month2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse month number from date",
        "instruction":"extract(): Parse the month number from the date",
        "ctx":"Context information:\nInput: date\nOutput: month number",
        "train_pairs":"Examples:\nInput: 2014-08-03\nOutput: 8\nInput: 2011-04-01\nOutput: 4\nInput: 01\/31\/2014\nOutput: 1",
        "ctx_t_pairs":"Context information:\nInput: date\nOutput: month number\n\nExamples:\nInput: 2014-08-03\nOutput: 8\nInput: 2011-04-01\nOutput: 4\nInput: 01\/31\/2014\nOutput: 1",
        "test_pairs":"Examples:\nInput: 2\/21\/2009 10:35 PM\nOutput: 2\nInput: February 26, 2009\nOutput: 2\nInput: March 26, 2009\nOutput: 3"
    },
    {
        "test_path":"benchmark-headcase\/string_padleft_transformation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"pad string on the left with 3 spaces",
        "instruction":"format(): Pad the string on the left with 3 spaces",
        "ctx":"Context information:\nInput: string\nOutput: padded string with 3 spaces",
        "train_pairs":"Examples:\nInput: xxx\nOutput:   xxx\nInput: yy\nOutput:    yy\nInput: zzzzz\nOutput: zzzzz",
        "ctx_t_pairs":"Context information:\nInput: string\nOutput: padded string with 3 spaces\n\nExamples:\nInput: xxx\nOutput:   xxx\nInput: yy\nOutput:    yy\nInput: zzzzz\nOutput: zzzzz",
        "test_pairs":"Examples:\nInput: abcdefg\nOutput: abcdefg\nInput: c\nOutput:     c"
    },
    {
        "test_path":"benchmark-headcase\/funct_iprange_end",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract end of IP range",
        "instruction":"transform(): Extract the end of the IP range",
        "ctx":"Context information:\nInput: IP range\nOutput: end IP",
        "train_pairs":"Examples:\nInput: 192.168.70.30-192.168.70.31\nOutput: 192.168.70.31\nInput: fe80::\/10\nOutput: febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nInput: fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586\nOutput: fe80::d502:4ee:3882:c586",
        "ctx_t_pairs":"Context information:\nInput: IP range\nOutput: end IP\n\nExamples:\nInput: 192.168.70.30-192.168.70.31\nOutput: 192.168.70.31\nInput: fe80::\/10\nOutput: febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff\nInput: fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586\nOutput: fe80::d502:4ee:3882:c586",
        "test_pairs":"Examples:\nInput: 2001:db8::\/48\nOutput: 2001:db8:0:ffff:ffff:ffff:ffff:ffff"
    },
    {
        "test_path":"benchmark-headcase\/datetime_diff_transformation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"date time roll back 1 hour",
        "instruction":"domain_calculate(): Roll back the datetime value by 1 hour",
        "ctx":"Context information:\nInput: original datetime value\nOutput: datetime value rolled back by 1 hour",
        "train_pairs":"Examples:\nInput: 2007\/02\/26 18:37:58\nOutput: 2007\/02\/26 17:37:58\nInput: 2008\/02\/26 17:37:58\nOutput: 2008\/02\/26 16:37:58\nInput: 2000\/02\/26 00:37:50\nOutput: 2000\/02\/25 23:37:50",
        "ctx_t_pairs":"Context information:\nInput: original datetime value\nOutput: datetime value rolled back by 1 hour\n\nExamples:\nInput: 2007\/02\/26 18:37:58\nOutput: 2007\/02\/26 17:37:58\nInput: 2008\/02\/26 17:37:58\nOutput: 2008\/02\/26 16:37:58\nInput: 2000\/02\/26 00:37:50\nOutput: 2000\/02\/25 23:37:50",
        "test_pairs":"Examples:\nInput: 2009\/02\/26 16:37:58\nOutput: 2009\/02\/26 15:37:58\nInput: 2000\/02\/26 11:37:50\nOutput: 2000\/02\/26 10:37:50"
    },
    {
        "test_path":"benchmark-headcase\/numeric_rounding",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"round number",
        "instruction":"format(): Round the number in 1-decimal format",
        "ctx":"Context information:\nInput: number\nOutput: rounded number",
        "train_pairs":"Examples:\nInput: 2.431\nOutput: 2.4\nInput: 1.5857E+0\nOutput: 1.6\nInput: 1234567890\nOutput: 1234567890.0",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: rounded number\n\nExamples:\nInput: 2.431\nOutput: 2.4\nInput: 1.5857E+0\nOutput: 1.6\nInput: 1234567890\nOutput: 1234567890.0",
        "test_pairs":"Examples:\nInput: 13.33e-11\nOutput: 0.0\nInput: 23.45\nOutput: 23.5"
    },
    {
        "test_path":"benchmark-headcase\/funct_bytesize3",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"covert raw size to byte size and present in scientific notation",
        "instruction":"transform(): Convert the original size to byte size and present in scientific notation",
        "ctx":"Context information:\nInput: raw size\nOutput: byte size in scientific notation with 2 decimal places",
        "train_pairs":"Examples:\nInput: 10B\nOutput: 1.00E1 Bytes\nInput: 100 KB\nOutput: 1.02E5 Bytes\nInput: 1000MB\nOutput: 1.05E9 Bytes",
        "ctx_t_pairs":"Context information:\nInput: raw size\nOutput: byte size in scientific notation with 2 decimal places\n\nExamples:\nInput: 10B\nOutput: 1.00E1 Bytes\nInput: 100 KB\nOutput: 1.02E5 Bytes\nInput: 1000MB\nOutput: 1.05E9 Bytes",
        "test_pairs":"Examples:\nInput: 1b\nOutput: 1.25E-1 Bytes\nInput: 100 B\nOutput: 1.00E2 Bytes\nInput: 1GB\nOutput: 1.07E9 Bytes"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_address_secondaryline",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract secondary line from address",
        "instruction":"extract(): Extract the secondary line from the given address",
        "ctx":"Context information:\nInput: full address\nOutput: secondary line",
        "train_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: \nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: STE H\nInput: 100 sunset blvd, Room 301, Sacramento California\nOutput: RM 301",
        "ctx_t_pairs":"Context information:\nInput: full address\nOutput: secondary line\n\nExamples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: \nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: STE H\nInput: 100 sunset blvd, Room 301, Sacramento California\nOutput: RM 301",
        "test_pairs":"Examples:\nInput: 747 6th St, room 1010, Kirkland, WA 98033\nOutput: ROOM 1010\nInput: 10 commerce way ste a, Richmond, VA, 23452\nOutput: STE A"
    },
    {
        "test_path":"benchmark-headcase\/string_camelize_transformation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to camel case",
        "instruction":"format(): Convert the string to camel case",
        "ctx":"Context information:\nInput: string\nOutput: camel case string",
        "train_pairs":"Examples:\nInput: active_record\nOutput: activeRecord\nInput: good_spirit\nOutput: goodSpirit\nInput: a_string_var\nOutput: aStringVar",
        "ctx_t_pairs":"Context information:\nInput: string\nOutput: camel case string\n\nExamples:\nInput: active_record\nOutput: activeRecord\nInput: good_spirit\nOutput: goodSpirit\nInput: a_string_var\nOutput: aStringVar",
        "test_pairs":"Examples:\nInput: num_hit_count_curr\nOutput: numHitCountCurr\nInput: a_bc_de_fg_hi_jk\nOutput: aBcDeFgHiJk"
    },
    {
        "test_path":"benchmark-headcase\/funct_bytesize2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"covert raw size to byte size and present in standard format",
        "instruction":"transform(): Convert the original size to byte size and present in standard format",
        "ctx":"Context information:\nInput: raw size\nOutput: byte size in standard format",
        "train_pairs":"Examples:\nInput: 10B\nOutput: 10 Bytes\nInput: 100 KB\nOutput: 102,400 Bytes\nInput: 1000MB\nOutput: 1,048,576,000 Bytes",
        "ctx_t_pairs":"Context information:\nInput: raw size\nOutput: byte size in standard format\n\nExamples:\nInput: 10B\nOutput: 10 Bytes\nInput: 100 KB\nOutput: 102,400 Bytes\nInput: 1000MB\nOutput: 1,048,576,000 Bytes",
        "test_pairs":"Examples:\nInput: 1b\nOutput: 0.125 Bytes\nInput: 100 B\nOutput: 100 Bytes\nInput: 1GB\nOutput: 1,073,741,824 Bytes"
    },
    {
        "test_path":"benchmark-headcase\/funct_domain_tld",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract top-level domain from URL",
        "instruction":"extract(): Extract the top-level domain from the URL",
        "ctx":"Context information:\nInput: URL\nOutput: top-level domain",
        "train_pairs":"Examples:\nInput: photos.facebook.co.uk\nOutput: co.uk\nInput: photos.twitter.com\nOutput: com\nInput: cnn.com.au\nOutput: com.au",
        "ctx_t_pairs":"Context information:\nInput: URL\nOutput: top-level domain\n\nExamples:\nInput: photos.facebook.co.uk\nOutput: co.uk\nInput: photos.twitter.com\nOutput: com\nInput: cnn.com.au\nOutput: com.au",
        "test_pairs":"Examples:\nInput: news.abc.com.ca\nOutput: ca\nInput: cnbc.com\nOutput: com"
    },
    {
        "test_path":"benchmark-headcase\/funct_cookie",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract domain from cookie",
        "instruction":"extract(): Extract the domain from the cookie",
        "ctx":"Context information:\nInput: cookie string\nOutput: domain",
        "train_pairs":"Examples:\nInput: username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=\/\nOutput: \nInput: skin=noskin; path=\/; domain=.amazon.com; expires=Mon, 22-Mar-2010 18:40:34 GMT;\nOutput: .amazon.com\nInput: path=\/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.foo.com;\nOutput: .foo.com",
        "ctx_t_pairs":"Context information:\nInput: cookie string\nOutput: domain\n\nExamples:\nInput: username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=\/\nOutput: \nInput: skin=noskin; path=\/; domain=.amazon.com; expires=Mon, 22-Mar-2010 18:40:34 GMT;\nOutput: .amazon.com\nInput: path=\/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.foo.com;\nOutput: .foo.com",
        "test_pairs":"Examples:\nInput: path=\/; domain=.microsoft.com; expires=Mon, 1-Mar-2010 18:40:34 GMT;\nOutput: .microsoft.com\nInput: path=\/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.abc.com;\nOutput: .abc.com"
    },
    {
        "test_path":"benchmark-headcase\/numeric_padding",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"pad number with leading zeros",
        "instruction":"format(): Pad the number with leading zeros in 5-digit format",
        "ctx":"Context information:\nInput: number\nOutput: padded number",
        "train_pairs":"Examples:\nInput: 2\nOutput: 00002\nInput: 144\nOutput: 00144\nInput: 12345\nOutput: 12345",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: padded number\n\nExamples:\nInput: 2\nOutput: 00002\nInput: 144\nOutput: 00144\nInput: 12345\nOutput: 12345",
        "test_pairs":"Examples:\nInput: 789\nOutput: 00789\nInput: 99\nOutput: 00099"
    },
    {
        "test_path":"benchmark-headcase\/funct_nmea_bearing",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract bearing from NMEA sentence",
        "instruction":"extract(): Extract the bearing from the NMEA sentence",
        "ctx":"Context information:\nInput: NMEA sentence\nOutput: bearing",
        "train_pairs":"Examples:\nInput: $GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12\nOutput: 62.01\nInput: $GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28\nOutput: 83.25\nInput: $GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D\nOutput: 0",
        "ctx_t_pairs":"Context information:\nInput: NMEA sentence\nOutput: bearing\n\nExamples:\nInput: $GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12\nOutput: 62.01\nInput: $GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28\nOutput: 83.25\nInput: $GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D\nOutput: 0",
        "test_pairs":"Examples:\nInput: $GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25\nOutput: 89.68\nInput: $GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28\nOutput: 83.25"
    },
    {
        "test_path":"benchmark-headcase\/funct_email",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"validate email address",
        "instruction":"transform(): Validate the email address",
        "ctx":"Context information:\nInput: email address\nOutput: validity boolean",
        "train_pairs":"Examples:\nInput: Abcdef@example.com\nOutput: true\nInput: very.common@example.com\nOutput: true\nInput: A@b@c@example.com\nOutput: false",
        "ctx_t_pairs":"Context information:\nInput: email address\nOutput: validity boolean\n\nExamples:\nInput: Abcdef@example.com\nOutput: true\nInput: very.common@example.com\nOutput: true\nInput: A@b@c@example.com\nOutput: false",
        "test_pairs":"Examples:\nInput: good@example.com\nOutput: true\nInput: A@b.com@example.com\nOutput: false"
    },
    {
        "test_path":"benchmark-headcase\/funct_isbn10to13",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert ISBN-10 to ISBN-13",
        "instruction":"domain_map(): Convert the ISBN-10 to ISBN-13",
        "ctx":"Context information:\nInput: ISBN-10\nOutput: ISBN-13",
        "train_pairs":"Examples:\nInput: 0830818030\nOutput: 978-0-8308-1803-7\nInput: 316148410X\nOutput: 978-3-1614-8410-0\nInput: 1566199093\nOutput: 978-1-56619-909-4",
        "ctx_t_pairs":"Context information:\nInput: ISBN-10\nOutput: ISBN-13\n\nExamples:\nInput: 0830818030\nOutput: 978-0-8308-1803-7\nInput: 316148410X\nOutput: 978-3-1614-8410-0\nInput: 1566199093\nOutput: 978-1-56619-909-4",
        "test_pairs":"Examples:\nInput: 0198526636\nOutput: 978-0-19-852663-6\nInput: 1861972717\nOutput: 978-1-86197-271-2"
    },
    {
        "test_path":"benchmark-headcase\/string_uppercaseing_transformation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to uppercase",
        "instruction":"format(): Convert the string to uppercase",
        "ctx":"Context information:\nInput: string\nOutput: uppercase string",
        "train_pairs":"Examples:\nInput: xxx\nOutput: XXX\nInput: this is well\nOutput: THIS IS WELL\nInput: In my backpack, There is a monkey\nOutput: IN MY BACKPACK, THERE IS A MONKEY",
        "ctx_t_pairs":"Context information:\nInput: string\nOutput: uppercase string\n\nExamples:\nInput: xxx\nOutput: XXX\nInput: this is well\nOutput: THIS IS WELL\nInput: In my backpack, There is a monkey\nOutput: IN MY BACKPACK, THERE IS A MONKEY",
        "test_pairs":"Examples:\nInput: test\nOutput: TEST\nInput: Test Is Good\nOutput: TEST IS GOOD"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_address_streetline",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract street line from address",
        "instruction":"extract(): Extract the street line from the given address",
        "ctx":"Context information:\nInput: full address\nOutput: street line",
        "train_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: 1 microsoft way\nInput: 5 super commerce place blvd Ste H, Richmond, VA, 23452\nOutput: 5 super commerce place blvd\nInput: 1001 sunset blvd, Room 301, Sacramento California\nOutput: 1001 sunset blvd",
        "ctx_t_pairs":"Context information:\nInput: full address\nOutput: street line\n\nExamples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: 1 microsoft way\nInput: 5 super commerce place blvd Ste H, Richmond, VA, 23452\nOutput: 5 super commerce place blvd\nInput: 1001 sunset blvd, Room 301, Sacramento California\nOutput: 1001 sunset blvd",
        "test_pairs":"Examples:\nInput: 1730 Minor Ave, Seattle, WA 98101\nOutput: 1730 minor ave\nInput: 100 main street, redmond, wa, 98052\nOutput: 100 main street"
    },
    {
        "test_path":"benchmark-headcase\/funct_datetime_daysofweek",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse day of the week from date",
        "instruction":"extract(): Parse the day of the week from the date",
        "ctx":"Context information:\nInput: date\nOutput: day of the week",
        "train_pairs":"Examples:\nInput: 05\/13\/2015\nOutput: Wednesday\nInput: 05\/12\/2015\nOutput: Tuesday\nInput: 01\/21\/2014\nOutput: Tuesday",
        "ctx_t_pairs":"Context information:\nInput: date\nOutput: day of the week\n\nExamples:\nInput: 05\/13\/2015\nOutput: Wednesday\nInput: 05\/12\/2015\nOutput: Tuesday\nInput: 01\/21\/2014\nOutput: Tuesday",
        "test_pairs":"Examples:\nInput: 03\/01\/2013\nOutput: Friday\nInput: 01\/01\/2014\nOutput: Wednesday"
    },
    {
        "test_path":"benchmark-headcase\/funct_domain_sld",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse second-level domain from URL",
        "instruction":"extract(): Parse the second-level domain from the URL",
        "ctx":"Context information:\nInput: URL\nOutput: second-level domain",
        "train_pairs":"Examples:\nInput: www.news.cnn.com\nOutput: cnn\nInput: cnn.co.uk\nOutput: cnn\nInput: drive.google.ca\nOutput: google",
        "ctx_t_pairs":"Context information:\nInput: URL\nOutput: second-level domain\n\nExamples:\nInput: www.news.cnn.com\nOutput: cnn\nInput: cnn.co.uk\nOutput: cnn\nInput: drive.google.ca\nOutput: google",
        "test_pairs":"Examples:\nInput: photos.twitter.com\nOutput: twitter\nInput: www.photos.abc.com\nOutput: abc"
    },
    {
        "test_path":"benchmark-headcase\/funct_datetime_month",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse month from date",
        "instruction":"extract(): Parse the month from the date",
        "ctx":"Context information:\nInput: date\nOutput: month name",
        "train_pairs":"Examples:\nInput: 2011-10-11\nOutput: October\nInput: 2011-Jan-12\nOutput: January\nInput: 7\/1\/2009\nOutput: July",
        "ctx_t_pairs":"Context information:\nInput: date\nOutput: month name\n\nExamples:\nInput: 2011-10-11\nOutput: October\nInput: 2011-Jan-12\nOutput: January\nInput: 7\/1\/2009\nOutput: July",
        "test_pairs":"Examples:\nInput: 2012-02-12\nOutput: February\nInput: 6\/1\/2009 12:01:01\nOutput: June"
    },
    {
        "test_path":"benchmark-headcase\/numeric_scientific_notation2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to scientific notation with more precision",
        "instruction":"transform(): Convert the number to scientific notation with 2 decimal places",
        "ctx":"Context information:\nInput: number\nOutput: scientific notation",
        "train_pairs":"Examples:\nInput: 2.431\nOutput: 2.43E0\nInput: 1.5857E+0\nOutput: 1.59E0\nInput: 1234567890\nOutput: 1.23E9",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: scientific notation\n\nExamples:\nInput: 2.431\nOutput: 2.43E0\nInput: 1.5857E+0\nOutput: 1.59E0\nInput: 1234567890\nOutput: 1.23E9",
        "test_pairs":"Examples:\nInput: 13.33e-11\nOutput: 1.33E-10\nInput: 12.34\nOutput: 1.23E1"
    },
    {
        "test_path":"benchmark-headcase\/funct_user_agent",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract OS from user agent string",
        "instruction":"extract(): Extract the operating system from the user agent string",
        "ctx":"Context information:\nInput: user agent string\nOutput: operating system",
        "train_pairs":"Examples:\nInput: Mozilla\/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident\/6.0)\nOutput: Windows NT 6.1\nInput: Mozilla\/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US)\nOutput: Windows\nInput: Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/41.0.2227.0 Safari\/537.36\nOutput: X11",
        "ctx_t_pairs":"Context information:\nInput: user agent string\nOutput: operating system\n\nExamples:\nInput: Mozilla\/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident\/6.0)\nOutput: Windows NT 6.1\nInput: Mozilla\/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US)\nOutput: Windows\nInput: Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/41.0.2227.0 Safari\/537.36\nOutput: X11",
        "test_pairs":"Examples:\nInput: Mozilla\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\/537.1 (KHTML, like Gecko) Chrome\/22.0.1207.1 Safari\/537.1\nOutput: Windows NT 6.1\nInput: Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko\/20100101 Firefox\/33.0\nOutput: Macintosh"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_datetime",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert date to readable format",
        "instruction":"transform(): Convert the date to a readable format",
        "ctx":"Context information:\nInput: original date\nOutput: readable date",
        "train_pairs":"Examples:\nInput: 2011-09-21\nOutput: September 21\nInput: 2011-Jan-12\nOutput: January 12\nInput: 7\/1\/2009\nOutput: July 1",
        "ctx_t_pairs":"Context information:\nInput: original date\nOutput: readable date\n\nExamples:\nInput: 2011-09-21\nOutput: September 21\nInput: 2011-Jan-12\nOutput: January 12\nInput: 7\/1\/2009\nOutput: July 1",
        "test_pairs":"Examples:\nInput: 2012-02-12\nOutput: February 12\nInput: 6\/1\/2009 12:01:01\nOutput: June 1"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_pname_lastname",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract last name from full name",
        "instruction":"extract(): Extract the last name from the full name",
        "ctx":"Context information:\nInput: full name\nOutput: last name",
        "train_pairs":"Examples:\nInput: Doe, John\nOutput: Doe\nInput: James Smith\nOutput: Smith\nInput: Mr. Charles P. Wooten, III\nOutput: Wooten",
        "ctx_t_pairs":"Context information:\nInput: full name\nOutput: last name\n\nExamples:\nInput: Doe, John\nOutput: Doe\nInput: James Smith\nOutput: Smith\nInput: Mr. Charles P. Wooten, III\nOutput: Wooten",
        "test_pairs":"Examples:\nInput: John Johnson\nOutput: Johnson"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_address_city",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract city from address",
        "instruction":"extract(): Extract the city from the given address",
        "ctx":"Context information:\nInput: full address\nOutput: city",
        "train_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: Redmond\nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: Richmond\nInput: 100 sunset blvd, room 301, Beverley Hills California\nOutput: Beverley Hills",
        "ctx_t_pairs":"Context information:\nInput: full address\nOutput: city\n\nExamples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: Redmond\nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: Richmond\nInput: 100 sunset blvd, room 301, Beverley Hills California\nOutput: Beverley Hills",
        "test_pairs":"Examples:\nInput: 32 super blvd Ste H, Riverside California\nOutput: Riverside\nInput: 100 turing way, Redmond, wa, 98052\nOutput: Redmond"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_address_street",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract street from address",
        "instruction":"extract(): Extract the street from the given address",
        "ctx":"Context information:\nInput: full address\nOutput: street",
        "train_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: microsoft way\nInput: 5 super commerce place blvd Ste H, Richmond, VA, 23452\nOutput: super commerce place blvd\nInput: 1001 sunset blvd, Room 301, Sacramento California\nOutput: sunset blvd",
        "ctx_t_pairs":"Context information:\nInput: full address\nOutput: street\n\nExamples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: microsoft way\nInput: 5 super commerce place blvd Ste H, Richmond, VA, 23452\nOutput: super commerce place blvd\nInput: 1001 sunset blvd, Room 301, Sacramento California\nOutput: sunset blvd",
        "test_pairs":"Examples:\nInput: 747 6th St room 111, Kirkland, WA 98033\nOutput: 6th st\nInput: 10 commerce way, Richmond, VA, 23452\nOutput: commerce way"
    },
    {
        "test_path":"benchmark-headcase\/funct_bytesize",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"covert raw size to byte size",
        "instruction":"transform(): Convert the original size to byte size",
        "ctx":"Context information:\nInput: raw size\nOutput: byte size",
        "train_pairs":"Examples:\nInput: 10B\nOutput: 10 Bytes\nInput: 100 KB\nOutput: 102400 Bytes\nInput: 1000MB\nOutput: 1048576000 Bytes",
        "ctx_t_pairs":"Context information:\nInput: raw size\nOutput: byte size\n\nExamples:\nInput: 10B\nOutput: 10 Bytes\nInput: 100 KB\nOutput: 102400 Bytes\nInput: 1000MB\nOutput: 1048576000 Bytes",
        "test_pairs":"Examples:\nInput: 1b\nOutput: 0.125 Bytes\nInput: 100 B\nOutput: 100 Bytes\nInput: 1GB\nOutput: 1073741824 Bytes"
    },
    {
        "test_path":"benchmark-headcase\/numeric_linear",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"calculate by x3",
        "instruction":"domain_calculate(): Calculate by x3",
        "ctx":"Context information:\nInput: number\nOutput: 3x number",
        "train_pairs":"Examples:\nInput: 1\nOutput: 3\nInput: 3\nOutput: 9\nInput: 5\nOutput: 15",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: 3x number\n\nExamples:\nInput: 1\nOutput: 3\nInput: 3\nOutput: 9\nInput: 5\nOutput: 15",
        "test_pairs":"Examples:\nInput: 8\nOutput: 24\nInput: 9\nOutput: 27"
    },
    {
        "test_path":"benchmark-headcase\/funct_ipv4v6",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert IPv4 to IPv6",
        "instruction":"domain_calculate(): Convert the IPv4 address to IPv6",
        "ctx":"Context information:\nInput: IPv4 address\nOutput: IPv6 address",
        "train_pairs":"Examples:\nInput: 102.3.1.2\nOutput: 0:0:0:0:0:ffff:6603:102\nInput: 102.31.1.244\nOutput: 0:0:0:0:0:ffff:661f:1f4\nInput: 20.55.255.255\nOutput: 0:0:0:0:0:ffff:1437:ffff",
        "ctx_t_pairs":"Context information:\nInput: IPv4 address\nOutput: IPv6 address\n\nExamples:\nInput: 102.3.1.2\nOutput: 0:0:0:0:0:ffff:6603:102\nInput: 102.31.1.244\nOutput: 0:0:0:0:0:ffff:661f:1f4\nInput: 20.55.255.255\nOutput: 0:0:0:0:0:ffff:1437:ffff",
        "test_pairs":"Examples:\nInput: 39.91.29.11\nOutput: 0:0:0:0:0:ffff:275b:1d0b\nInput: 39.255.255.255\nOutput: 0:0:0:0:0:ffff:27ff:ffff"
    },
    {
        "test_path":"benchmark-headcase\/numeric_fahrenheit",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert Celsius to Fahrenheit",
        "instruction":"unit_convert(): Convert the temperature from Celsius to Fahrenheit",
        "ctx":"Context information:\nInput: temperature in Celsius\nOutput: temperature in Fahrenheit",
        "train_pairs":"Examples:\nInput: 10ºC\nOutput: 50ºF\nInput: 33ºC\nOutput: 91.4ºF\nInput: 46ºC\nOutput: 114.8ºF",
        "ctx_t_pairs":"Context information:\nInput: temperature in Celsius\nOutput: temperature in Fahrenheit\n\nExamples:\nInput: 10ºC\nOutput: 50ºF\nInput: 33ºC\nOutput: 91.4ºF\nInput: 46ºC\nOutput: 114.8ºF",
        "test_pairs":"Examples:\nInput: 3ºC\nOutput: 37.4ºF\nInput: 6ºC\nOutput: 42.8ºF"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_address_state",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"extract state from address",
        "instruction":"extract(): Extract the state from the given address",
        "ctx":"Context information:\nInput: full address\nOutput: state",
        "train_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: WA\nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: VA\nInput: 100 sunset blvd, room 301, Sacramento California\nOutput: CA",
        "ctx_t_pairs":"Context information:\nInput: full address\nOutput: state\n\nExamples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: WA\nInput: 1201 super commerce blvd Ste H, Richmond, VA, 23452\nOutput: VA\nInput: 100 sunset blvd, room 301, Sacramento California\nOutput: CA",
        "test_pairs":"Examples:\nInput: 747 6th St S, Kirkland, WA 98033\nOutput: WA\nInput: 10 commerce way, Richmond, VA, 23452\nOutput: VA"
    },
    {
        "test_path":"benchmark-headcase\/numeric_currency",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert USD to CAD",
        "instruction":"transform(): Convert the amount from USD to CAD",
        "ctx":"Context information:\nInput: amount in USD\nOutput: amount in CAD",
        "train_pairs":"Examples:\nInput: $1\nOutput: CAD$1.30\nInput: $10\nOutput: CAD$12.98\nInput: $55\nOutput: CAD$71.39",
        "ctx_t_pairs":"Context information:\nInput: amount in USD\nOutput: amount in CAD\n\nExamples:\nInput: $1\nOutput: CAD$1.30\nInput: $10\nOutput: CAD$12.98\nInput: $55\nOutput: CAD$71.39",
        "test_pairs":"Examples:\nInput: $88\nOutput: CAD$114.22\nInput: $3\nOutput: CAD$3.89"
    },
    {
        "test_path":"benchmark-headcase\/funct_comp_pname",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert name to initial and last name",
        "instruction":"format(): Convert the name to initial and last name",
        "ctx":"Context information:\nInput: full name\nOutput: initial and last name",
        "train_pairs":"Examples:\nInput: Doe, John\nOutput: J. Doe\nInput: James Smith\nOutput: J. Smith\nInput: Mr. Charles P. Wooten, III\nOutput: C. Wooten",
        "ctx_t_pairs":"Context information:\nInput: full name\nOutput: initial and last name\n\nExamples:\nInput: Doe, John\nOutput: J. Doe\nInput: James Smith\nOutput: J. Smith\nInput: Mr. Charles P. Wooten, III\nOutput: C. Wooten",
        "test_pairs":"Examples:\nInput: John Johnson\nOutput: J. Johnson\nInput: Alice C. Doe\nOutput: A. Doe"
    },
    {
        "test_path":"benchmark-headcase\/numeric_const_significant",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"round to significant figures",
        "instruction":"format(): Round the number to significant figures",
        "ctx":"Context information:\nInput: number\nOutput: rounded number",
        "train_pairs":"Examples:\nInput: 2.431\nOutput: 2.4\nInput: 0.15857\nOutput: 0.16\nInput: 123\nOutput: 1.2E+02",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: rounded number\n\nExamples:\nInput: 2.431\nOutput: 2.4\nInput: 0.15857\nOutput: 0.16\nInput: 123\nOutput: 1.2E+02",
        "test_pairs":"Examples:\nInput: 13.4\nOutput: 13\nInput: 1.234\nOutput: 1.2"
    },
    {
        "test_path":"benchmark-headcase\/funct_expression",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"evaluate mathematical expression",
        "instruction":"domain_calculate(): Evaluate the mathematical expression",
        "ctx":"Context information:\nInput: expression\nOutput: result",
        "train_pairs":"Examples:\nInput: 1 + 23\nOutput: 24\nInput: 6\/2\nOutput: 3\nInput: (1+3)\/2\nOutput: 2",
        "ctx_t_pairs":"Context information:\nInput: expression\nOutput: result\n\nExamples:\nInput: 1 + 23\nOutput: 24\nInput: 6\/2\nOutput: 3\nInput: (1+3)\/2\nOutput: 2",
        "test_pairs":"Examples:\nInput: 3 + 4\nOutput: 7\nInput: 2 \/ 2 + 1\nOutput: 2"
    },
    {
        "test_path":"benchmark-headcase\/numeric_scientific_notation",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to scientific notation with 1 decimal place",
        "instruction":"transform(): Convert the number to scientific notation with 1 decimal place",
        "ctx":"Context information:\nInput: number\nOutput: scientific notation with 1 decimal place",
        "train_pairs":"Examples:\nInput: 2.431\nOutput: 2.4E0\nInput: 1.55\nOutput: 1.6E0\nInput: 1293.3\nOutput: 1.3E3",
        "ctx_t_pairs":"Context information:\nInput: number\nOutput: scientific notation with 1 decimal place\n\nExamples:\nInput: 2.431\nOutput: 2.4E0\nInput: 1.55\nOutput: 1.6E0\nInput: 1293.3\nOutput: 1.3E3",
        "test_pairs":"Examples:\nInput: 0.0013\nOutput: 1.3E-3\nInput: 123\nOutput: 1.2E2"
    },
    {
        "test_path":"benchmark-headcase\/funct_nmea_speed",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"parse NMEA speed to km\/h",
        "instruction":"transform(): extract and convert the speed from NMEA sentence to km\/h",
        "ctx":"Context information:\nInput: NMEA sentence\nOutput: speed in km\/h",
        "train_pairs":"Examples:\nInput: $GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12\nOutput: 22.0388 km\/h\nInput: $GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D\nOutput: 0 km\/h\nInput: $GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28\nOutput: 0.2778 km\/h",
        "ctx_t_pairs":"Context information:\nInput: NMEA sentence\nOutput: speed in km\/h\n\nExamples:\nInput: $GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12\nOutput: 22.0388 km\/h\nInput: $GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D\nOutput: 0 km\/h\nInput: $GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28\nOutput: 0.2778 km\/h",
        "test_pairs":"Examples:\nInput: $GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25\nOutput: 0 km\/h\nInput: $GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12\nOutput: 22.0388 km\/h"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_44",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert pst to est",
        "instruction":"domain_calculate(): Convert Pacific Standard Time (PST) to Eastern Standard Time (EST).",
        "ctx":"Context information:\nInput: time in PST\nOutput: time in EST",
        "train_pairs":"Examples:\nInput: 9:41 PM, Aug 17, 2015\nOutput: 12:41 AM, Aug 18, 2015\nInput: 1:00 AM, Jun 3, 2015\nOutput: 4:00 AM, Jun 3, 2015\nInput: 10:00 AM, Mar 20, 2015\nOutput: 1:00 PM, Mar 20, 2015",
        "ctx_t_pairs":"Context information:\nInput: time in PST\nOutput: time in EST\n\nExamples:\nInput: 9:41 PM, Aug 17, 2015\nOutput: 12:41 AM, Aug 18, 2015\nInput: 1:00 AM, Jun 3, 2015\nOutput: 4:00 AM, Jun 3, 2015\nInput: 10:00 AM, Mar 20, 2015\nOutput: 1:00 PM, Mar 20, 2015",
        "test_pairs":"Examples:\nInput: 5:00 AM, Jun 5, 2015\nOutput: 8:00 AM, Jun 5, 2015\nInput: 11:00 AM, Mar 20, 2015\nOutput: 2:00 PM, Mar 20, 2015"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_47",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert inches to meters.",
        "instruction":"unit_convert(): Convert inches to meters.",
        "ctx":"Context information:\nInput: inches\nOutput: meters",
        "train_pairs":"Examples:\nInput: 4 inch\nOutput: 0.1016 m\nInput: 980 inch\nOutput: 24.892 m\nInput: 2000 inch\nOutput: 50.8 m",
        "ctx_t_pairs":"Context information:\nInput: inches\nOutput: meters\n\nExamples:\nInput: 4 inch\nOutput: 0.1016 m\nInput: 980 inch\nOutput: 24.892 m\nInput: 2000 inch\nOutput: 50.8 m",
        "test_pairs":"Examples:\nInput: 321 inch\nOutput: 8.1534 m\nInput: 111 inch\nOutput: 2.8194 m"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_13",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert regular time to military time",
        "instruction":"format(): convert regular time to military time.",
        "ctx":"Context information:\nInput: regular time (AM\/PM)\nOutput: military time, 24-hour format",
        "train_pairs":"Examples:\nInput: 1:00 PM\nOutput: 1300\nInput: 6:00 PM\nOutput: 1800\nInput: 11:00 PM\nOutput: 2300",
        "ctx_t_pairs":"Context information:\nInput: regular time (AM\/PM)\nOutput: military time, 24-hour format\n\nExamples:\nInput: 1:00 PM\nOutput: 1300\nInput: 6:00 PM\nOutput: 1800\nInput: 11:00 PM\nOutput: 2300",
        "test_pairs":"Examples:\nInput: 8:00 AM\nOutput: 0800\nInput: 11:00 AM\nOutput: 1100"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_29",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert decimal degrees to degrees minutes seconds",
        "instruction":"domain_calculate(): Convert a given number of decimal degrees to degrees, minutes, and seconds format.",
        "ctx":"Context information:\nInput: a number of decimal degrees\nOutput: a representation in degrees, minutes, and seconds format",
        "train_pairs":"Examples:\nInput: 4\nOutput: 4 0' 0\"\nInput: 11.35\nOutput: 11 20' 60\"\nInput: 129.45\nOutput: 129 26' 60\"",
        "ctx_t_pairs":"Context information:\nInput: a number of decimal degrees\nOutput: a representation in degrees, minutes, and seconds format\n\nExamples:\nInput: 4\nOutput: 4 0' 0\"\nInput: 11.35\nOutput: 11 20' 60\"\nInput: 129.45\nOutput: 129 26' 60\"",
        "test_pairs":"Examples:\nInput: 23\nOutput: 23 0' 0\"\nInput: 21\nOutput: 21 26' 24\""
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_48",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert hourly wage to salary",
        "instruction":"domain_calculate(): Convert hourly wage to annual salary.",
        "ctx":"Context information:\nInput: hourly wage\nOutput: annual salary",
        "train_pairs":"Examples:\nInput: $12\/hour\nOutput: $24,960.00\nInput: $15\/hour\nOutput: $31,200.00\nInput: $40\/hour\nOutput: $83,200.00",
        "ctx_t_pairs":"Context information:\nInput: hourly wage\nOutput: annual salary\n\nExamples:\nInput: $12\/hour\nOutput: $24,960.00\nInput: $15\/hour\nOutput: $31,200.00\nInput: $40\/hour\nOutput: $83,200.00",
        "test_pairs":"Examples:\nInput: $22\/hour\nOutput: $45,760.00\nInput: $11\/hour\nOutput: $22,880.00"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_3",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert celsius to fahrenheit.",
        "instruction":"unit_convert(): Convert Celsius to Fahrenheit.",
        "ctx":"Context information:\nInput: Celsius\nOutput: Fahrenheit",
        "train_pairs":"Examples:\nInput: 1 Celsius\nOutput: 33.8 Fahrenheit\nInput: 7 Celsius\nOutput: 44.6 Fahrenheit\nInput: 18 Celsius\nOutput: 64.4 Fahrenheit",
        "ctx_t_pairs":"Context information:\nInput: Celsius\nOutput: Fahrenheit\n\nExamples:\nInput: 1 Celsius\nOutput: 33.8 Fahrenheit\nInput: 7 Celsius\nOutput: 44.6 Fahrenheit\nInput: 18 Celsius\nOutput: 64.4 Fahrenheit",
        "test_pairs":"Examples:\nInput: -17.2222 Celsius\nOutput: 1 Fahrenheit\nInput: 50.5556 Celsius\nOutput: 123 Fahrenheit"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_26",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert grams to cups.",
        "instruction":"unit_convert(): Convert grams to cups.",
        "ctx":"Context information:\nInput: grams\nOutput: cups",
        "train_pairs":"Examples:\nInput: 2 grams\nOutput: 0.00845 cups\nInput: 15 grams\nOutput: 0.0634 cups\nInput: 50 grams\nOutput: 0.21134 cups",
        "ctx_t_pairs":"Context information:\nInput: grams\nOutput: cups\n\nExamples:\nInput: 2 grams\nOutput: 0.00845 cups\nInput: 15 grams\nOutput: 0.0634 cups\nInput: 50 grams\nOutput: 0.21134 cups",
        "test_pairs":"Examples:\nInput: 25 grams\nOutput: 0.10567 cups\nInput: 10 grams\nOutput: 0.04227 cups"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_25",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert hijri to gregorian",
        "instruction":"domain_map(): Convert a given Hijri date to Gregorian date.",
        "ctx":"Context information:\nInput: a Hijri date\nOutput: return the corresponding Gregorian date",
        "train_pairs":"Examples:\nInput: 11 Shawwal 1430\nOutput: Wednesday 30 September 2009 C.E\nInput: 5 Muharram 1300\nOutput: Thursday 16 November 1882 C.E\nInput: 19 Rajab 1460\nOutput: Friday 20 August 2038 C.E",
        "ctx_t_pairs":"Context information:\nInput: a Hijri date\nOutput: return the corresponding Gregorian date\n\nExamples:\nInput: 11 Shawwal 1430\nOutput: Wednesday 30 September 2009 C.E\nInput: 5 Muharram 1300\nOutput: Thursday 16 November 1882 C.E\nInput: 19 Rajab 1460\nOutput: Friday 20 August 2038 C.E",
        "test_pairs":"Examples:\nInput: 6 Muharram 1300\nOutput: Friday 17 November 1882 C.E\nInput: 1 Muharram 1431\nOutput: Friday 18 December 2009 C.E"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_30",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert inches to centimeters.",
        "instruction":"unit_convert(): Convert inches to centimeters.",
        "ctx":"Context information:\nInput: inches\nOutput: centimeters",
        "train_pairs":"Examples:\nInput: 1 inch\nOutput: 2.54 cm\nInput: 23 inch\nOutput: 58.42 cm\nInput: 921 inch\nOutput: 2339.34 cm",
        "ctx_t_pairs":"Context information:\nInput: inches\nOutput: centimeters\n\nExamples:\nInput: 1 inch\nOutput: 2.54 cm\nInput: 23 inch\nOutput: 58.42 cm\nInput: 921 inch\nOutput: 2339.34 cm",
        "test_pairs":"Examples:\nInput: 13 inch\nOutput: 33.02 cm\nInput: 22 inch\nOutput: 55.88 cm"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_33",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert decimal to octal",
        "instruction":"domain_calculate(): Convert a given decimal number to its octal representation.",
        "ctx":"Context information:\nInput: decimal number\nOutput: octal representation",
        "train_pairs":"Examples:\nInput: 2358\nOutput: 4466\nInput: 198645\nOutput: 603765\nInput: 33\nOutput: 41",
        "ctx_t_pairs":"Context information:\nInput: decimal number\nOutput: octal representation\n\nExamples:\nInput: 2358\nOutput: 4466\nInput: 198645\nOutput: 603765\nInput: 33\nOutput: 41",
        "test_pairs":"Examples:\nInput: 232\nOutput: 350\nInput: 1234\nOutput: 2322"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_32",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert excel date to datetime",
        "instruction":"domain_calculate(): Convert a given Excel date to the corresponding datetime format.",
        "ctx":"Context information:\nInput: Excel date\nOutput: datetime in format MM\/dd\/yyyy",
        "train_pairs":"Examples:\nInput: 39938\nOutput: 05\/05\/2009\nInput: 39934\nOutput: 05\/01\/2009\nInput: 39958\nOutput: 05\/25\/2009",
        "ctx_t_pairs":"Context information:\nInput: Excel date\nOutput: datetime in format MM\/dd\/yyyy\n\nExamples:\nInput: 39938\nOutput: 05\/05\/2009\nInput: 39934\nOutput: 05\/01\/2009\nInput: 39958\nOutput: 05\/25\/2009",
        "test_pairs":"Examples:\nInput: 36557\nOutput: 02\/01\/2000\nInput: 39270\nOutput: 07\/07\/2007"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_31",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert kilobytes to megabytes.",
        "instruction":"unit_convert(): Convert kilobytes to megabytes.",
        "ctx":"Context information:\nInput: kb\nOutput: mb",
        "train_pairs":"Examples:\nInput: 3 kb\nOutput: 0.003 mb\nInput: 59 kb\nOutput: 0.059 mb\nInput: 140 kb\nOutput: 0.14 mb",
        "ctx_t_pairs":"Context information:\nInput: kb\nOutput: mb\n\nExamples:\nInput: 3 kb\nOutput: 0.003 mb\nInput: 59 kb\nOutput: 0.059 mb\nInput: 140 kb\nOutput: 0.14 mb",
        "test_pairs":"Examples:\nInput: 2 kb\nOutput: 0.002 mb\nInput: 123 kb\nOutput: 0.123 mb"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_24",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert hex to rgb",
        "instruction":"domain_map(): convert a hexadecimal color code to its RGB representation.",
        "ctx":"Context information:\nInput: hexadecimal color code\nOutput: RGB representation",
        "train_pairs":"Examples:\nInput: #000000\nOutput: 0,0,0\nInput: #00FF00\nOutput: 0,255,0\nInput: #FF00FF\nOutput: 255,0,255",
        "ctx_t_pairs":"Context information:\nInput: hexadecimal color code\nOutput: RGB representation\n\nExamples:\nInput: #000000\nOutput: 0,0,0\nInput: #00FF00\nOutput: 0,255,0\nInput: #FF00FF\nOutput: 255,0,255",
        "test_pairs":"Examples:\nInput: #FFFF3F\nOutput: 255,255,63\nInput: #223344\nOutput: 34,51,68"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_27",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert feet to inches.",
        "instruction":"unit_convert(): Convert feet to inches.",
        "ctx":"Context information:\nInput: feet\nOutput: inches",
        "train_pairs":"Examples:\nInput: 2 feet\nOutput: 24 inches\nInput: 30 feet\nOutput: 360 inches\nInput: 53 feet\nOutput: 636 inches",
        "ctx_t_pairs":"Context information:\nInput: feet\nOutput: inches\n\nExamples:\nInput: 2 feet\nOutput: 24 inches\nInput: 30 feet\nOutput: 360 inches\nInput: 53 feet\nOutput: 636 inches",
        "test_pairs":"Examples:\nInput: 44 feet\nOutput: 528 inches\nInput: 23 feet\nOutput: 276 inches"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_49",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert polar to rectangular",
        "instruction":"domain_calculate(): Convert polar coordinates to rectangular coordinates.",
        "ctx":"Context information:\nInput: polar coordinates (r, θ)\nOutput: rectangular coordinates (x, y)",
        "train_pairs":"Examples:\nInput: (2, 4)\nOutput: (1.99513, 0.13951)\nInput: (4, 60)\nOutput: (2.00000, 3.46410)\nInput: (10, 30)\nOutput: (8.66025, 5.00000)",
        "ctx_t_pairs":"Context information:\nInput: polar coordinates (r, θ)\nOutput: rectangular coordinates (x, y)\n\nExamples:\nInput: (2, 4)\nOutput: (1.99513, 0.13951)\nInput: (4, 60)\nOutput: (2.00000, 3.46410)\nInput: (10, 30)\nOutput: (8.66025, 5.00000)",
        "test_pairs":"Examples:\nInput: (23, 35)\nOutput: (18.84050, 13.19226)\nInput: (11, 22)\nOutput: (10.19902, 4.12067)"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_28",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert decimal minutes to time",
        "instruction":"domain_calculate(): Convert a given number of decimal minutes to a time format (HH:MM:SS).",
        "ctx":"Context information:\nInput: a number of decimal minutes\nOutput: a time in HH:MM:SS format",
        "train_pairs":"Examples:\nInput: 1439\nOutput: 23:59:00\nInput: 60\nOutput: 01:00:00\nInput: 95\nOutput: 01:35:00",
        "ctx_t_pairs":"Context information:\nInput: a number of decimal minutes\nOutput: a time in HH:MM:SS format\n\nExamples:\nInput: 1439\nOutput: 23:59:00\nInput: 60\nOutput: 01:00:00\nInput: 95\nOutput: 01:35:00",
        "test_pairs":"Examples:\nInput: 64\nOutput: 01:04:00\nInput: 91\nOutput: 01:31:00"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_11",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert kilometers to miles.",
        "instruction":"unit_convert(): Convert kilometers to miles.",
        "ctx":"Context information:\nInput: kilometers\nOutput: miles",
        "train_pairs":"Examples:\nInput: 5 km\nOutput: 3.10685596 mile\nInput: 18 km\nOutput: 11.1846815 mile\nInput: 1349 km\nOutput: 838.229738 mile",
        "ctx_t_pairs":"Context information:\nInput: kilometers\nOutput: miles\n\nExamples:\nInput: 5 km\nOutput: 3.10685596 mile\nInput: 18 km\nOutput: 11.1846815 mile\nInput: 1349 km\nOutput: 838.229738 mile",
        "test_pairs":"Examples:\nInput: 3 km\nOutput: 1.86411358 mile\nInput: 33 km\nOutput: 20.5052493 mile"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_12",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert slope to degrees",
        "instruction":"domain_calculate(): convert slope percentages to degrees.",
        "ctx":"Context information:\nInput: slope percentage\nOutput: angle in degrees",
        "train_pairs":"Examples:\nInput: 4%\nOutput: 2.29 Degrees\nInput: 30%\nOutput: 16.70 Degrees\nInput: 45%\nOutput: 24.23 Degrees",
        "ctx_t_pairs":"Context information:\nInput: slope percentage\nOutput: angle in degrees\n\nExamples:\nInput: 4%\nOutput: 2.29 Degrees\nInput: 30%\nOutput: 16.70 Degrees\nInput: 45%\nOutput: 24.23 Degrees",
        "test_pairs":"Examples:\nInput: 24%\nOutput: 13.50 Degrees\nInput: 12%\nOutput: 6.84 Degrees"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_46",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert square feet to square yards.",
        "instruction":"unit_convert(): Convert square feet to square yards.",
        "ctx":"Context information:\nInput: square feet\nOutput: square yards",
        "train_pairs":"Examples:\nInput: 9 square feet\nOutput: 1 square yards\nInput: 390 square feet\nOutput: 43.3333333 square yards\nInput: 2456 square feet\nOutput: 272.888889 square yards",
        "ctx_t_pairs":"Context information:\nInput: square feet\nOutput: square yards\n\nExamples:\nInput: 9 square feet\nOutput: 1 square yards\nInput: 390 square feet\nOutput: 43.3333333 square yards\nInput: 2456 square feet\nOutput: 272.888889 square yards",
        "test_pairs":"Examples:\nInput: 123 square feet\nOutput: 13.6666667 square yards\nInput: 872 square feet\nOutput: 96.8888889 square yards"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_45",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert minutes to hundredths",
        "instruction":"domain_calculate(): Convert minutes to hundredths of an hour.",
        "ctx":"Context information:\nInput: time in minutes\nOutput: time in hundredths of an hour",
        "train_pairs":"Examples:\nInput: 13 minutes\nOutput: .22\nInput: 43 minutes\nOutput: .72\nInput: 58 minutes\nOutput: .97",
        "ctx_t_pairs":"Context information:\nInput: time in minutes\nOutput: time in hundredths of an hour\n\nExamples:\nInput: 13 minutes\nOutput: .22\nInput: 43 minutes\nOutput: .72\nInput: 58 minutes\nOutput: .97",
        "test_pairs":"Examples:\nInput: 15 minutes\nOutput: .25\nInput: 44 minutes\nOutput: .73"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert time to decimal",
        "instruction":"format(): convert time to decimal format.",
        "ctx":"Context information:\nInput: time in HH:MM:SS format\nOutput: 4-decimal hours",
        "train_pairs":"Examples:\nInput: 02:45:45\nOutput: 2.7625 hours\nInput: 1:30:25\nOutput: 1.5069 hours\nInput: 12:10:02\nOutput: 12.1672 hours",
        "ctx_t_pairs":"Context information:\nInput: time in HH:MM:SS format\nOutput: 4-decimal hours\n\nExamples:\nInput: 02:45:45\nOutput: 2.7625 hours\nInput: 1:30:25\nOutput: 1.5069 hours\nInput: 12:10:02\nOutput: 12.1672 hours",
        "test_pairs":"Examples:\nInput: 03:22:45\nOutput: 3.3792 hours\nInput: 22:22:22\nOutput: 22.3728 hours"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_19",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert timespan to string",
        "instruction":"format(): convert a timespan in HH:MM:SS format to a human-readable string format.",
        "ctx":"Context information:\nInput: timespan in HH:MM:SS format\nOutput: human-readable string format",
        "train_pairs":"Examples:\nInput: 00:06:32.4458750\nOutput: 0 hrs, 6 mins, 32 secs\nInput: 11:12:13.7458750\nOutput: 11 hrs, 12 mins, 14 secs\nInput: 23:01:09.0988712\nOutput: 23 hrs, 1 mins, 9 secs",
        "ctx_t_pairs":"Context information:\nInput: timespan in HH:MM:SS format\nOutput: human-readable string format\n\nExamples:\nInput: 00:06:32.4458750\nOutput: 0 hrs, 6 mins, 32 secs\nInput: 11:12:13.7458750\nOutput: 11 hrs, 12 mins, 14 secs\nInput: 23:01:09.0988712\nOutput: 23 hrs, 1 mins, 9 secs",
        "test_pairs":"Examples:\nInput: 12:21:09.2988712\nOutput: 12 hrs, 21 mins, 9 secs\nInput: 23:31:21.4322211\nOutput: 23 hrs, 31 mins, 21 secs"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_5",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert cm to inches.",
        "instruction":"unit_convert(): Convert centimeters to inches.",
        "ctx":"Context information:\nInput: cm\nOutput: inches",
        "train_pairs":"Examples:\nInput: 1 cm\nOutput: 0.39370079 inch\nInput: 5 cm\nOutput: 1.96850394 inch\nInput: 6 cm\nOutput: 2.36220472 inch",
        "ctx_t_pairs":"Context information:\nInput: cm\nOutput: inches\n\nExamples:\nInput: 1 cm\nOutput: 0.39370079 inch\nInput: 5 cm\nOutput: 1.96850394 inch\nInput: 6 cm\nOutput: 2.36220472 inch",
        "test_pairs":"Examples:\nInput: 2 cm\nOutput: 0.78740157 inch\nInput: 3 cm\nOutput: 1.18110236 inch"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_20",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert grams to ounces.",
        "instruction":"unit_convert(): Convert grams to ounces.",
        "ctx":"Context information:\nInput: grams\nOutput: ounces",
        "train_pairs":"Examples:\nInput: 1 g\nOutput: 0.03527396 oz\nInput: 30 g\nOutput: 1.05821886 oz\nInput: 1500 g\nOutput: 52.910943 oz",
        "ctx_t_pairs":"Context information:\nInput: grams\nOutput: ounces\n\nExamples:\nInput: 1 g\nOutput: 0.03527396 oz\nInput: 30 g\nOutput: 1.05821886 oz\nInput: 1500 g\nOutput: 52.910943 oz",
        "test_pairs":"Examples:\nInput: 3 g\nOutput: 0.10582189 oz\nInput: 23 g\nOutput: 0.81130113 oz"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_23",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert address to gps coordinates",
        "instruction":"transform(): convert a physical address to GPS coordinates (latitude and longitude).",
        "ctx":"Context information:\nInput: address\nOutput: GPS coordinates (latitude, longitude)",
        "train_pairs":"Examples:\nInput: 400 Bellevue Way Northeast, Bellevue, WA, USA\nOutput: 47.615570, -122.202522\nInput: 3002 Mt Angeles Rd, Port Angeles, WA, USA\nOutput: 48.099339, -123.425532\nInput: 2329 West Mall, Vancouver, BC V6T 1Z4, Canada\nOutput: 49.261375, -123.253672",
        "ctx_t_pairs":"Context information:\nInput: address\nOutput: GPS coordinates (latitude, longitude)\n\nExamples:\nInput: 400 Bellevue Way Northeast, Bellevue, WA, USA\nOutput: 47.615570, -122.202522\nInput: 3002 Mt Angeles Rd, Port Angeles, WA, USA\nOutput: 48.099339, -123.425532\nInput: 2329 West Mall, Vancouver, BC V6T 1Z4, Canada\nOutput: 49.261375, -123.253672",
        "test_pairs":"Examples:\nInput: 1 microsoft way, redmond, wa, 98052\nOutput: 47.639583, -122.128381\nInput: 14820 36th st ne redmond, wa, 98052\nOutput: 47.642095, -122.142068"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_35",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert yyyymmdd to datetime",
        "instruction":"format(): Convert a date in yyyymmdd format to a human-readable datetime format.",
        "ctx":"Context information:\nInput: date in yyyymmdd format\nOutput: datetime in format 'MMM dd, yyyy'",
        "train_pairs":"Examples:\nInput: 19851231\nOutput: Dec 31, 1985\nInput: 19811120\nOutput: Nov 20, 1981\nInput: 20110301\nOutput: Mar 01, 2011",
        "ctx_t_pairs":"Context information:\nInput: date in yyyymmdd format\nOutput: datetime in format 'MMM dd, yyyy'\n\nExamples:\nInput: 19851231\nOutput: Dec 31, 1985\nInput: 19811120\nOutput: Nov 20, 1981\nInput: 20110301\nOutput: Mar 01, 2011",
        "test_pairs":"Examples:\nInput: 19841121\nOutput: Nov 21, 1984\nInput: 20210311\nOutput: Mar 11, 2021"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_42",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to hexadecimal",
        "instruction":"domain_calculate(): Convert decimal numbers to hexadecimal representation.",
        "ctx":"Context information:\nInput: decimal number\nOutput: hexadecimal number",
        "train_pairs":"Examples:\nInput: 214633\nOutput: 34669\nInput: 1246367\nOutput: 13049F\nInput: 9872031\nOutput: 96A29F",
        "ctx_t_pairs":"Context information:\nInput: decimal number\nOutput: hexadecimal number\n\nExamples:\nInput: 214633\nOutput: 34669\nInput: 1246367\nOutput: 13049F\nInput: 9872031\nOutput: 96A29F",
        "test_pairs":"Examples:\nInput: 323\nOutput: 143\nInput: 123234\nOutput: 1E162"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_6",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert rgb to hex",
        "instruction":"domain_map(): convert RGB values to their hexadecimal equivalents.",
        "ctx":"Context information:\nInput: RGB values in the form of r,g,b\nOutput: hexadecimal representation",
        "train_pairs":"Examples:\nInput: 255,255,255\nOutput: #FFFFFF\nInput: 238,130,238\nOutput: #EE82EE\nInput: 147,112,219\nOutput: #9370DB",
        "ctx_t_pairs":"Context information:\nInput: RGB values in the form of r,g,b\nOutput: hexadecimal representation\n\nExamples:\nInput: 255,255,255\nOutput: #FFFFFF\nInput: 238,130,238\nOutput: #EE82EE\nInput: 147,112,219\nOutput: #9370DB",
        "test_pairs":"Examples:\nInput: 219,112,147\nOutput: #DB7093\nInput: 34,139,34\nOutput: #228B22"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_41",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert pounds to grams.",
        "instruction":"unit_convert(): Convert pounds to grams.",
        "ctx":"Context information:\nInput: pounds\nOutput: grams",
        "train_pairs":"Examples:\nInput: 1 lb\nOutput: 453.59237 g\nInput: 502 lb\nOutput: 227703.37 g\nInput: 76 lb\nOutput: 34473.0201 g",
        "ctx_t_pairs":"Context information:\nInput: pounds\nOutput: grams\n\nExamples:\nInput: 1 lb\nOutput: 453.59237 g\nInput: 502 lb\nOutput: 227703.37 g\nInput: 76 lb\nOutput: 34473.0201 g",
        "test_pairs":"Examples:\nInput: 234 lb\nOutput: 106140.614 g\nInput: 122 lb\nOutput: 55338.2691 g"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_15",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert rgb to cmyk",
        "instruction":"domain_map(): convert RGB color values to CMYK color values.",
        "ctx":"Context information:\nInput: RGB values (R,G,B)\nOutput: CMYK values (C,M,Y,K)",
        "train_pairs":"Examples:\nInput: 3,4,5\nOutput: 0.4,0.2,0,0.98\nInput: 0,0,0\nOutput: 0,0,0,1\nInput: 33,44,55\nOutput: 0.4,0.2,0,0.784",
        "ctx_t_pairs":"Context information:\nInput: RGB values (R,G,B)\nOutput: CMYK values (C,M,Y,K)\n\nExamples:\nInput: 3,4,5\nOutput: 0.4,0.2,0,0.98\nInput: 0,0,0\nOutput: 0,0,0,1\nInput: 33,44,55\nOutput: 0.4,0.2,0,0.784",
        "test_pairs":"Examples:\nInput: 255,0,255\nOutput: 0,1,0,0\nInput: 0,255,0\nOutput: 1,0,1,0"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_16",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert grams to pounds.",
        "instruction":"unit_convert(): Convert grams to pounds.",
        "ctx":"Context information:\nInput: grams\nOutput: pounds",
        "train_pairs":"Examples:\nInput: 6 g\nOutput: 0.01322774 b\nInput: 89 g\nOutput: 0.19621141 b\nInput: 100 g\nOutput: 0.22046226 b",
        "ctx_t_pairs":"Context information:\nInput: grams\nOutput: pounds\n\nExamples:\nInput: 6 g\nOutput: 0.01322774 b\nInput: 89 g\nOutput: 0.19621141 b\nInput: 100 g\nOutput: 0.22046226 b",
        "test_pairs":"Examples:\nInput: 66 g\nOutput: 0.14550509 b\nInput: 23 g\nOutput: 0.05070632 b"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_9",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert miles to kilometers.",
        "instruction":"unit_convert(): Convert miles to kilometers.",
        "ctx":"Context information:\nInput: miles\nOutput: kilometers",
        "train_pairs":"Examples:\nInput: 15 mile\nOutput: 24.1402 km\nInput: 19 mile\nOutput: 30.5775 km\nInput: 240 mile\nOutput: 386.243 km",
        "ctx_t_pairs":"Context information:\nInput: miles\nOutput: kilometers\n\nExamples:\nInput: 15 mile\nOutput: 24.1402 km\nInput: 19 mile\nOutput: 30.5775 km\nInput: 240 mile\nOutput: 386.243 km",
        "test_pairs":"Examples:\nInput: 33 mile\nOutput: 53.1084 km\nInput: 11 mile\nOutput: 17.7028 km"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_39",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert mixed number to decimal",
        "instruction":"domain_calculate(): Convert a mixed number to its decimal representation.",
        "ctx":"Context information:\nInput: mixed number, space separated\nOutput: decimal representation",
        "train_pairs":"Examples:\nInput: 2 1\/2\nOutput: 2.5\nInput: 51 3\/4\nOutput: 51.75\nInput: 112\nOutput: 112",
        "ctx_t_pairs":"Context information:\nInput: mixed number, space separated\nOutput: decimal representation\n\nExamples:\nInput: 2 1\/2\nOutput: 2.5\nInput: 51 3\/4\nOutput: 51.75\nInput: 112\nOutput: 112",
        "test_pairs":"Examples:\nInput: 7 2\/5\nOutput: 7.4\nInput: 3 1\/4\nOutput: 3.25\nInput: 1 1\/8\nOutput: 1.125"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_38",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert mgrs to lat long",
        "instruction":"domain_calculate(): Convert a Military Grid Reference System (MGRS) coordinate to its latitude and longitude representation.",
        "ctx":"Context information:\nInput: MGRS coordinate\nOutput: latitude and longitude",
        "train_pairs":"Examples:\nInput: 12U UA 84323 40791\nOutput: 50.00820, -112.61440\nInput: 15S WC 80817 51205\nOutput: 38.40543, -92.07440\nInput: 19T DJ 38588 97366\nOutput: 44.22694, -69.76892",
        "ctx_t_pairs":"Context information:\nInput: MGRS coordinate\nOutput: latitude and longitude\n\nExamples:\nInput: 12U UA 84323 40791\nOutput: 50.00820, -112.61440\nInput: 15S WC 80817 51205\nOutput: 38.40543, -92.07440\nInput: 19T DJ 38588 97366\nOutput: 44.22694, -69.76892",
        "test_pairs":"Examples:\nInput: 12U UA 87466 40791\nOutput: 50.00880, -112.57055\nInput: 15S WC 40817 12345\nOutput: 38.05793, -92.53473"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_8",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert inches to mm.",
        "instruction":"unit_convert(): Convert inches to millimeters.",
        "ctx":"Context information:\nInput: inches\nOutput: mm",
        "train_pairs":"Examples:\nInput: 3 inch\nOutput: 76.2 mm\nInput: 17 inch\nOutput: 431.8 mm\nInput: 100 inch\nOutput: 2540 mm",
        "ctx_t_pairs":"Context information:\nInput: inches\nOutput: mm\n\nExamples:\nInput: 3 inch\nOutput: 76.2 mm\nInput: 17 inch\nOutput: 431.8 mm\nInput: 100 inch\nOutput: 2540 mm",
        "test_pairs":"Examples:\nInput: 13 inch\nOutput: 330.2 mm\nInput: 33 inch\nOutput: 838.2 mm"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_17",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert liters to gallons.",
        "instruction":"unit_convert(): Convert liters to gallons.",
        "ctx":"Context information:\nInput: liters\nOutput: gallons",
        "train_pairs":"Examples:\nInput: 7 L\nOutput: 1.8492 gal\nInput: 15 L\nOutput: 3.96258 gal\nInput: 98 L\nOutput: 25.8889 gal",
        "ctx_t_pairs":"Context information:\nInput: liters\nOutput: gallons\n\nExamples:\nInput: 7 L\nOutput: 1.8492 gal\nInput: 15 L\nOutput: 3.96258 gal\nInput: 98 L\nOutput: 25.8889 gal",
        "test_pairs":"Examples:\nInput: 33 L\nOutput: 8.71768 gal\nInput: 17 L\nOutput: 4.49092 gal"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_14",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert lat long to utm",
        "instruction":"domain_calculate(): convert latitude and longitude coordinates to UTM (Universal Transverse Mercator) coordinates.",
        "ctx":"Context information:\nInput: latitude and longitude\nOutput: UTM coordinates (easting and northing)",
        "train_pairs":"Examples:\nInput: 32.44, 44.11\nOutput: 583662mE, 3589556mN\nInput: 36.11, 80.22\nOutput: 429797mE, 3996430mN\nInput: 10.82, 20.21\nOutput: 413642mE, 1196188mN",
        "ctx_t_pairs":"Context information:\nInput: latitude and longitude\nOutput: UTM coordinates (easting and northing)\n\nExamples:\nInput: 32.44, 44.11\nOutput: 583662mE, 3589556mN\nInput: 36.11, 80.22\nOutput: 429797mE, 3996430mN\nInput: 10.82, 20.21\nOutput: 413642mE, 1196188mN",
        "test_pairs":"Examples:\nInput: 23.11, 39.33\nOutput: 533791mE, 2555735mN\nInput: 10.22, -39.33\nOutput: 463857mE, 1129755mN"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_40",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert meters to miles.",
        "instruction":"unit_convert(): Convert meters to miles.",
        "ctx":"Context information:\nInput: meters\nOutput: miles",
        "train_pairs":"Examples:\nInput: 5 meter\nOutput: 0.00310686 mile\nInput: 180 meter\nOutput: 0.111847 mile\nInput: 92 meter\nOutput: 0.0571661 mile",
        "ctx_t_pairs":"Context information:\nInput: meters\nOutput: miles\n\nExamples:\nInput: 5 meter\nOutput: 0.00310686 mile\nInput: 180 meter\nOutput: 0.111847 mile\nInput: 92 meter\nOutput: 0.0571661 mile",
        "test_pairs":"Examples:\nInput: 23 meter\nOutput: 0.0142915 mile\nInput: 11 meter\nOutput: 0.00683508 mile"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_43",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert grams to ounces and pounds",
        "instruction":"unit_convert(): Convert grams to pounds and ounces.",
        "ctx":"Context information:\nInput: weight in grams\nOutput: weight in pounds and ounces",
        "train_pairs":"Examples:\nInput: 32g\nOutput: 0lb 1.128767oz\nInput: 1000g\nOutput: 2lb 3.273965oz\nInput: 3400g\nOutput: 7lb 7.931480oz",
        "ctx_t_pairs":"Context information:\nInput: weight in grams\nOutput: weight in pounds and ounces\n\nExamples:\nInput: 32g\nOutput: 0lb 1.128767oz\nInput: 1000g\nOutput: 2lb 3.273965oz\nInput: 3400g\nOutput: 7lb 7.931480oz",
        "test_pairs":"Examples:\nInput: 222g\nOutput: 0lb 7.830820oz\nInput: 123g\nOutput: 0lb 4.338698oz"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_7",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert decimal to hex",
        "instruction":"domain_map(): convert decimal numbers to their hexadecimal equivalents.",
        "ctx":"Context information:\nInput: decimal number\nOutput: hexadecimal representation",
        "train_pairs":"Examples:\nInput: 22\nOutput: 16\nInput: 2156\nOutput: 86C\nInput: 9876\nOutput: 2694",
        "ctx_t_pairs":"Context information:\nInput: decimal number\nOutput: hexadecimal representation\n\nExamples:\nInput: 22\nOutput: 16\nInput: 2156\nOutput: 86C\nInput: 9876\nOutput: 2694",
        "test_pairs":"Examples:\nInput: 323\nOutput: 143\nInput: 123234\nOutput: 1E162"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_34",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert rgb to pantone",
        "instruction":"domain_map(): Convert RGB color values to their corresponding Pantone color codes.",
        "ctx":"Context information:\nInput: RGB color values in format R,G,B\nOutput: Pantone color code",
        "train_pairs":"Examples:\nInput: 244,237,124\nOutput: 100\nInput: 244,237,71\nOutput: 101\nInput: 249,232,20\nOutput: 102",
        "ctx_t_pairs":"Context information:\nInput: RGB color values in format R,G,B\nOutput: Pantone color code\n\nExamples:\nInput: 244,237,124\nOutput: 100\nInput: 244,237,71\nOutput: 101\nInput: 249,232,20\nOutput: 102",
        "test_pairs":"Examples:\nInput: 249,214,22\nOutput: 109\nInput: 198,160,12\nOutput: 117"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_37",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert megabytes to gigabytes.",
        "instruction":"unit_convert(): Convert megabytes to gigabytes.",
        "ctx":"Context information:\nInput: mb\nOutput: gb",
        "train_pairs":"Examples:\nInput: 1 mb\nOutput: 0.001 gb\nInput: 790 mb\nOutput: 0.790 gb\nInput: 49 mb\nOutput: 0.049 gb",
        "ctx_t_pairs":"Context information:\nInput: mb\nOutput: gb\n\nExamples:\nInput: 1 mb\nOutput: 0.001 gb\nInput: 790 mb\nOutput: 0.790 gb\nInput: 49 mb\nOutput: 0.049 gb",
        "test_pairs":"Examples:\nInput: 744 mb\nOutput: 0.744 gb\nInput: 42 mb\nOutput: 0.042 gb"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_22",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert pacific time to eastern time",
        "instruction":"domain_calculate(): convert time from Pacific Time (PT) to Eastern Time (ET).",
        "ctx":"Context information:\nInput: time in Pacific Time\nOutput: time in Eastern Time",
        "train_pairs":"Examples:\nInput: 2:30 AM,Mon,Aug 17,2015\nOutput: 5:30 AM,Mon,Aug,2015\nInput: 11:00 PM,Sun,Aug 2,2015\nOutput: 2:00 AM,Mon,Aug 3,2015\nInput: 3:30 AM,Mon,Feb 2,2015\nOutput: 6:30 AM,Mon,Feb 2,2015",
        "ctx_t_pairs":"Context information:\nInput: time in Pacific Time\nOutput: time in Eastern Time\n\nExamples:\nInput: 2:30 AM,Mon,Aug 17,2015\nOutput: 5:30 AM,Mon,Aug,2015\nInput: 11:00 PM,Sun,Aug 2,2015\nOutput: 2:00 AM,Mon,Aug 3,2015\nInput: 3:30 AM,Mon,Feb 2,2015\nOutput: 6:30 AM,Mon,Feb 2,2015",
        "test_pairs":"Examples:\nInput: 10:00 PM,Sun,Aug 2,2015\nOutput: 1:00 AM,Mon,Aug 3,2015\nInput: 2:30 AM,Mon,Feb 2,2015\nOutput: 5:30 AM,Mon,Feb 2,2015"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_4",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert kg to lbs.",
        "instruction":"unit_convert(): Convert kilograms to pounds.",
        "ctx":"Context information:\nInput: kg\nOutput: lbs",
        "train_pairs":"Examples:\nInput: 3 kg\nOutput: 6.61387 b\nInput: 7 kg\nOutput: 15.4324 b\nInput: 11 kg\nOutput: 24.2508 b",
        "ctx_t_pairs":"Context information:\nInput: kg\nOutput: lbs\n\nExamples:\nInput: 3 kg\nOutput: 6.61387 b\nInput: 7 kg\nOutput: 15.4324 b\nInput: 11 kg\nOutput: 24.2508 b",
        "test_pairs":"Examples:\nInput: 23 kg\nOutput: 50.7063 b\nInput: 1 kg\nOutput: 2.20462 b"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_18",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert base two to base ten",
        "instruction":"domain_calculate(): convert binary numbers to their decimal equivalents.",
        "ctx":"Context information:\nInput: a binary number\nOutput: decimal representation",
        "train_pairs":"Examples:\nInput: 11111\nOutput: 31\nInput: 10101001\nOutput: 169\nInput: 100001101\nOutput: 269",
        "ctx_t_pairs":"Context information:\nInput: a binary number\nOutput: decimal representation\n\nExamples:\nInput: 11111\nOutput: 31\nInput: 10101001\nOutput: 169\nInput: 100001101\nOutput: 269",
        "test_pairs":"Examples:\nInput: 111\nOutput: 7\nInput: 101010\nOutput: 42"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_37",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert m\/s to mph",
        "instruction":"unit_convert(): Convert a speed from meters per second to miles per hour.",
        "ctx":"Context information:\nInput: speed in m\/s\nOutput: speed in mph",
        "train_pairs":"Examples:\nInput: 2\nOutput: 4.473873\nInput: 89\nOutput: 199.0873\nInput: 123\nOutput: 275.1432",
        "ctx_t_pairs":"Context information:\nInput: speed in m\/s\nOutput: speed in mph\n\nExamples:\nInput: 2\nOutput: 4.473873\nInput: 89\nOutput: 199.0873\nInput: 123\nOutput: 275.1432",
        "test_pairs":"Examples:\nInput: 12\nOutput: 26.84324\nInput: 33\nOutput: 73.81890"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_34",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert gallons to cups.",
        "instruction":"unit_convert(): Convert gallons to cups.",
        "ctx":"Context information:\nInput: gallons\nOutput: cups",
        "train_pairs":"Examples:\nInput: 1 gallons\nOutput: 16 cups\nInput: 3 gallons\nOutput: 48 cups\nInput: 11 gallons\nOutput: 176 cups",
        "ctx_t_pairs":"Context information:\nInput: gallons\nOutput: cups\n\nExamples:\nInput: 1 gallons\nOutput: 16 cups\nInput: 3 gallons\nOutput: 48 cups\nInput: 11 gallons\nOutput: 176 cups",
        "test_pairs":"Examples:\nInput: 15 gallons\nOutput: 240 cups"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_21",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert hex to binary",
        "instruction":"domain_calculate(): convert hexadecimal numbers to their binary equivalents.",
        "ctx":"Context information:\nInput: a hexadecimal number\nOutput: binary representation",
        "train_pairs":"Examples:\nInput: 123A\nOutput: 0001 0010 0011 1010\nInput: 469E\nOutput: 0100 0110 1001 1110\nInput: AAE352\nOutput: 1010 1010 1110 0011 0101 0010",
        "ctx_t_pairs":"Context information:\nInput: a hexadecimal number\nOutput: binary representation\n\nExamples:\nInput: 123A\nOutput: 0001 0010 0011 1010\nInput: 469E\nOutput: 0100 0110 1001 1110\nInput: AAE352\nOutput: 1010 1010 1110 0011 0101 0010",
        "test_pairs":"Examples:\nInput: 123\nOutput: 0001 0010 0011\nInput: 3333\nOutput: 0011 0011 0011 0011"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_22",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert milliliters to ounces.",
        "instruction":"unit_convert(): Convert milliliters to ounces.",
        "ctx":"Context information:\nInput: ml\nOutput: oz",
        "train_pairs":"Examples:\nInput: 10 ml\nOutput: 0.33814023 oz\nInput: 39 ml\nOutput: 1.31874689 oz\nInput: 200 ml\nOutput: 6.76280455 oz",
        "ctx_t_pairs":"Context information:\nInput: ml\nOutput: oz\n\nExamples:\nInput: 10 ml\nOutput: 0.33814023 oz\nInput: 39 ml\nOutput: 1.31874689 oz\nInput: 200 ml\nOutput: 6.76280455 oz",
        "test_pairs":"Examples:\nInput: 3 ml\nOutput: 0.10144207 oz\nInput: 30 ml\nOutput: 1.01442068 oz"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_7",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert dollars to euros.",
        "instruction":"unit_convert(): Convert US dollars to euros.",
        "ctx":"Context information:\nInput: US Dollar\nOutput: euros",
        "train_pairs":"Examples:\nInput: 3 US Dollar\nOutput: 2.72 euros\nInput: 21 US Dollar\nOutput: 19.02 euros\nInput: 111 US Dollar\nOutput: 100.56 euros",
        "ctx_t_pairs":"Context information:\nInput: US Dollar\nOutput: euros\n\nExamples:\nInput: 3 US Dollar\nOutput: 2.72 euros\nInput: 21 US Dollar\nOutput: 19.02 euros\nInput: 111 US Dollar\nOutput: 100.56 euros",
        "test_pairs":"Examples:\nInput: 33 US Dollar\nOutput: 29.90 euros\nInput: 12 US Dollar\nOutput: 10.87 euros"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_8",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert utm to lat long",
        "instruction":"domain_calculate(): convert UTM coordinates to their corresponding latitude and longitude.",
        "ctx":"Context information:\nInput: UTM coordinates in the form of easting and northing\nOutput: latitude and longitude in degrees",
        "train_pairs":"Examples:\nInput: 583662mE, 3589556mN\nOutput: 32.44N, 44.11E\nInput: 429797mE, 3996430mN\nOutput: 36.11N, 80.22E\nInput: 413642mE, 1196188mN\nOutput: 10.82N, 20.21E",
        "ctx_t_pairs":"Context information:\nInput: UTM coordinates in the form of easting and northing\nOutput: latitude and longitude in degrees\n\nExamples:\nInput: 583662mE, 3589556mN\nOutput: 32.44N, 44.11E\nInput: 429797mE, 3996430mN\nOutput: 36.11N, 80.22E\nInput: 413642mE, 1196188mN\nOutput: 10.82N, 20.21E",
        "test_pairs":"Examples:\nInput: 533791mE, 2555735mN\nOutput: 23.11N, 39.33E\nInput: 715740mE, 2581625mN\nOutput: 23.33N, 23.11E"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_38",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert Celsius to Kelvin.",
        "instruction":"unit_convert(): Convert Celsius to Kelvin.",
        "ctx":"Context information:\nInput: Celsius\nOutput: Kelvin",
        "train_pairs":"Examples:\nInput: 1 Celsius\nOutput: 274.15 Kelvin\nInput: 12 Celsius\nOutput: 285.15 Kelvin\nInput: 12.3 Celsius\nOutput: 285.45 Kelvin",
        "ctx_t_pairs":"Context information:\nInput: Celsius\nOutput: Kelvin\n\nExamples:\nInput: 1 Celsius\nOutput: 274.15 Kelvin\nInput: 12 Celsius\nOutput: 285.15 Kelvin\nInput: 12.3 Celsius\nOutput: 285.45 Kelvin",
        "test_pairs":"Examples:\nInput: 188 Celsius\nOutput: 461.15 Kelvin\nInput: 24 Celsius\nOutput: 297.15 Kelvin"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_17",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert cmyk to rgb",
        "instruction":"domain_map(): convert CMYK color values to RGB color values.",
        "ctx":"Context information:\nInput: CMYK values (C,M,Y,K)\nOutput: RGB values (R,G,B)",
        "train_pairs":"Examples:\nInput: 0,0,0,1\nOutput: 0,0,0\nInput: 0.16,0.67,0.61,0.73\nOutput: 58,23,27\nInput: 0,1,1,0\nOutput: 255,0,0",
        "ctx_t_pairs":"Context information:\nInput: CMYK values (C,M,Y,K)\nOutput: RGB values (R,G,B)\n\nExamples:\nInput: 0,0,0,1\nOutput: 0,0,0\nInput: 0.16,0.67,0.61,0.73\nOutput: 58,23,27\nInput: 0,1,1,0\nOutput: 255,0,0",
        "test_pairs":"Examples:\nInput: 0,1,0,0\nOutput: 255,0,255\nInput: 0.53,0.42,0.38,0.55\nOutput: 54,67,71"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_43",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert meters to inches.",
        "instruction":"unit_convert(): Convert meters to inches.",
        "ctx":"Context information:\nInput: meters\nOutput: inches",
        "train_pairs":"Examples:\nInput: 1 m\nOutput: 39.3700787 inch\nInput: 1856 m\nOutput: 73070.8661 inch\nInput: 200 m\nOutput: 7874.01575 inch",
        "ctx_t_pairs":"Context information:\nInput: meters\nOutput: inches\n\nExamples:\nInput: 1 m\nOutput: 39.3700787 inch\nInput: 1856 m\nOutput: 73070.8661 inch\nInput: 200 m\nOutput: 7874.01575 inch",
        "test_pairs":"Examples:\nInput: 188 m\nOutput: 7401.5748 inch\nInput: 33 m\nOutput: 1299.2126 inch"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_4",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert hex to ascii",
        "instruction":"domain_map(): convert hexadecimal values to their ASCII character equivalents.",
        "ctx":"Context information:\nInput: hexadecimal value\nOutput: ASCII character",
        "train_pairs":"Examples:\nInput: 34\nOutput: 4\nInput: 55\nOutput: U\nInput: 74\nOutput: t",
        "ctx_t_pairs":"Context information:\nInput: hexadecimal value\nOutput: ASCII character\n\nExamples:\nInput: 34\nOutput: 4\nInput: 55\nOutput: U\nInput: 74\nOutput: t",
        "test_pairs":"Examples:\nInput: 44\nOutput: D\nInput: 22\nOutput: \""
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_41",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert Geographic Coordinate to nad83",
        "instruction":"domain_calculate(): Convert geographic coordinates to NAD83 format.",
        "ctx":"Context information:\nInput: latitude, longitude\nOutput: NAD83 latitude, NAD83 longitude",
        "train_pairs":"Examples:\nInput: 38.889139, -77.04942\nOutput: 38.8892509, -77.0491194\nInput: 28.889139, -77.1234\nOutput: 28.8894274, -77.1230153\nInput: 42.889139, -75.1234\nOutput: 42.8892103, -75.1230043",
        "ctx_t_pairs":"Context information:\nInput: latitude, longitude\nOutput: NAD83 latitude, NAD83 longitude\n\nExamples:\nInput: 38.889139, -77.04942\nOutput: 38.8892509, -77.0491194\nInput: 28.889139, -77.1234\nOutput: 28.8894274, -77.1230153\nInput: 42.889139, -75.1234\nOutput: 42.8892103, -75.1230043",
        "test_pairs":"Examples:\nInput: 33.889139, -77.1234\nOutput: 33.8893138, -77.1230692\nInput: 36.889139, -76.1234\nOutput: 36.8892866, -76.1230571"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_5",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to decimal notation",
        "instruction":"format(): convert fractions to their decimal equivalents.",
        "ctx":"Context information:\nInput: fraction in the form of a\/b\nOutput: decimal representation",
        "train_pairs":"Examples:\nInput: 1\/4\nOutput: 0.25\nInput: 200\/4\nOutput: 50\nInput: 9\/100\nOutput: 0.09",
        "ctx_t_pairs":"Context information:\nInput: fraction in the form of a\/b\nOutput: decimal representation\n\nExamples:\nInput: 1\/4\nOutput: 0.25\nInput: 200\/4\nOutput: 50\nInput: 9\/100\nOutput: 0.09",
        "test_pairs":"Examples:\nInput: 3\/4\nOutput: 0.75\nInput: 1\/2\nOutput: 0.5"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_42",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert ounces to cups.",
        "instruction":"unit_convert(): Convert ounces to cups.",
        "ctx":"Context information:\nInput: oz\nOutput: cups",
        "train_pairs":"Examples:\nInput: 2 oz\nOutput: 0.25 cup\nInput: 1988 oz\nOutput: 248.5 cup\nInput: 37 oz\nOutput: 4.625 cup",
        "ctx_t_pairs":"Context information:\nInput: oz\nOutput: cups\n\nExamples:\nInput: 2 oz\nOutput: 0.25 cup\nInput: 1988 oz\nOutput: 248.5 cup\nInput: 37 oz\nOutput: 4.625 cup",
        "test_pairs":"Examples:\nInput: 33 oz\nOutput: 4.125 cup\nInput: 123 oz\nOutput: 15.375 cup"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_16",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert military time to standard time",
        "instruction":"format(): convert military time (24-hour format) to standard time (AM\/PM).",
        "ctx":"Context information:\nInput: military time in 24-hour format\nOutput: standard time in AM\/PM format",
        "train_pairs":"Examples:\nInput: 0100\nOutput: 1:00 AM\nInput: 1800\nOutput: 6:00 PM\nInput: 1400\nOutput: 2:00 PM",
        "ctx_t_pairs":"Context information:\nInput: military time in 24-hour format\nOutput: standard time in AM\/PM format\n\nExamples:\nInput: 0100\nOutput: 1:00 AM\nInput: 1800\nOutput: 6:00 PM\nInput: 1400\nOutput: 2:00 PM",
        "test_pairs":"Examples:\nInput: 1300\nOutput: 1:00 PM\nInput: 1600\nOutput: 4:00 PM\nInput: 0200\nOutput: 2:00 AM"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_15",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert meter to feet.",
        "instruction":"unit_convert(): Convert meters to feet.",
        "ctx":"Context information:\nInput: meters\nOutput: feet",
        "train_pairs":"Examples:\nInput: 8 m\nOutput: 26.2467 feet\nInput: 259 m\nOutput: 849.738 feet\nInput: 387 m\nOutput: 1269.69 feet",
        "ctx_t_pairs":"Context information:\nInput: meters\nOutput: feet\n\nExamples:\nInput: 8 m\nOutput: 26.2467 feet\nInput: 259 m\nOutput: 849.738 feet\nInput: 387 m\nOutput: 1269.69 feet",
        "test_pairs":"Examples:\nInput: 333 m\nOutput: 1092.52 feet\nInput: 888 m\nOutput: 2913.39 feet"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_39",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert ounces to pounds.",
        "instruction":"unit_convert(): Convert ounces to pounds.",
        "ctx":"Context information:\nInput: oz\nOutput: lb",
        "train_pairs":"Examples:\nInput: 3 oz\nOutput: 0.1875 lb\nInput: 862 oz\nOutput: 53.875 lb\nInput: 51 oz\nOutput: 3.1875 lb",
        "ctx_t_pairs":"Context information:\nInput: oz\nOutput: lb\n\nExamples:\nInput: 3 oz\nOutput: 0.1875 lb\nInput: 862 oz\nOutput: 53.875 lb\nInput: 51 oz\nOutput: 3.1875 lb",
        "test_pairs":"Examples:\nInput: 1 oz\nOutput: 0.0625 lb\nInput: 5 oz\nOutput: 0.3125 lb"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_9",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert cm to feet and inches",
        "instruction":"unit_convert(): convert centimeters to feet and inches.",
        "ctx":"Context information:\nInput: a length in centimeters\nOutput: length in feet and inches",
        "train_pairs":"Examples:\nInput: 3 cm\nOutput: 0 feet and 1.1811 inches\nInput: 870 cm\nOutput: 28 feet and 6.5197 inches\nInput: 69 cm\nOutput: 2 feet and 3.1654 inches",
        "ctx_t_pairs":"Context information:\nInput: a length in centimeters\nOutput: length in feet and inches\n\nExamples:\nInput: 3 cm\nOutput: 0 feet and 1.1811 inches\nInput: 870 cm\nOutput: 28 feet and 6.5197 inches\nInput: 69 cm\nOutput: 2 feet and 3.1654 inches",
        "test_pairs":"Examples:\nInput: 44 cm\nOutput: 1 feet and 5.3228 inches\nInput: 555 cm\nOutput: 18 feet and 2.5039 inches"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_6",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert feet to meters.",
        "instruction":"unit_convert(): Convert feet to meters.",
        "ctx":"Context information:\nInput: feet\nOutput: meters",
        "train_pairs":"Examples:\nInput: 3 feet\nOutput: 0.9144 m\nInput: 7 feet\nOutput: 2.1336 m\nInput: 18 feet\nOutput: 5.4864 m",
        "ctx_t_pairs":"Context information:\nInput: feet\nOutput: meters\n\nExamples:\nInput: 3 feet\nOutput: 0.9144 m\nInput: 7 feet\nOutput: 2.1336 m\nInput: 18 feet\nOutput: 5.4864 m",
        "test_pairs":"Examples:\nInput: 4 feet\nOutput: 1.2192 m\nInput: 22 feet\nOutput: 6.7056 m"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_20",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert html to plain text",
        "instruction":"extract(): convert HTML formatted text to plain text.",
        "ctx":"Context information:\nInput: HTML formatted text\nOutput: plain text",
        "train_pairs":"Examples:\nInput: <b>Hello World.<\/b><br\/><p><i>Is there anyone out there?<\/i><p>\nOutput: Hello World.Is there anyone out there?\nInput: <b>hello world!<\/b><br \/><i>it is me<\/i>\nOutput: hello world!it is me\nInput: <b>hello, <\/b><b>hi.<\/b><b>welcome<\/b>\nOutput: hello, hi.welcome",
        "ctx_t_pairs":"Context information:\nInput: HTML formatted text\nOutput: plain text\n\nExamples:\nInput: <b>Hello World.<\/b><br\/><p><i>Is there anyone out there?<\/i><p>\nOutput: Hello World.Is there anyone out there?\nInput: <b>hello world!<\/b><br \/><i>it is me<\/i>\nOutput: hello world!it is me\nInput: <b>hello, <\/b><b>hi.<\/b><b>welcome<\/b>\nOutput: hello, hi.welcome",
        "test_pairs":"Examples:\nInput: <b>test<\/b>\nOutput: test\nInput: <b>this<\/b><b> is<\/b><b> a<\/b><b> test<\/b>\nOutput: this is a test"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_35",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert euros to dollars.",
        "instruction":"unit_convert(): Convert euros to dollars.",
        "ctx":"Context information:\nInput: euro\nOutput: dollar",
        "train_pairs":"Examples:\nInput: 8 euro\nOutput: 8.86 dollar\nInput: 67 euro\nOutput: 74.20 dollar\nInput: 360 euro\nOutput: 398.70 dollar",
        "ctx_t_pairs":"Context information:\nInput: euro\nOutput: dollar\n\nExamples:\nInput: 8 euro\nOutput: 8.86 dollar\nInput: 67 euro\nOutput: 74.20 dollar\nInput: 360 euro\nOutput: 398.70 dollar",
        "test_pairs":"Examples:\nInput: 21 euro\nOutput: 23.26 dollar\nInput: 11 euro\nOutput: 12.18 dollar"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_36",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert month number to month name",
        "instruction":"domain_map(): Convert a month number to its corresponding month name.",
        "ctx":"Context information:\nInput: month number\nOutput: month name",
        "train_pairs":"Examples:\nInput: 4\nOutput: April\nInput: 7\nOutput: July\nInput: 12\nOutput: December",
        "ctx_t_pairs":"Context information:\nInput: month number\nOutput: month name\n\nExamples:\nInput: 4\nOutput: April\nInput: 7\nOutput: July\nInput: 12\nOutput: December",
        "test_pairs":"Examples:\nInput: 10\nOutput: October\nInput: 3\nOutput: March"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_28",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert millimeters to centimeters.",
        "instruction":"unit_convert(): Convert millimeters to centimeters.",
        "ctx":"Context information:\nInput: mm\nOutput: cm",
        "train_pairs":"Examples:\nInput: 9 mm\nOutput: 0.9 cm\nInput: 145 mm\nOutput: 14.5 cm\nInput: 23 mm\nOutput: 2.3 cm",
        "ctx_t_pairs":"Context information:\nInput: mm\nOutput: cm\n\nExamples:\nInput: 9 mm\nOutput: 0.9 cm\nInput: 145 mm\nOutput: 14.5 cm\nInput: 23 mm\nOutput: 2.3 cm",
        "test_pairs":"Examples:\nInput: 3 mm\nOutput: 0.3 cm\nInput: 199 mm\nOutput: 19.9 cm"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_50",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to roman numerals",
        "instruction":"domain_calculate(): Convert decimal numbers to Roman numerals.",
        "ctx":"Context information:\nInput: decimal number\nOutput: Roman numeral",
        "train_pairs":"Examples:\nInput: 4\nOutput: IV\nInput: 1350\nOutput: MCCCL\nInput: 981\nOutput: CMLXXXI",
        "ctx_t_pairs":"Context information:\nInput: decimal number\nOutput: Roman numeral\n\nExamples:\nInput: 4\nOutput: IV\nInput: 1350\nOutput: MCCCL\nInput: 981\nOutput: CMLXXXI",
        "test_pairs":"Examples:\nInput: 34\nOutput: XXXIV\nInput: 11\nOutput: XI"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_12",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert inches to feet.",
        "instruction":"unit_convert(): Convert inches to feet.",
        "ctx":"Context information:\nInput: inches\nOutput: feet",
        "train_pairs":"Examples:\nInput: 3 inch\nOutput: 0.25 feet\nInput: 37 inch\nOutput: 3.08333333 feet\nInput: 12 inch\nOutput: 1 feet",
        "ctx_t_pairs":"Context information:\nInput: inches\nOutput: feet\n\nExamples:\nInput: 3 inch\nOutput: 0.25 feet\nInput: 37 inch\nOutput: 3.08333333 feet\nInput: 12 inch\nOutput: 1 feet",
        "test_pairs":"Examples:\nInput: 169 inch\nOutput: 14.0833333 feet\nInput: 44 inch\nOutput: 3.66666667 feet"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_11",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert roman numerals to normal numbers",
        "instruction":"domain_calculate(): convert roman numerals to their equivalent normal numbers.",
        "ctx":"Context information:\nInput: a roman numeral\nOutput: the equivalent normal number",
        "train_pairs":"Examples:\nInput: III\nOutput: 3\nInput: CCXXXIII\nOutput: 233\nInput: C\nOutput: 100",
        "ctx_t_pairs":"Context information:\nInput: a roman numeral\nOutput: the equivalent normal number\n\nExamples:\nInput: III\nOutput: 3\nInput: CCXXXIII\nOutput: 233\nInput: C\nOutput: 100",
        "test_pairs":"Examples:\nInput: CCXXII\nOutput: 222\nInput: MCCXXXIV\nOutput: 1234"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_45",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert square meters to square feet.",
        "instruction":"unit_convert(): Convert square meters to square feet.",
        "ctx":"Context information:\nInput: square meters\nOutput: square feet",
        "train_pairs":"Examples:\nInput: 4 square meters\nOutput: 43.0556417 square feet\nInput: 560 square meters\nOutput: 6027.78983 square feet\nInput: 2000 square meters\nOutput: 21527.8208 square feet",
        "ctx_t_pairs":"Context information:\nInput: square meters\nOutput: square feet\n\nExamples:\nInput: 4 square meters\nOutput: 43.0556417 square feet\nInput: 560 square meters\nOutput: 6027.78983 square feet\nInput: 2000 square meters\nOutput: 21527.8208 square feet",
        "test_pairs":"Examples:\nInput: 42 square meters\nOutput: 452.084238 square feet\nInput: 323 square meters\nOutput: 3476.74306 square feet"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_46",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert mixed fraction to decimal",
        "instruction":"domain_calculate(): Convert mixed fractions to decimal numbers.",
        "ctx":"Context information:\nInput: mixed fraction\nOutput: decimal number",
        "train_pairs":"Examples:\nInput: 7 1\/4\nOutput: 7.25\nInput: 21 2\/5\nOutput: 21.4\nInput: 129\nOutput: 129",
        "ctx_t_pairs":"Context information:\nInput: mixed fraction\nOutput: decimal number\n\nExamples:\nInput: 7 1\/4\nOutput: 7.25\nInput: 21 2\/5\nOutput: 21.4\nInput: 129\nOutput: 129",
        "test_pairs":"Examples:\nInput: 6 9\/100\nOutput: 6.09\nInput: 3 4\/5\nOutput: 3.8"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_2",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to scientific notation",
        "instruction":"format(): convert numbers to scientific notation if needed.",
        "ctx":"Context information:\nInput: numbers in standard format\nOutput: numbers in scientific notation",
        "train_pairs":"Examples:\nInput: 1234\nOutput: 1.234E3\nInput: 23912000\nOutput: 2.3912E7\nInput: 98100\nOutput: 9.81E4",
        "ctx_t_pairs":"Context information:\nInput: numbers in standard format\nOutput: numbers in scientific notation\n\nExamples:\nInput: 1234\nOutput: 1.234E3\nInput: 23912000\nOutput: 2.3912E7\nInput: 98100\nOutput: 9.81E4",
        "test_pairs":"Examples:\nInput: 110\nOutput: 1.1E2\nInput: 12345\nOutput: 1.2345E4"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_31",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert women's shoe size to men's",
        "instruction":"domain_map(): Convert a given women's shoe size to the corresponding men's shoe size.",
        "ctx":"Context information:\nInput: women's shoe size\nOutput: corresponding men's shoe size",
        "train_pairs":"Examples:\nInput: 7.5\nOutput: 6\nInput: 14\nOutput: 12.5\nInput: 8\nOutput: 6.5",
        "ctx_t_pairs":"Context information:\nInput: women's shoe size\nOutput: corresponding men's shoe size\n\nExamples:\nInput: 7.5\nOutput: 6\nInput: 14\nOutput: 12.5\nInput: 8\nOutput: 6.5",
        "test_pairs":"Examples:\nInput: 7\nOutput: 5.5\nInput: 9\nOutput: 7.5"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_32",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert ounces to grams.",
        "instruction":"unit_convert(): Convert ounces to grams.",
        "ctx":"Context information:\nInput: oz\nOutput: g",
        "train_pairs":"Examples:\nInput: 3 oz\nOutput: 85.0486 g\nInput: 19 oz\nOutput: 538.641 g\nInput: 320 oz\nOutput: 9071.85 g",
        "ctx_t_pairs":"Context information:\nInput: oz\nOutput: g\n\nExamples:\nInput: 3 oz\nOutput: 85.0486 g\nInput: 19 oz\nOutput: 538.641 g\nInput: 320 oz\nOutput: 9071.85 g",
        "test_pairs":"Examples:\nInput: 11 oz\nOutput: 311.845 g\nInput: 23 oz\nOutput: 652.039 g"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_27",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert psia to psig",
        "instruction":"unit_convert(): Convert a given pressure in psia to psig.",
        "ctx":"Context information:\nInput: a pressure in psia\nOutput: the corresponding pressure in psig",
        "train_pairs":"Examples:\nInput: 33 psia\nOutput: 18.304051 psig\nInput: 17 psia\nOutput: 2.304051 psig\nInput: 100 psia\nOutput: 85.304051 psig",
        "ctx_t_pairs":"Context information:\nInput: a pressure in psia\nOutput: the corresponding pressure in psig\n\nExamples:\nInput: 33 psia\nOutput: 18.304051 psig\nInput: 17 psia\nOutput: 2.304051 psig\nInput: 100 psia\nOutput: 85.304051 psig",
        "test_pairs":"Examples:\nInput: 22 psia\nOutput: 7.304051 psig\nInput: 3 psia\nOutput: -11.695949 psig"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_24",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert centimeters to feet.",
        "instruction":"unit_convert(): Convert centimeters to feet.",
        "ctx":"Context information:\nInput: cm\nOutput: feet",
        "train_pairs":"Examples:\nInput: 4 cm\nOutput: 0.131234 feet\nInput: 17 cm\nOutput: 0.557743 feet\nInput: 201 cm\nOutput: 6.59449 feet",
        "ctx_t_pairs":"Context information:\nInput: cm\nOutput: feet\n\nExamples:\nInput: 4 cm\nOutput: 0.131234 feet\nInput: 17 cm\nOutput: 0.557743 feet\nInput: 201 cm\nOutput: 6.59449 feet",
        "test_pairs":"Examples:\nInput: 3 cm\nOutput: 0.0984252 feet\nInput: 2 cm\nOutput: 0.0656168 feet"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_1",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert mm to inches.",
        "instruction":"unit_convert(): Convert millimeters to inches.",
        "ctx":"Context information:\nInput: mm\nOutput: inches",
        "train_pairs":"Examples:\nInput: 1 mm\nOutput: 0.0393701 inch\nInput: 8 mm\nOutput: 0.314961 inch\nInput: 17 mm\nOutput: 0.669291 inch",
        "ctx_t_pairs":"Context information:\nInput: mm\nOutput: inches\n\nExamples:\nInput: 1 mm\nOutput: 0.0393701 inch\nInput: 8 mm\nOutput: 0.314961 inch\nInput: 17 mm\nOutput: 0.669291 inch",
        "test_pairs":"Examples:\nInput: 33 mm\nOutput: 1.29921 inch\nInput: 22 mm\nOutput: 0.866142 inch"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_49",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert liters to ounces",
        "instruction":"unit_convert(): Convert the original liters to ounces",
        "ctx":"Context information:\nInput: liters\nOutput: ounces",
        "train_pairs":"Examples:\nInput: 1 L\nOutput: 33.8140227 oz\nInput: 5870 L\nOutput: 198488.313 oz\nInput: 35 L\nOutput: 1183.4908 oz",
        "ctx_t_pairs":"Context information:\nInput: liters\nOutput: ounces\n\nExamples:\nInput: 1 L\nOutput: 33.8140227 oz\nInput: 5870 L\nOutput: 198488.313 oz\nInput: 35 L\nOutput: 1183.4908 oz",
        "test_pairs":"Examples:\nInput: 112 L\nOutput: 3787.17055 oz\nInput: 99 L\nOutput: 3347.58825 oz"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_48",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert acres to square feet",
        "instruction":"unit_convert(): Convert the original acres to square feet",
        "ctx":"Context information:\nInput: acres\nOutput: square feet",
        "train_pairs":"Examples:\nInput: 2 acres\nOutput: 87120 square feet\nInput: 0.5 acres\nOutput: 21780 square feet\nInput: 15 acres\nOutput: 653400 square feet",
        "ctx_t_pairs":"Context information:\nInput: acres\nOutput: square feet\n\nExamples:\nInput: 2 acres\nOutput: 87120 square feet\nInput: 0.5 acres\nOutput: 21780 square feet\nInput: 15 acres\nOutput: 653400 square feet",
        "test_pairs":"Examples:\nInput: 1 acres\nOutput: 43560 square feet\nInput: 4 acres\nOutput: 174240 square feet"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_25",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert Fahrenheit to Celsius.",
        "instruction":"unit_convert(): Convert Fahrenheit to Celsius.",
        "ctx":"Context information:\nInput: fahrenheit\nOutput: celsius",
        "train_pairs":"Examples:\nInput: 19 fahrenheit\nOutput: -7.22222 celsius\nInput: 100 fahrenheit\nOutput: 37.7778 celsius\nInput: 350 fahrenheit\nOutput: 176.667 celsius",
        "ctx_t_pairs":"Context information:\nInput: fahrenheit\nOutput: celsius\n\nExamples:\nInput: 19 fahrenheit\nOutput: -7.22222 celsius\nInput: 100 fahrenheit\nOutput: 37.7778 celsius\nInput: 350 fahrenheit\nOutput: 176.667 celsius",
        "test_pairs":"Examples:\nInput: 1 fahrenheit\nOutput: -17.2222 celsius\nInput: 123 fahrenheit\nOutput: 50.5556 celsius"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_26",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert ascii to hex",
        "instruction":"domain_map(): Convert a given ASCII character to its hexadecimal representation.",
        "ctx":"Context information:\nInput: an ASCII character\nOutput: a hexadecimal value",
        "train_pairs":"Examples:\nInput: DC2\nOutput: 12\nInput: RS\nOutput: 1E\nInput: #\nOutput: 23",
        "ctx_t_pairs":"Context information:\nInput: an ASCII character\nOutput: a hexadecimal value\n\nExamples:\nInput: DC2\nOutput: 12\nInput: RS\nOutput: 1E\nInput: #\nOutput: 23",
        "test_pairs":"Examples:\nInput: D\nOutput: 44\nInput: \"\nOutput: 22"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_30",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert lat long to MGRS",
        "instruction":"transform(): Convert a given latitude and longitude to MGRS format.",
        "ctx":"Context information:\nInput: latitude and longitude\nOutput: the corresponding MGRS coordinate",
        "train_pairs":"Examples:\nInput: 23.11, -39.33\nOutput: 24QVL6620855735\nInput: 44.11, -77.33\nOutput: 18TUP1353886730\nInput: 66.99, -33.11\nOutput: 25WDQ9520130269",
        "ctx_t_pairs":"Context information:\nInput: latitude and longitude\nOutput: the corresponding MGRS coordinate\n\nExamples:\nInput: 23.11, -39.33\nOutput: 24QVL6620855735\nInput: 44.11, -77.33\nOutput: 18TUP1353886730\nInput: 66.99, -33.11\nOutput: 25WDQ9520130269",
        "test_pairs":"Examples:\nInput: 23.33, -39.55\nOutput: 24QVL4377280158\nInput: 44.22, -77.44\nOutput: 18TUP0509799203"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_47",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert central time to eastern time",
        "instruction":"domain_calculate(): Convert Central Time to Eastern Time.",
        "ctx":"Context information:\nInput: time in Central Time\nOutput: time in Eastern Time",
        "train_pairs":"Examples:\nInput: 11:47 PM,Mon,Aug 17,2015\nOutput: 12:47 AM,Tue,Aug 18,2015\nInput: 7:00 AM,Tue,Jul 7,2015\nOutput: 8:00 AM,Tue,Jul 7,2015\nInput: 1:30 AM,Thu,May 14,2015\nOutput: 2:30 AM,Thu,May 14,2015",
        "ctx_t_pairs":"Context information:\nInput: time in Central Time\nOutput: time in Eastern Time\n\nExamples:\nInput: 11:47 PM,Mon,Aug 17,2015\nOutput: 12:47 AM,Tue,Aug 18,2015\nInput: 7:00 AM,Tue,Jul 7,2015\nOutput: 8:00 AM,Tue,Jul 7,2015\nInput: 1:30 AM,Thu,May 14,2015\nOutput: 2:30 AM,Thu,May 14,2015",
        "test_pairs":"Examples:\nInput: 3:30 AM,Thu,May 14,2015\nOutput: 4:30 AM,Thu,May 14,2015\nInput: 1:11 AM,Thu,May 21,2015\nOutput: 2:11 AM,Thu,May 21,2015"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_3",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert to fractional notation",
        "instruction":"format(): convert a float to a fractional notation",
        "ctx":"Context information:\nInput: a float\nOutput: a fractional notation",
        "train_pairs":"Examples:\nInput: 0.003\nOutput: 3\/1000\nInput: 0.125\nOutput: 1\/8\nInput: 4.5\nOutput: 9\/2",
        "ctx_t_pairs":"Context information:\nInput: a float\nOutput: a fractional notation\n\nExamples:\nInput: 0.003\nOutput: 3\/1000\nInput: 0.125\nOutput: 1\/8\nInput: 4.5\nOutput: 9\/2",
        "test_pairs":"Examples:\nInput: 0.25\nOutput: 1\/4\nInput: 0.2\nOutput: 1\/5"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_44",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert pounds to dollars.",
        "instruction":"unit_convert(): Convert pounds to dollars.",
        "ctx":"Context information:\nInput: pounds\nOutput: dollars",
        "train_pairs":"Examples:\nInput: 1 pound\nOutput: 1.57 dollar\nInput: 300 pound\nOutput: 470.78 dollar\nInput: 2100 pound\nOutput: 3295.45 dollar",
        "ctx_t_pairs":"Context information:\nInput: pounds\nOutput: dollars\n\nExamples:\nInput: 1 pound\nOutput: 1.57 dollar\nInput: 300 pound\nOutput: 470.78 dollar\nInput: 2100 pound\nOutput: 3295.45 dollar",
        "test_pairs":"Examples:\nInput: 123 pound\nOutput: 193.02 dollar\nInput: 444 pound\nOutput: 696.75 dollar"
    },
    {
        "test_path":"benchmark-bing-query-logs\/semantic_10",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"convert binary to hexadecimal",
        "instruction":"domain_calculate(): convert binary numbers to their hexadecimal equivalents.",
        "ctx":"Context information:\nInput: a binary number\nOutput: hexadecimal representation",
        "train_pairs":"Examples:\nInput: 101010\nOutput: 2A\nInput: 11111111\nOutput: FF\nInput: 0000101\nOutput: 5",
        "ctx_t_pairs":"Context information:\nInput: a binary number\nOutput: hexadecimal representation\n\nExamples:\nInput: 101010\nOutput: 2A\nInput: 11111111\nOutput: FF\nInput: 0000101\nOutput: 5",
        "test_pairs":"Examples:\nInput: 11\nOutput: 3\nInput: 111\nOutput: 7"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_13",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert pounds to kilograms.",
        "instruction":"unit_convert(): Convert pounds to kilograms.",
        "ctx":"Context information:\nInput: pounds\nOutput: kilograms",
        "train_pairs":"Examples:\nInput: 17 b\nOutput: 7.71107 kg\nInput: 39 b\nOutput: 17.6901 kg\nInput: 198 b\nOutput: 89.8113 kg",
        "ctx_t_pairs":"Context information:\nInput: pounds\nOutput: kilograms\n\nExamples:\nInput: 17 b\nOutput: 7.71107 kg\nInput: 39 b\nOutput: 17.6901 kg\nInput: 198 b\nOutput: 89.8113 kg",
        "test_pairs":"Examples:\nInput: 33 b\nOutput: 14.9685 kg\nInput: 12 b\nOutput: 5.44311 kg"
    },
    {
        "test_path":"benchmark-bing-query-logs\/unit_29",
        "system":"You are an AI assistant that translates user chat into the target instruction.",
        "chat":"Convert square feet to acres.",
        "instruction":"unit_convert(): Convert square feet to acres.",
        "ctx":"Context information:\nInput: square feet\nOutput: acres",
        "train_pairs":"Examples:\nInput: 45 square feet\nOutput: 0.00103306 acres\nInput: 120 square feet\nOutput: 0.00275482 acres\nInput: 2300 square feet\nOutput: 0.05280073 acres",
        "ctx_t_pairs":"Context information:\nInput: square feet\nOutput: acres\n\nExamples:\nInput: 45 square feet\nOutput: 0.00103306 acres\nInput: 120 square feet\nOutput: 0.00275482 acres\nInput: 2300 square feet\nOutput: 0.05280073 acres",
        "test_pairs":"Examples:\nInput: 1300 square feet\nOutput: 0.02984389 acres\nInput: 890 square feet\nOutput: 0.02043159 acres"
    }
]