test_path,chat,instruction,context.input,context.output,tuples
benchmark-FF-Trifacta-GoogleRefine/example_file_accent,normalize accented string,format(): normalize string by replacing accented characters with their ASCII equivalents.,string with accented characters,normalized string,"[{'input': 'áéíóú', 'output': 'aeiou'}, {'input': 'aeiou', 'output': 'aeiou'}, {'input': 'aeíouxyz', 'output': 'aeiouxyz'}, {'input': 'aeío', 'output': 'aeio'}, {'input': 'aeíouíóúz', 'output': 'aeiouiouz'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_acronym_ff_fail,normalize acronyms,format(): map full phrases to their acronyms.,full phrases with acronyms,acronyms,"[{'input': 'association computing machinery', 'output': 'acm'}, {'input': 'principle of programming languages', 'output': 'popl'}, {'input': 'special interest group management of data', 'output': 'sigmod'}, {'input': 'special interest group information retrieval', 'output': 'sigir'}, {'input': 'relational data base management system', 'output': 'rdbms'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_aka_ff_fail,normalize movie titles,transform(): normalize movie titles by removing redundant information,movie titles with redundant information,normalized movie titles,"[{'input': 'Harry Potter 4 aka Harry Potter and the Goblet of Fire', 'output': 'Harry Potter and the Goblet of Fire'}, {'input': 'Indy 4 aka Indiana Jones and the Kingdom of the Crystal Skull', 'output': 'Indiana Jones and the Kingdom of the Crystal Skull'}, {'input': 'New Star Trek aka Star Trek Into Darkness', 'output': 'Star Trek Into Darkness'}, {'input': 'The Hunger Games 3 aka the hunger games mockingjay part 1', 'output': 'the hunger games mockingjay part 1'}, {'input': 'New X man aka X-Men: Days of Future Past', 'output': 'X-Men: Days of Future Past'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_craigslist1,parse the house area from the description,extract(): extract the house area from the description.,house listings information,house area,"[{'input': 'Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 / 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map', 'output': '938'}, {'input': 'Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 / 3br - 1535ft2 - (Renton, WA) pic map', 'output': '1535'}, {'input': 'Mar 18 New AVAILABLE NOW FURNISHED $1650 / 1br - 750ft2 - (Bellevue) pic', 'output': '750'}, {'input': 'Mar 1 Lake Washington, Bellevue $1234 / 3br - 1899ft2 - (Bellevue, WA) pic map', 'output': '1899'}, {'input': 'Mar 23 Downtown Seattle Skyline. Act fast! $2829 / 3br - 355ft2 - (Seattle, WA) pic map', 'output': '355'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_craigslist2,parse rental price from Craigslist listings,extract(): extract the rental price from each Craigslist listing line.,Craigslist listing line,extracted rental price,"[{'input': 'Mar 18 Beautiful One bedroom Available. Schedule your appointment today $1410 / 1br - 938ft2 - (Downtown Tacoma, Theater District) pic map', 'output': '1410'}, {'input': 'Mar 18 1. Warm sunsets, Lake Washington, Downtown Seattle Skyline. Act fast! $2829 / 3br - 1535ft2 - (Renton, WA) pic map', 'output': '2829'}, {'input': 'Mar 18 New AVAILABLE NOW FURNISHED $1650 / 1br - 750ft2 - (Bellevue) pic', 'output': '1650'}, {'input': 'Mar 1 Lake Washington, Bellevue $1234 / 3br - 1899ft2 - (Bellevue, WA) pic map', 'output': '1234'}, {'input': 'Mar 23 Downtown Seattle Skyline. Act fast! $2829 / 3br - 355ft2 - (Seattle, WA) pic map', 'output': '2829'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_dob,format date of birth,format(): convert YYYYMMDD to MM-DD-YYYY,date in YYYYMMDD format,formatted date in MM-DD-YYYY,"[{'input': '19610223', 'output': '02-23-1961'}, {'input': '19700101', 'output': '01-01-1970'}, {'input': '19330212', 'output': '02-12-1933'}, {'input': '19221213', 'output': '12-13-1922'}, {'input': '19111122', 'output': '11-22-1911'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_duke_ds_1,parse Super Bowl information,extract(): extract Super Bowl number and title from the text.,Super Bowl listing in text format,Super Bowl number and title,"[{'input': '| style=""text-align:  center;""| {{Sort|01|[[Super Bowl I|I]]}}', 'output': 'Super Bowl I'}, {'input': '| style=""text-align:  center;""| {{Sort|02|[[Super Bowl II|II]]}}', 'output': 'Super Bowl II'}, {'input': '| style=""text-align:  center;""| {{Sort|03|[[Super Bowl III|III]]}}', 'output': 'Super Bowl III'}, {'input': '| style=""text-align:  center;""| {{Sort|05|[[Super Bowl IV|IV]]}}', 'output': 'Super Bowl IV'}, {'input': '| style=""text-align:  center;""| {{Sort|03|[[Super Bowl V|III]]}}', 'output': 'Super Bowl V'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_duke_ds_2,Extract team names,extract(): extract team names and seasons from the text file.,text format containing team listings,extracted team names and seasons,"[{'input': '| styple = ""background #d0e7ff;""|{{Sort|Green Bay Packers 01|[[1966 Green Bay Packers season|Green Bay Packers]]<sup>^</sup>}}', 'output': 'Green Bay Packers'}, {'input': '| styple = ""background #d0e7ff;""|{{Sort|Green Bay Packers 02|[[1967 Green Bay Packers season|Green Bay Packers]]<sup>^</sup>}}', 'output': 'Green Bay Packers'}, {'input': '| styple = ""background #d0e7ff;""|{{Sort|New York Jets 01|[[1968 Green Bay Packers season|New York Jets]]<sup>^</sup>}}', 'output': 'New York Jets'}, {'input': '| styple = ""background #d0e7ff;""|{{Sort|San Francisco 49ers 01|[[1981 San Francisco 49ers season|San Francisco 49ers]]<sup>^</sup>}}', 'output': 'San Francisco 49ers'}, {'input': '| styple = ""background #d0e7ff;""|{{Sort|Green Bay Packers 02|[[1911 Green Bay Packers season|Green Bay Packers]]<sup>^</sup>}}', 'output': 'Green Bay Packers'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_extractdate,Extract dates from file name,extract(): extract dates from the file name.,file name containing dates,extracted dates in format MM/DD/YYYY,"[{'input': '03_2005_XXX.xls', 'output': '03/01/2005'}, {'input': '12_2011_xaz.xls', 'output': '12/01/2011'}, {'input': '04_2015_rrrrr.xls', 'output': '04/01/2015'}, {'input': '03_2015_rrrrr.xls', 'output': '03/01/2015'}, {'input': '11_2012_rrrrr.xls', 'output': '11/01/2012'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_firstkchar_ff_fail,slice first k characters,extract(): slice first k characters from the text.,raw text,sliced text,"[{'input': 'aaaaaaaa', 'output': 'aaa'}, {'input': 'bb', 'output': 'bb'}, {'input': 'ccc', 'output': 'ccc'}, {'input': 'ddddd', 'output': 'ddd'}, {'input': 'eeeeeee', 'output': 'eee'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_googlerefine_step1,Extract name of actor/actress,extract(): extract name of actor/actress from the text file.,text format containing movie details,extracted name of actor/actress,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Meena Kumari'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Meena Kumari'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Kamini Kaushal'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Geeta Bali'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Meena Kumari'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Nutan'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Nargis Dutt'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Vyjayanthimala'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Meena Kumari'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Vyjayanthimala'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Nutan'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Mala Sinha'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Meena Kumari'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_googlerefine_step2_ff_fail,Extract movie actor from the text file.,extract(): extract movie actor from the text file.,text format containing movie actor,name of actor,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Baiju Bawra'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Parineeta'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Biraj Bahu'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Vachan'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Azaad'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Seema'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Mother India'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Sadhna'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Sahara'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Madhumati'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Sujata'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Dhool Ka Phool'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Chirag Kahan Roshni Kahan'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_googlerefine_step3_ff_fail,Extract movie roles,extract(): extract movie roles from the text file.,text format containing movie details,extracted movie roles,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Gauri'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Lalita'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Biraj Chakravorty'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Kamla'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Shobha'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Gauri'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Radha'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Champabai / Rajani'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Leela'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Madhumati / Madhavi / Radha'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Sujata'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Meena Khosla'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Ratna'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_hierarchical1_ff_fail,Transform hierarchical data,extract(): extract the first element of the second tuple from the hierarchical data.,"Hierarchical data represented as tuples separated by brackets, with elements in each tuple separated by commas.",The first element of the second tuple from the input data.,"[{'input': '{{a, b}, {cccc, d}, {e, f}}', 'output': 'cccc'}, {'input': '{{x, aaay}, {aaaz, d}}', 'output': 'aaaz'}, {'input': '{{a}, {ffeaa}, {aa, aaa, aaa, aaa}}', 'output': 'ffeaa'}, {'input': '{{ajfj, ajfie, ajaj, aj}, {jwi, ajaj, aj, a}, {aj, ajiw, ajif, jfi}}', 'output': 'jwi'}, {'input': '{{a}, {b}, {c}}', 'output': 'b'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_hierarchical2_ff_fail,Extract first element of second tuple from hierarchical data,extract(): extract the first element of the second tuple from the hierarchical data separated by semicolons.,"Hierarchical data represented as tuples separated by semicolons, with elements in each tuple separated by commas.",The first element of the second tuple from the input data.,"[{'input': 'a, b; cccc, d; e, f', 'output': 'cccc'}, {'input': 'x, aaay; aaaz, d', 'output': 'aaaz'}, {'input': 'a; ffeaa; aa, aaa, aaa, aaa', 'output': 'ffeaa'}, {'input': 'ajfj, ajfie, ajaj, aj; jwi, ajaj, aj, a; aj, ajiw, ajif, jfi', 'output': 'jwi'}, {'input': 'ccc; aaa, bbb, ccc, ddd; xyz', 'output': 'aaa'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_name,Transform first and last names into username,format(): Combine first letter of first name with full last name to create username,First and last names separated by a tab character.,Username created by combining the first letter of the first name with the full last name.,"[{'input': 'john\tsmith', 'output': 'jsmith'}, {'input': 'adam\twilliams', 'output': 'awilliams'}, {'input': 'james\tjohnson', 'output': 'jjohnson'}, {'input': 'alice\tbob', 'output': 'abob'}, {'input': 'charlie\tdenis', 'output': 'cdenis'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_name2,"Transform last name, first name to username","format(): Split input by comma, trim spaces, take first letter of first name and concatenate with full last name","Names represented as 'first name, last name'.",Username,"[{'input': 'smith, john', 'output': 'jsmith'}, {'input': 'williams, adam', 'output': 'awilliams'}, {'input': 'johnson, james', 'output': 'jjohnson'}, {'input': 'denis, alice', 'output': 'adenis'}, {'input': 'smith, bob', 'output': 'bsmith'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_name3,Reformat names,"format(): Split input by tabs, rearrange components, and format as 'LastName, FirstName MiddleInitial.'",Raw name separated by tabs.,"Names formatted as 'LastName, FirstName MiddleInitial.'","[{'input': 'Freehafer\tDrew\tNancy', 'output': 'Freehafer, Nancy D.'}, {'input': 'Cencini\tA\tAndrew', 'output': 'Cencini, Andrew A.'}, {'input': 'Kotas\tBollen\tJan', 'output': 'Kotas, Jan B.'}, {'input': 'Thorpe\tJ\tSteven', 'output': 'Thorpe, Steven J.'}, {'input': 'Charlie\tBob\tAlice', 'output': 'Charlie, Alice B.'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_phone,format phone number data,format(): Add parentheses and dashes to phone numbers,Phone numbers represented in a 10 digit format.,Formatted phone numbers with parentheses and dashes.,"[{'input': '1235550102', 'output': '(123) 555-0102'}, {'input': '4254423457', 'output': '(425) 442-3457'}, {'input': '4251239876', 'output': '(425) 123-9876'}, {'input': '1231239876', 'output': '(123) 123-9876'}, {'input': '4259876543', 'output': '(425) 987-6543'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_phonebranch,Standardize phone numbers,format(): Convert various phone number formats to XXX-XXX-XXXX,Phone numbers in different formats,Phone numbers standardized to XXX-XXX-XXXX format,"[{'input': '323-708-7700', 'output': '323-708-7700'}, {'input': '(425)-706-7709', 'output': '425-706-7709'}, {'input': '510.220.5586', 'output': '510-220-5586'}, {'input': '235 7654', 'output': '425-235-7654'}, {'input': '745-8139', 'output': '425-745-8139'}, {'input': '111-222-3333', 'output': '111-222-3333'}, {'input': '888 9999', 'output': '425-888-9999'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_phonebranch_ff_fail,Format and standardize phone numbers,format(): Standardize phone numbers to XXX-XXX-XXXX format,Phone numbers in various formats,Standardized phone numbers in XXX-XXX-XXXX format,"[{'input': '4259990200', 'output': '425-999-0200'}, {'input': '390-9292', 'output': '425-390-9292'}, {'input': '499-999-2020', 'output': '499-999-2020'}, {'input': '(299)-398-0003', 'output': '299-398-0003'}, {'input': '(288) 3998888', 'output': '288-399-8888'}, {'input': '999-2020', 'output': '425-999-2020'}, {'input': '425-9990200', 'output': '425-999-0200'}, {'input': '(288) 3998888', 'output': '288-399-8888'}, {'input': '499-999-2020', 'output': '499-999-2020'}, {'input': '(299)-398-0003', 'output': '299-398-0003'}, {'input': '(288) 3998888', 'output': '288-399-8888'}, {'input': '425-9990200', 'output': '425-999-0200'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_regexjoin_ff_fail,Create acronyms from phrases,transform(): Generate acronyms by taking the first letter of each word in the input phrase,Phrases or organization names,Acronyms created from the input phrases,"[{'input': 'Association Computing Machinery', 'output': 'ACM'}, {'input': 'Principle Of Programming Lanaguages', 'output': 'POPL'}, {'input': 'Special Interest Group on Management Of Data', 'output': 'SIGMOD'}, {'input': 'Relational Data Base Management System', 'output': 'RDBMS'}, {'input': 'Table Extraction by Global Record Alignment', 'output': 'TEGRA'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_removepunctuation,Remove punctuation from text,extract(): Remove all punctuation marks from the input text,Text with various punctuation marks,Text with punctuation marks removed,"[{'input': '""Do you like this site?"",', 'output': 'Do you like this site'}, {'input': '""--cool--"",', 'output': 'cool'}, {'input': '""...ok!"",', 'output': 'ok'}, {'input': '""None"",', 'output': 'None'}, {'input': '""test if this works""?', 'output': 'test if this works'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_removequote,Remove quotation marks from text,extract(): Remove surrounding quotation marks from the input text,Text surrounded by quotation marks,Text with surrounding quotation marks removed,"[{'input': '""Do you like this site?""', 'output': 'Do you like this site?'}, {'input': '""--cool--""', 'output': '--cool--'}, {'input': '""...ok!""', 'output': '...ok!'}, {'input': '""None""', 'output': 'None'}, {'input': '""test if this works""', 'output': 'test if this works'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_removespace_ff_fail,Normalize spaces in text,extract(): Replace multiple spaces with a single space,Text with varying numbers of spaces between words,Text with single spaces between words,"[{'input': 'a bb  cc    dd ee', 'output': 'a bb cc dd ee'}, {'input': 'a b  c   d    e', 'output': 'a b c d e'}, {'input': 'a b     e', 'output': 'a b e'}, {'input': 'a b c d e  f', 'output': 'a b c d e f'}, {'input': 'aaa  bbb  ccc  ddd', 'output': 'aaa bbb ccc ddd'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_reverse,Extract last element from comma-separated list,extract(): Extract the last element from a comma-separated list of items,Comma-separated list of items,The last element from the input list,"[{'input': 'a, b, c, d', 'output': 'd'}, {'input': 'x, y, z', 'output': 'z'}, {'input': '1, 2, 3', 'output': '3'}, {'input': 'o, p', 'output': 'p'}, {'input': '1, 2, 3, 4, 5, 6, 7', 'output': '7'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_reverse2,Extract specific element from nested structure,extract(): Extract the second element of the second tuple from the nested structure,Nested structure with curly braces and comma-separated elements,The second element of the second tuple from the input,"[{'input': '{{a, b}, {cccc, d}, {e, f}}', 'output': 'd'}, {'input': '{{x, aaay}, {aaaz, d}}', 'output': 'd'}, {'input': '{{a}, {ffeaa}, {aa, aaa, aaa, aaa}}', 'output': 'ffeaa'}, {'input': '{{ajfj, ajfie, ajaj, aj}, {jwi, ajaj, aj, a}, {aj, ajiw, ajif, jfi}}', 'output': 'a'}, {'input': '{{a}, {b}, {c}}', 'output': 'b'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_split_combine_partial_match_ff_fail,Combine parts of underscore-separated string,transform(): Combine the first two characters of the first part with the last two characters of the third part of an underscore-separated string,String with underscore-separated parts,Combined string from specific parts of the input,"[{'input': 'abc_def_xyz_8922ksd', 'output': 'abyz'}, {'input': 'all_i23saii_jjk_fhdkaj', 'output': 'aljk'}, {'input': 'ipo_2839a_zif_fjei', 'output': 'ipif'}, {'input': '32a_xxde_ttt_32eresaf', 'output': '32tt'}, {'input': 'axd_effe_xzz_ttesfes', 'output': 'axzz'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_ssn,Format Social Security Numbers,format(): Add hyphens to 9-digit Social Security Numbers,9-digit number representing a Social Security Number,Formatted Social Security Number with hyphens,"[{'input': '1922123456', 'output': '192-212-3456'}, {'input': '9822135882', 'output': '982-213-5882'}, {'input': '8332213215', 'output': '833-221-3215'}, {'input': '9918882777', 'output': '991-888-2777'}, {'input': '1234567890', 'output': '123-456-7890'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_stringcase1,Create username from first and last name,transform(): Combine the first letter of the first name (capitalized) with the last name (capitalized),First name and last name separated by a tab,Username created by combining parts of the input names,"[{'input': 'james\tsmith', 'output': 'JSmith'}, {'input': 'jane\tjohnson', 'output': 'JJohnson'}, {'input': 'bob\twhite', 'output': 'BWhite'}, {'input': 'alice\tjohnson', 'output': 'AJohnson'}, {'input': 'charlie\tdenis', 'output': 'CDenis'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_stringcase2,Extract and format movie titles,transform(): Extract the movie title from the input string and convert it to lowercase,String containing movie information with title in double quotes,Lowercase movie title,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'baiju bawra'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'parineeta'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'biraj bahu'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'vachan'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'azaad'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_trifacta_step1,Extract 'useful' value from JSON,extract(): Extract the value of the 'useful' key from the JSON input,"JSON string containing 'funny', 'useful', and 'cool' keys with integer values",The integer value associated with the 'useful' key,"[{'input': '{""funny"": 0, ""useful"": 2, ""cool"": 1}', 'output': '2'}, {'input': '{""funny"": 0, ""useful"": 2, ""cool"": 0}', 'output': '2'}, {'input': '{""funny"": 0, ""useful"": 0, ""cool"": 0}', 'output': '0'}, {'input': '{""funny"": 0, ""useful"": 1, ""cool"": 1}', 'output': '1'}, {'input': '{""funny"": 0, ""useful"": 3, ""cool"": 1}', 'output': '3'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_trifacta_step2,Extract ZIP code from address,extract(): Extract the 5-digit ZIP code from the end of the address string,"Full address string including street, city, state, and ZIP code",5-digit ZIP code,"[{'input': '2 N Central Avenue Phoenix, AZ 85004', 'output': '85004'}, {'input': 'University Ave Middleton, WI 53562', 'output': '53562'}, {'input': 'Farwell St Mc Farland, WI 53558', 'output': '53558'}, {'input': '1 Microsoft Way, Redmond, WA 98052', 'output': '98052'}, {'input': '14820 36th ST NE, Redmond, WA 98052', 'output': '98052'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_trifacta_step4_ff_fail,Extract exclamation marks,extract(): Extract all exclamation marks from the input text,Long text containing various punctuation marks,String of consecutive exclamation marks found in long text,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': '!, !, !, !!!!, !'}, {'input': 'Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best ""average"", the food was terrible and myself and my co-workers all agreed, this restaurant doesn\'t rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3"" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!', 'output': '!, !, !, !!, !!'}, {'input': 'Test example!!! This is a test!!!', 'output': '!!!, !!!'}, {'input': 'Test one!', 'output': '!'}, {'input': 'one! two!! three!!!', 'output': '!, !!, !!!'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_trifacta_step5_ff_fail,Extract uppercase words,extract(): Extract all fully uppercase words from the input text,Text containing mixed case words,Comma-separated list of fully uppercase words found in the input,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': 'OMG'}, {'input': 'When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation', 'output': 'NO, KNOW, IT, IS, SATURDAY, TERRIBLY'}, {'input': 'This is a TEST, NOT a real line', 'output': 'TEST, NOT'}, {'input': 'test ONE, test TWO, test THREE', 'output': 'ONE, TWO, THREE'}, {'input': 'This is a TEST, not a real line', 'output': 'TEST'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_unit_convert1,Convert unit abbreviation to full name,format(): Change 'cm' to 'centimeter' in the input,Measurement in centimeters with 'cm' abbreviation,Same measurement with 'cm' replaced by 'centimeter',"[{'input': '1.2 cm', 'output': '1.2 centimeter'}, {'input': '1.3 cm', 'output': '1.3 centimeter'}, {'input': '6.4 cm', 'output': '6.4 centimeter'}, {'input': '1.4 cm', 'output': '1.4 centimeter'}, {'input': '1.5 cm', 'output': '1.5 centimeter'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_upper,Convert first column to uppercase,transform(): Convert the first column of tab-separated input to uppercase,Two columns of text separated by a tab,First column converted to uppercase,"[{'input': 'abc\txyz', 'output': 'ABC'}, {'input': 'azzz\tttt', 'output': 'AZZZ'}, {'input': 'xyz\tttttt', 'output': 'XYZ'}, {'input': 'cccc\tabc', 'output': 'CCCC'}, {'input': 'abcdefg\tuvw', 'output': 'ABCDEFG'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_upperaccent,Convert text to uppercase and remove accents,transform(): Convert input text to uppercase and remove accent marks,Text with possible lowercase letters and accent marks,Uppercase text with accent marks removed,"[{'input': 'áéíóú', 'output': 'AEIOU'}, {'input': 'aeiou', 'output': 'AEIOU'}, {'input': 'aeíouxyz', 'output': 'AEIOUXYZ'}, {'input': 'aeío', 'output': 'AEIOU'}, {'input': 'aeíouïöüz', 'output': 'AEIOUIOUZ'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_wikilist1,Extract actor names from wiki-style list,extract(): Extract the actor name from the wiki-style list item,Wiki-style list item containing actor and film information,Actor name extracted from the input,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Meena Kumari'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Meena Kumari'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Kamini Kaushal'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Geeta Bali'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Meena Kumari'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Nutan'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Nargis Dutt'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Vyjayanthimala'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Meena Kumari'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Vyjayanthimala'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Nutan'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Mala Sinha'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Meena Kumari'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_wikilist2_ff_fail,Extract film names from wiki-style list,extract(): Extract the film name from the wiki-style list item,Wiki-style list item containing actor and film information,Film name extracted from the input,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Baiju Bawra'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Parineeta'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Biraj Bahu'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Vachan'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Azaad'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Seema'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Mother India'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Sadhna'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Sahara'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Madhumati'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Sujata'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Dhool Ka Phool'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Chirag Kahan Roshni Kahan'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_wikilist3_ff_fail,Extract character names from wiki-style list,extract(): Extract the character name from the wiki-style list item,Wiki-style list item containing actor and character information,Character name extracted from the input,"[{'input': ""* '''1953 [[Meena Kumari]] – ''[[Baiju Bawra (film)|Baiju Bawra]]''''' as '''Gauri'''"", 'output': 'Gauri'}, {'input': ""* '''1954 [[Meena Kumari]] – ''[[Parineeta (1953 film)|Parineeta]]''''' as '''Lalita'''"", 'output': 'Lalita'}, {'input': ""* '''1955 [[Kamini Kaushal]] – ''[[Biraj Bahu]]''''' as '''Biraj Chakravorty'''"", 'output': 'Biraj Chakravorty'}, {'input': ""** [[Geeta Bali]] – ''[[Vachan]]'' as Kamla"", 'output': 'Kamla'}, {'input': ""** [[Meena Kumari]] – ''[[Azaad (1955 film)|Azaad]]'' as Shobha"", 'output': 'Shobha'}, {'input': ""* '''1956 [[Nutan]] – ''[[Seema (1955 film)|Seema]]''''' as '''Gauri'''"", 'output': 'Gauri'}, {'input': ""* '''1957 [[Nargis Dutt]] – ''[[Mother India]]''''' as '''Radha'''"", 'output': 'Radha'}, {'input': ""* '''1958 [[Vyjayanthimala]] – ''[[Sadhna]]''''' as '''Champabai / Rajani'''"", 'output': 'Champabai / Rajani'}, {'input': ""** [[Meena Kumari]] – ''[[Sahara (1958 film)|Sahara]]'' as Leela"", 'output': 'Leela'}, {'input': ""** [[Vyjayanthimala]] – ''[[Madhumati]]'' as Madhumati / Madhavi / Radha"", 'output': 'Madhumati / Madhavi / Radha'}, {'input': ""* '''1959 [[Nutan]] – ''[[Sujata (1959 film)|Sujata]]''''' as '''Sujata'''"", 'output': 'Sujata'}, {'input': ""** [[Mala Sinha]] – ''[[Dhool Ka Phool]]'' as Meena Khosla"", 'output': 'Meena Khosla'}, {'input': ""** [[Meena Kumari]] – ''[[Chirag Kahan Roshni Kahan]]'' as Ratna"", 'output': 'Ratna'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_yelp1_ff_fail,Extract business ID from Yelp JSON data,extract(): Extract the business_id from the Yelp JSON data,JSON string containing Yelp business data,The business_id extracted from the input,"[{'input': '{""checkin_info"": {""3-4"": 1, ""13-5"": 1, ""6-6"": 1, ""14-5"": 1, ""14-6"": 1, ""14-2"": 1, ""14-3"": 1, ""19-0"": 1, ""11-5"": 1, ""13-2"": 1, ""11-6"": 2, ""11-3"": 1, ""12-6"": 1, ""6-5"": 1, ""5-5"": 1, ""9-2"": 1, ""9-5"": 1, ""9-6"": 1, ""5-2"": 1, ""7-6"": 1, ""7-5"": 1, ""7-4"": 1, ""17-5"": 1, ""8-5"": 1, ""10-2"": 1, ""10-5"": 1, ""10-6"": 1}, ""type"": ""checkin"", ""business_id"": ""JwUE5GmEO-sH1FuwJgKBlQ""}', 'output': 'JwUE5GmEO-sH1FuwJgKBlQ'}, {'input': '{""checkin_info"": {""9-3"": 1, ""12-5"": 1, ""15-3"": 1, ""15-5"": 1, ""7-6"": 1, ""7-5"": 1, ""15-6"": 1, ""16-3"": 1, ""10-0"": 1, ""15-4"": 1, ""6-6"": 2, ""8-5"": 2, ""6-5"": 1, ""10-4"": 1, ""10-5"": 1, ""8-2"": 1}, ""type"": ""checkin"", ""business_id"": ""uGykseHzyS5xAMWoN6YUqA""}', 'output': 'uGykseHzyS5xAMWoN6YUqA'}, {'input': '{""checkin_info"": {""16-3"": 1, ""15-3"": 2, ""15-5"": 1, ""15-4"": 1, ""15-6"": 2, ""14-5"": 1, ""14-6"": 1, ""17-5"": 1, ""14-3"": 1, ""19-4"": 1, ""16-5"": 1, ""11-4"": 1, ""11-6"": 2, ""11-0"": 1, ""12-6"": 1, ""12-3"": 1, ""12-0"": 2, ""9-6"": 1, ""7-3"": 1, ""20-5"": 1, ""14-1"": 1, ""17-6"": 1, ""16-0"": 1, ""16-1"": 1, ""16-6"": 2, ""16-4"": 1, ""17-0"": 1, ""10-0"": 2, ""8-1"": 1, ""8-2"": 1}, ""type"": ""checkin"", ""business_id"": ""LRKJF43s9-3jG9Lgx4zODg""}', 'output': 'LRKJF43s9-3jG9Lgx4zODg'}, {'input': '{""checkin_info"": {""16-3"": 1, ""15-3"": 2, ""15-5"": 1, ""15-4"": 1, ""15-6"": 2, ""14-5"": 1, ""14-6"": 1, ""17-5"": 1, ""14-3"": 1, ""8-2"": 1}, ""type"": ""checkin"", ""business_id"": ""AMWoN6YUqA-sH1FuwJgKBlQ""}', 'output': 'AMWoN6YUqA-sH1FuwJgKBlQ'}, {'input': '{""checkin_info"": {""8-5"": 2, ""6-5"": 1, ""10-4"": 1, ""10-5"": 1, ""8-2"": 1}, ""type"": ""checkin"", ""business_id"": ""sH1FuwJgKBlQ5xAMWoN6YUqA""}', 'output': 'sH1FuwJgKBlQ5xAMWoN6YUqA'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_yelp2,Extract 'useful' value from Yelp JSON data,extract(): Extract the value of the 'useful' key from the Yelp JSON data,JSON string containing Yelp review data,The 'useful' value extracted from the input,"[{'input': '{""funny"": 0, ""useful"": 2, ""cool"": 1}', 'output': '2'}, {'input': '{""funny"": 0, ""useful"": 2, ""cool"": 0}', 'output': '2'}, {'input': '{""funny"": 0, ""useful"": 0, ""cool"": 0}', 'output': '0'}, {'input': '{""funny"": 0, ""useful"": 1, ""cool"": 1}', 'output': '1'}, {'input': '{""funny"": 3, ""useful"": 3, ""cool"": 6}', 'output': '3'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_yelpregex1_ff_fail,get consecutive exclamation points of length 2 or more,extract(): Extract consecutive exclamation points of length 2 or more from the text,Text containing various punctuation marks,String of consecutive exclamation points of length 2 or more found in the text,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': '!!!!'}, {'input': 'Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best ""average"", the food was terrible and myself and my co-workers all agreed, this restaurant doesn\'t rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3"" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!', 'output': '!!, !!'}, {'input': 'Test example!!! This is a test!!!', 'output': '!!!, !!!'}, {'input': 'one! two!! three!!!', 'output': '!!, !!!'}, {'input': 'Test one!', 'output': ''}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_yelpregex2_ff_fail,Extract consecutive exclamation marks from Yelp reviews,extract(): Extract consecutive exclamation marks from the Yelp review text,Yelp review text,String of consecutive exclamation marks found in Yelp review text,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': '!, !, !, !!!!, !'}, {'input': 'Went here for lunch with two co-workers, checked Yelp before we went and the reviews were very positive so we decided to give it a try.\n\nYikes! How can the reviews be 4-5 stars and the service at best ""average"", the food was terrible and myself and my co-workers all agreed, this restaurant doesn\'t rate two stars.\n\nI had one of the special Friday offerings, Smelt. It came with a salad (very average but fresh), fries (ordinary) and the Smelt. After a 20-25 minute wait our server came with our orders. I looked at my plate and was shocked! There was 12-15 so-called Smelt about 3"" long and deep fried. They looked like little fat cigarettes! I bit into one and it was all batter, I tried another and it was the same!! I had deep fried batter for lunch!!', 'output': '!'}, {'input': 'Test example!!! This is a test!!!', 'output': '!!!, !!!'}, {'input': 'Test one!', 'output': '!'}, {'input': 'one! two!! three!!!', 'output': '!, !!, !!!'}]"
benchmark-FF-Trifacta-GoogleRefine/example_file_yelpregex3_ff_fail,Extract uppercase words from Yelp reviews,extract(): Extract uppercase words from the Yelp review text,Yelp review text,Uppercase words extracted from the input,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': 'OMG'}, {'input': 'When she asked if we had reservations, I replied no,  and she commented NO?  You KNOW IT IS SATURDAY.  I wanted to say yes, yesterday was Friday and tomorrow is Sunday.  Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation', 'output': 'NO, KNOW, IT, IS, SATURDAY, TERRIBLY'}, {'input': 'This is a TEST, NOT a real line', 'output': 'TEST, NOT'}, {'input': 'test ONE, test TWO, test THREE', 'output': 'ONE, TWO, THREE'}, {'input': 'This is a TEST, not a real line', 'output': 'TEST'}]"
benchmark-bing-query-logs/semantic_1,convert time to decimal,format(): convert time to decimal format.,time in HH:MM:SS format,4-decimal hours,"[{'input': '02:45:45', 'output': '2.7625 hours'}, {'input': '1:30:25', 'output': '1.5069 hours'}, {'input': '12:10:02', 'output': '12.1672 hours'}, {'input': '03:22:45', 'output': '3.3792 hours'}, {'input': '22:22:22', 'output': '22.3728 hours'}]"
benchmark-bing-query-logs/semantic_10,convert binary to hexadecimal,domain_calculate(): convert binary numbers to their hexadecimal equivalents.,a binary number,hexadecimal representation,"[{'input': '101010', 'output': '2A'}, {'input': '11111111', 'output': 'FF'}, {'input': '0000101', 'output': '5'}, {'input': '11', 'output': '3'}, {'input': '111', 'output': '7'}]"
benchmark-bing-query-logs/semantic_11,convert roman numerals to normal numbers,domain_calculate(): convert roman numerals to their equivalent normal numbers.,a roman numeral,the equivalent normal number,"[{'input': 'III', 'output': 3}, {'input': 'CCXXXIII', 'output': 233}, {'input': 'C', 'output': 100}, {'input': 'CCXXII', 'output': 222}, {'input': 'MCCXXXIV', 'output': 1234}]"
benchmark-bing-query-logs/semantic_12,convert slope to degrees,domain_calculate(): convert slope percentages to degrees.,slope percentage,angle in degrees,"[{'input': '4%', 'output': '2.29 Degrees'}, {'input': '30%', 'output': '16.70 Degrees'}, {'input': '45%', 'output': '24.23 Degrees'}, {'input': '24%', 'output': '13.50 Degrees'}, {'input': '12%', 'output': '6.84 Degrees'}]"
benchmark-bing-query-logs/semantic_13,convert regular time to military time,format(): convert regular time to military time.,regular time (AM/PM),"military time, 24-hour format","[{'input': '1:00 PM', 'output': '1300'}, {'input': '6:00 PM', 'output': '1800'}, {'input': '11:00 PM', 'output': '2300'}, {'input': '8:00 AM', 'output': '0800'}, {'input': '11:00 AM', 'output': '1100'}]"
benchmark-bing-query-logs/semantic_14,convert lat long to utm,domain_calculate(): convert latitude and longitude coordinates to UTM (Universal Transverse Mercator) coordinates.,latitude and longitude,UTM coordinates (easting and northing),"[{'input': '32.44, 44.11', 'output': '583662mE, 3589556mN'}, {'input': '36.11, 80.22', 'output': '429797mE, 3996430mN'}, {'input': '10.82, 20.21', 'output': '413642mE, 1196188mN'}, {'input': '23.11, 39.33', 'output': '533791mE, 2555735mN'}, {'input': '10.22, -39.33', 'output': '463857mE, 1129755mN'}]"
benchmark-bing-query-logs/semantic_15,convert rgb to cmyk,domain_map(): convert RGB color values to CMYK color values.,"RGB values (R,G,B)","CMYK values (C,M,Y,K)","[{'input': '3,4,5', 'output': '0.4,0.2,0,0.98'}, {'input': '0,0,0', 'output': '0,0,0,1'}, {'input': '33,44,55', 'output': '0.4,0.2,0,0.784'}, {'input': '255,0,255', 'output': '0,1,0,0'}, {'input': '0,255,0', 'output': '1,0,1,0'}]"
benchmark-bing-query-logs/semantic_16,convert military time to standard time,format(): convert military time (24-hour format) to standard time (AM/PM).,military time in 24-hour format,standard time in AM/PM format,"[{'input': '0100', 'output': '1:00 AM'}, {'input': '1800', 'output': '6:00 PM'}, {'input': '1400', 'output': '2:00 PM'}, {'input': '1300', 'output': '1:00 PM'}, {'input': '1600', 'output': '4:00 PM'}, {'input': '0200', 'output': '2:00 AM'}]"
benchmark-bing-query-logs/semantic_17,convert cmyk to rgb,domain_map(): convert CMYK color values to RGB color values.,"CMYK values (C,M,Y,K)","RGB values (R,G,B)","[{'input': '0,0,0,1', 'output': '0,0,0'}, {'input': '0.16,0.67,0.61,0.73', 'output': '58,23,27'}, {'input': '0,1,1,0', 'output': '255,0,0'}, {'input': '0,1,0,0', 'output': '255,0,255'}, {'input': '0.53,0.42,0.38,0.55', 'output': '54,67,71'}]"
benchmark-bing-query-logs/semantic_18,convert base two to base ten,domain_calculate(): convert binary numbers to their decimal equivalents.,a binary number,decimal representation,"[{'input': '11111', 'output': 31}, {'input': '10101001', 'output': 169}, {'input': '100001101', 'output': 269}, {'input': '111', 'output': 7}, {'input': '101010', 'output': 42}]"
benchmark-bing-query-logs/semantic_19,convert timespan to string,format(): convert a timespan in HH:MM:SS format to a human-readable string format.,timespan in HH:MM:SS format,human-readable string format,"[{'input': '00:06:32.4458750', 'output': '0 hrs, 6 mins, 32 secs'}, {'input': '11:12:13.7458750', 'output': '11 hrs, 12 mins, 14 secs'}, {'input': '23:01:09.0988712', 'output': '23 hrs, 1 mins, 9 secs'}, {'input': '12:21:09.2988712', 'output': '12 hrs, 21 mins, 9 secs'}, {'input': '23:31:21.4322211', 'output': '23 hrs, 31 mins, 21 secs'}]"
benchmark-bing-query-logs/semantic_2,convert to scientific notation,format(): convert numbers to scientific notation if needed.,numbers in standard format,numbers in scientific notation,"[{'input': '1234', 'output': '1.234E3'}, {'input': '23912000', 'output': '2.3912E7'}, {'input': '98100', 'output': '9.81E4'}, {'input': '110', 'output': '1.1E2'}, {'input': '12345', 'output': '1.2345E4'}]"
benchmark-bing-query-logs/semantic_20,convert html to plain text,extract(): convert HTML formatted text to plain text.,HTML formatted text,plain text,"[{'input': '<b>Hello World.</b><br/><p><i>Is there anyone out there?</i><p>', 'output': 'Hello World.Is there anyone out there?'}, {'input': '<b>hello world!</b><br /><i>it is me</i>', 'output': 'hello world!it is me'}, {'input': '<b>hello, </b><b>hi.</b><b>welcome</b>', 'output': 'hello, hi.welcome'}, {'input': '<b>test</b>', 'output': 'test'}, {'input': '<b>this</b><b> is</b><b> a</b><b> test</b>', 'output': 'this is a test'}]"
benchmark-bing-query-logs/semantic_21,convert hex to binary,domain_calculate(): convert hexadecimal numbers to their binary equivalents.,a hexadecimal number,binary representation,"[{'input': '123A', 'output': '0001 0010 0011 1010'}, {'input': '469E', 'output': '0100 0110 1001 1110'}, {'input': 'AAE352', 'output': '1010 1010 1110 0011 0101 0010'}, {'input': '123', 'output': '0001 0010 0011'}, {'input': '3333', 'output': '0011 0011 0011 0011'}]"
benchmark-bing-query-logs/semantic_22,convert pacific time to eastern time,domain_calculate(): convert time from Pacific Time (PT) to Eastern Time (ET).,time in Pacific Time,time in Eastern Time,"[{'input': '2:30 AM,Mon,Aug 17,2015', 'output': '5:30 AM,Mon,Aug,2015'}, {'input': '11:00 PM,Sun,Aug 2,2015', 'output': '2:00 AM,Mon,Aug 3,2015'}, {'input': '3:30 AM,Mon,Feb 2,2015', 'output': '6:30 AM,Mon,Feb 2,2015'}, {'input': '10:00 PM,Sun,Aug 2,2015', 'output': '1:00 AM,Mon,Aug 3,2015'}, {'input': '2:30 AM,Mon,Feb 2,2015', 'output': '5:30 AM,Mon,Feb 2,2015'}]"
benchmark-bing-query-logs/semantic_23,convert address to gps coordinates,transform(): convert a physical address to GPS coordinates (latitude and longitude).,address,"GPS coordinates (latitude, longitude)","[{'input': '400 Bellevue Way Northeast, Bellevue, WA, USA', 'output': '47.615570, -122.202522'}, {'input': '3002 Mt Angeles Rd, Port Angeles, WA, USA', 'output': '48.099339, -123.425532'}, {'input': '2329 West Mall, Vancouver, BC V6T 1Z4, Canada', 'output': '49.261375, -123.253672'}, {'input': '1 microsoft way, redmond, wa, 98052', 'output': '47.639583, -122.128381'}, {'input': '14820 36th st ne redmond, wa, 98052', 'output': '47.642095, -122.142068'}]"
benchmark-bing-query-logs/semantic_24,convert hex to rgb,domain_map(): convert a hexadecimal color code to its RGB representation.,hexadecimal color code,RGB representation,"[{'input': '#000000', 'output': '0,0,0'}, {'input': '#00FF00', 'output': '0,255,0'}, {'input': '#FF00FF', 'output': '255,0,255'}, {'input': '#FFFF3F', 'output': '255,255,63'}, {'input': '#223344', 'output': '34,51,68'}]"
benchmark-bing-query-logs/semantic_25,convert hijri to gregorian,domain_map(): Convert a given Hijri date to Gregorian date.,a Hijri date,return the corresponding Gregorian date,"[{'input': '11 Shawwal 1430', 'output': 'Wednesday 30 September 2009 C.E'}, {'input': '5 Muharram 1300', 'output': 'Thursday 16 November 1882 C.E'}, {'input': '19 Rajab 1460', 'output': 'Friday 20 August 2038 C.E'}, {'input': '6 Muharram 1300', 'output': 'Friday 17 November 1882 C.E'}, {'input': '1 Muharram 1431', 'output': 'Friday 18 December 2009 C.E'}]"
benchmark-bing-query-logs/semantic_26,convert ascii to hex,domain_map(): Convert a given ASCII character to its hexadecimal representation.,an ASCII character,a hexadecimal value,"[{'input': 'DC2', 'output': '12'}, {'input': 'RS', 'output': '1E'}, {'input': '#', 'output': '23'}, {'input': 'D', 'output': '44'}, {'input': '""', 'output': '22'}]"
benchmark-bing-query-logs/semantic_27,convert psia to psig,unit_convert(): Convert a given pressure in psia to psig.,a pressure in psia,the corresponding pressure in psig,"[{'input': '33 psia', 'output': '18.304051 psig'}, {'input': '17 psia', 'output': '2.304051 psig'}, {'input': '100 psia', 'output': '85.304051 psig'}, {'input': '22 psia', 'output': '7.304051 psig'}, {'input': '3 psia', 'output': '-11.695949 psig'}]"
benchmark-bing-query-logs/semantic_28,convert decimal minutes to time,domain_calculate(): Convert a given number of decimal minutes to a time format (HH:MM:SS).,a number of decimal minutes,a time in HH:MM:SS format,"[{'input': '1439', 'output': '23:59:00'}, {'input': '60', 'output': '01:00:00'}, {'input': '95', 'output': '01:35:00'}, {'input': '64', 'output': '01:04:00'}, {'input': '91', 'output': '01:31:00'}]"
benchmark-bing-query-logs/semantic_29,convert decimal degrees to degrees minutes seconds,"domain_calculate(): Convert a given number of decimal degrees to degrees, minutes, and seconds format.",a number of decimal degrees,"a representation in degrees, minutes, and seconds format","[{'input': '4', 'output': '4 0\' 0""'}, {'input': '11.35', 'output': '11 20\' 60""'}, {'input': '129.45', 'output': '129 26\' 60""'}, {'input': '23', 'output': '23 0\' 0""'}, {'input': '21', 'output': '21 26\' 24""'}]"
benchmark-bing-query-logs/semantic_3,convert to fractional notation,format(): convert a float to a fractional notation,a float,a fractional notation,"[{'input': 0.003, 'output': '3/1000'}, {'input': 0.125, 'output': '1/8'}, {'input': 4.5, 'output': '9/2'}, {'input': 0.25, 'output': '1/4'}, {'input': 0.2, 'output': '1/5'}]"
benchmark-bing-query-logs/semantic_30,convert lat long to MGRS,transform(): Convert a given latitude and longitude to MGRS format.,latitude and longitude,the corresponding MGRS coordinate,"[{'input': '23.11, -39.33', 'output': '24QVL6620855735'}, {'input': '44.11, -77.33', 'output': '18TUP1353886730'}, {'input': '66.99, -33.11', 'output': '25WDQ9520130269'}, {'input': '23.33, -39.55', 'output': '24QVL4377280158'}, {'input': '44.22, -77.44', 'output': '18TUP0509799203'}]"
benchmark-bing-query-logs/semantic_31,convert women's shoe size to men's,domain_map(): Convert a given women's shoe size to the corresponding men's shoe size.,women's shoe size,corresponding men's shoe size,"[{'input': '7.5', 'output': '6'}, {'input': '14', 'output': '12.5'}, {'input': '8', 'output': '6.5'}, {'input': '7', 'output': '5.5'}, {'input': '9', 'output': '7.5'}]"
benchmark-bing-query-logs/semantic_32,convert excel date to datetime,domain_calculate(): Convert a given Excel date to the corresponding datetime format.,Excel date,datetime in format MM/dd/yyyy,"[{'input': '39938', 'output': '05/05/2009'}, {'input': '39934', 'output': '05/01/2009'}, {'input': '39958', 'output': '05/25/2009'}, {'input': '36557', 'output': '02/01/2000'}, {'input': '39270', 'output': '07/07/2007'}]"
benchmark-bing-query-logs/semantic_33,convert decimal to octal,domain_calculate(): Convert a given decimal number to its octal representation.,decimal number,octal representation,"[{'input': '2358', 'output': '4466'}, {'input': '198645', 'output': '603765'}, {'input': '33', 'output': '41'}, {'input': '232', 'output': '350'}, {'input': '1234', 'output': '2322'}]"
benchmark-bing-query-logs/semantic_34,convert rgb to pantone,domain_map(): Convert RGB color values to their corresponding Pantone color codes.,"RGB color values in format R,G,B",Pantone color code,"[{'input': '244,237,124', 'output': '100'}, {'input': '244,237,71', 'output': '101'}, {'input': '249,232,20', 'output': '102'}, {'input': '249,214,22', 'output': '109'}, {'input': '198,160,12', 'output': '117'}]"
benchmark-bing-query-logs/semantic_35,convert yyyymmdd to datetime,format(): Convert a date in yyyymmdd format to a human-readable datetime format.,date in yyyymmdd format,"datetime in format 'MMM dd, yyyy'","[{'input': '19851231', 'output': 'Dec 31, 1985'}, {'input': '19811120', 'output': 'Nov 20, 1981'}, {'input': '20110301', 'output': 'Mar 01, 2011'}, {'input': '19841121', 'output': 'Nov 21, 1984'}, {'input': '20210311', 'output': 'Mar 11, 2021'}]"
benchmark-bing-query-logs/semantic_36,convert month number to month name,domain_map(): Convert a month number to its corresponding month name.,month number,month name,"[{'input': '4', 'output': 'April'}, {'input': '7', 'output': 'July'}, {'input': '12', 'output': 'December'}, {'input': '10', 'output': 'October'}, {'input': '3', 'output': 'March'}]"
benchmark-bing-query-logs/semantic_37,convert m/s to mph,unit_convert(): Convert a speed from meters per second to miles per hour.,speed in m/s,speed in mph,"[{'input': '2', 'output': '4.473873'}, {'input': '89', 'output': '199.0873'}, {'input': '123', 'output': '275.1432'}, {'input': '12', 'output': '26.84324'}, {'input': '33', 'output': '73.81890'}]"
benchmark-bing-query-logs/semantic_38,convert mgrs to lat long,domain_calculate(): Convert a Military Grid Reference System (MGRS) coordinate to its latitude and longitude representation.,MGRS coordinate,latitude and longitude,"[{'input': '12U UA 84323 40791', 'output': '50.00820, -112.61440'}, {'input': '15S WC 80817 51205', 'output': '38.40543, -92.07440'}, {'input': '19T DJ 38588 97366', 'output': '44.22694, -69.76892'}, {'input': '12U UA 87466 40791', 'output': '50.00880, -112.57055'}, {'input': '15S WC 40817 12345', 'output': '38.05793, -92.53473'}]"
benchmark-bing-query-logs/semantic_39,convert mixed number to decimal,domain_calculate(): Convert a mixed number to its decimal representation.,"mixed number, space separated",decimal representation,"[{'input': '2 1/2', 'output': '2.5'}, {'input': '51 3/4', 'output': '51.75'}, {'input': '112', 'output': '112'}, {'input': '7 2/5', 'output': '7.4'}, {'input': '3 1/4', 'output': '3.25'}, {'input': '1 1/8', 'output': '1.125'}]"
benchmark-bing-query-logs/semantic_4,convert hex to ascii,domain_map(): convert hexadecimal values to their ASCII character equivalents.,hexadecimal value,ASCII character,"[{'input': '34', 'output': '4'}, {'input': '55', 'output': 'U'}, {'input': '74', 'output': 't'}, {'input': '44', 'output': 'D'}, {'input': '22', 'output': '""'}]"
benchmark-bing-query-logs/semantic_41,convert Geographic Coordinate to nad83,domain_calculate(): Convert geographic coordinates to NAD83 format.,"latitude, longitude","NAD83 latitude, NAD83 longitude","[{'input': '38.889139, -77.04942', 'output': '38.8892509, -77.0491194'}, {'input': '28.889139, -77.1234', 'output': '28.8894274, -77.1230153'}, {'input': '42.889139, -75.1234', 'output': '42.8892103, -75.1230043'}, {'input': '33.889139, -77.1234', 'output': '33.8893138, -77.1230692'}, {'input': '36.889139, -76.1234', 'output': '36.8892866, -76.1230571'}]"
benchmark-bing-query-logs/semantic_42,convert to hexadecimal,domain_calculate(): Convert decimal numbers to hexadecimal representation.,decimal number,hexadecimal number,"[{'input': '214633', 'output': '34669'}, {'input': '1246367', 'output': '13049F'}, {'input': '9872031', 'output': '96A29F'}, {'input': '323', 'output': '143'}, {'input': '123234', 'output': '1E162'}]"
benchmark-bing-query-logs/semantic_43,convert grams to ounces and pounds,unit_convert(): Convert grams to pounds and ounces.,weight in grams,weight in pounds and ounces,"[{'input': '32g', 'output': '0lb 1.128767oz'}, {'input': '1000g', 'output': '2lb 3.273965oz'}, {'input': '3400g', 'output': '7lb 7.931480oz'}, {'input': '222g', 'output': '0lb 7.830820oz'}, {'input': '123g', 'output': '0lb 4.338698oz'}]"
benchmark-bing-query-logs/semantic_44,convert pst to est,domain_calculate(): Convert Pacific Standard Time (PST) to Eastern Standard Time (EST).,time in PST,time in EST,"[{'input': '9:41 PM, Aug 17, 2015', 'output': '12:41 AM, Aug 18, 2015'}, {'input': '1:00 AM, Jun 3, 2015', 'output': '4:00 AM, Jun 3, 2015'}, {'input': '10:00 AM, Mar 20, 2015', 'output': '1:00 PM, Mar 20, 2015'}, {'input': '5:00 AM, Jun 5, 2015', 'output': '8:00 AM, Jun 5, 2015'}, {'input': '11:00 AM, Mar 20, 2015', 'output': '2:00 PM, Mar 20, 2015'}]"
benchmark-bing-query-logs/semantic_45,convert minutes to hundredths,domain_calculate(): Convert minutes to hundredths of an hour.,time in minutes,time in hundredths of an hour,"[{'input': '13 minutes', 'output': '.22'}, {'input': '43 minutes', 'output': '.72'}, {'input': '58 minutes', 'output': '.97'}, {'input': '15 minutes', 'output': '.25'}, {'input': '44 minutes', 'output': '.73'}]"
benchmark-bing-query-logs/semantic_46,convert mixed fraction to decimal,domain_calculate(): Convert mixed fractions to decimal numbers.,mixed fraction,decimal number,"[{'input': '7 1/4', 'output': '7.25'}, {'input': '21 2/5', 'output': '21.4'}, {'input': '129', 'output': '129'}, {'input': '6 9/100', 'output': '6.09'}, {'input': '3 4/5', 'output': '3.8'}]"
benchmark-bing-query-logs/semantic_47,convert central time to eastern time,domain_calculate(): Convert Central Time to Eastern Time.,time in Central Time,time in Eastern Time,"[{'input': '11:47 PM,Mon,Aug 17,2015', 'output': '12:47 AM,Tue,Aug 18,2015'}, {'input': '7:00 AM,Tue,Jul 7,2015', 'output': '8:00 AM,Tue,Jul 7,2015'}, {'input': '1:30 AM,Thu,May 14,2015', 'output': '2:30 AM,Thu,May 14,2015'}, {'input': '3:30 AM,Thu,May 14,2015', 'output': '4:30 AM,Thu,May 14,2015'}, {'input': '1:11 AM,Thu,May 21,2015', 'output': '2:11 AM,Thu,May 21,2015'}]"
benchmark-bing-query-logs/semantic_48,convert hourly wage to salary,domain_calculate(): Convert hourly wage to annual salary.,hourly wage,annual salary,"[{'input': '$12/hour', 'output': '$24,960.00'}, {'input': '$15/hour', 'output': '$31,200.00'}, {'input': '$40/hour', 'output': '$83,200.00'}, {'input': '$22/hour', 'output': '$45,760.00'}, {'input': '$11/hour', 'output': '$22,880.00'}]"
benchmark-bing-query-logs/semantic_49,convert polar to rectangular,domain_calculate(): Convert polar coordinates to rectangular coordinates.,"polar coordinates (r, θ)","rectangular coordinates (x, y)","[{'input': '(2, 4)', 'output': '(1.99513, 0.13951)'}, {'input': '(4, 60)', 'output': '(2.00000, 3.46410)'}, {'input': '(10, 30)', 'output': '(8.66025, 5.00000)'}, {'input': '(23, 35)', 'output': '(18.84050, 13.19226)'}, {'input': '(11, 22)', 'output': '(10.19902, 4.12067)'}]"
benchmark-bing-query-logs/semantic_5,convert to decimal notation,format(): convert fractions to their decimal equivalents.,fraction in the form of a/b,decimal representation,"[{'input': '1/4', 'output': '0.25'}, {'input': '200/4', 'output': '50'}, {'input': '9/100', 'output': '0.09'}, {'input': '3/4', 'output': '0.75'}, {'input': '1/2', 'output': '0.5'}]"
benchmark-bing-query-logs/semantic_50,convert to roman numerals,domain_calculate(): Convert decimal numbers to Roman numerals.,decimal number,Roman numeral,"[{'input': '4', 'output': 'IV'}, {'input': '1350', 'output': 'MCCCL'}, {'input': '981', 'output': 'CMLXXXI'}, {'input': '34', 'output': 'XXXIV'}, {'input': '11', 'output': 'XI'}]"
benchmark-bing-query-logs/semantic_6,convert rgb to hex,domain_map(): convert RGB values to their hexadecimal equivalents.,"RGB values in the form of r,g,b",hexadecimal representation,"[{'input': '255,255,255', 'output': '#FFFFFF'}, {'input': '238,130,238', 'output': '#EE82EE'}, {'input': '147,112,219', 'output': '#9370DB'}, {'input': '219,112,147', 'output': '#DB7093'}, {'input': '34,139,34', 'output': '#228B22'}]"
benchmark-bing-query-logs/semantic_7,convert decimal to hex,domain_map(): convert decimal numbers to their hexadecimal equivalents.,decimal number,hexadecimal representation,"[{'input': 22, 'output': '16'}, {'input': 2156, 'output': '86C'}, {'input': 9876, 'output': '2694'}, {'input': 323, 'output': '143'}, {'input': 123234, 'output': '1E162'}]"
benchmark-bing-query-logs/semantic_8,convert utm to lat long,domain_calculate(): convert UTM coordinates to their corresponding latitude and longitude.,UTM coordinates in the form of easting and northing,latitude and longitude in degrees,"[{'input': '583662mE, 3589556mN', 'output': '32.44N, 44.11E'}, {'input': '429797mE, 3996430mN', 'output': '36.11N, 80.22E'}, {'input': '413642mE, 1196188mN', 'output': '10.82N, 20.21E'}, {'input': '533791mE, 2555735mN', 'output': '23.11N, 39.33E'}, {'input': '715740mE, 2581625mN', 'output': '23.33N, 23.11E'}]"
benchmark-bing-query-logs/semantic_9,convert cm to feet and inches,unit_convert(): convert centimeters to feet and inches.,a length in centimeters,length in feet and inches,"[{'input': '3 cm', 'output': '0 feet and 1.1811 inches'}, {'input': '870 cm', 'output': '28 feet and 6.5197 inches'}, {'input': '69 cm', 'output': '2 feet and 3.1654 inches'}, {'input': '44 cm', 'output': '1 feet and 5.3228 inches'}, {'input': '555 cm', 'output': '18 feet and 2.5039 inches'}]"
benchmark-bing-query-logs/unit_1,Convert mm to inches.,unit_convert(): Convert millimeters to inches.,mm,inches,"[{'input': '1 mm', 'output': '0.0393701 inch'}, {'input': '8 mm', 'output': '0.314961 inch'}, {'input': '17 mm', 'output': '0.669291 inch'}, {'input': '33 mm', 'output': '1.29921 inch'}, {'input': '22 mm', 'output': '0.866142 inch'}]"
benchmark-bing-query-logs/unit_11,Convert kilometers to miles.,unit_convert(): Convert kilometers to miles.,kilometers,miles,"[{'input': '5 km', 'output': '3.10685596 mile'}, {'input': '18 km', 'output': '11.1846815 mile'}, {'input': '1349 km', 'output': '838.229738 mile'}, {'input': '3 km', 'output': '1.86411358 mile'}, {'input': '33 km', 'output': '20.5052493 mile'}]"
benchmark-bing-query-logs/unit_12,Convert inches to feet.,unit_convert(): Convert inches to feet.,inches,feet,"[{'input': '3 inch', 'output': '0.25 feet'}, {'input': '37 inch', 'output': '3.08333333 feet'}, {'input': '12 inch', 'output': '1 feet'}, {'input': '169 inch', 'output': '14.0833333 feet'}, {'input': '44 inch', 'output': '3.66666667 feet'}]"
benchmark-bing-query-logs/unit_13,Convert pounds to kilograms.,unit_convert(): Convert pounds to kilograms.,pounds,kilograms,"[{'input': '17 b', 'output': '7.71107 kg'}, {'input': '39 b', 'output': '17.6901 kg'}, {'input': '198 b', 'output': '89.8113 kg'}, {'input': '33 b', 'output': '14.9685 kg'}, {'input': '12 b', 'output': '5.44311 kg'}]"
benchmark-bing-query-logs/unit_15,Convert meter to feet.,unit_convert(): Convert meters to feet.,meters,feet,"[{'input': '8 m', 'output': '26.2467 feet'}, {'input': '259 m', 'output': '849.738 feet'}, {'input': '387 m', 'output': '1269.69 feet'}, {'input': '333 m', 'output': '1092.52 feet'}, {'input': '888 m', 'output': '2913.39 feet'}]"
benchmark-bing-query-logs/unit_16,Convert grams to pounds.,unit_convert(): Convert grams to pounds.,grams,pounds,"[{'input': '6 g', 'output': '0.01322774 b'}, {'input': '89 g', 'output': '0.19621141 b'}, {'input': '100 g', 'output': '0.22046226 b'}, {'input': '66 g', 'output': '0.14550509 b'}, {'input': '23 g', 'output': '0.05070632 b'}]"
benchmark-bing-query-logs/unit_17,Convert liters to gallons.,unit_convert(): Convert liters to gallons.,liters,gallons,"[{'input': '7 L', 'output': '1.8492 gal'}, {'input': '15 L', 'output': '3.96258 gal'}, {'input': '98 L', 'output': '25.8889 gal'}, {'input': '33 L', 'output': '8.71768 gal'}, {'input': '17 L', 'output': '4.49092 gal'}]"
benchmark-bing-query-logs/unit_20,Convert grams to ounces.,unit_convert(): Convert grams to ounces.,grams,ounces,"[{'input': '1 g', 'output': '0.03527396 oz'}, {'input': '30 g', 'output': '1.05821886 oz'}, {'input': '1500 g', 'output': '52.910943 oz'}, {'input': '3 g', 'output': '0.10582189 oz'}, {'input': '23 g', 'output': '0.81130113 oz'}]"
benchmark-bing-query-logs/unit_22,Convert milliliters to ounces.,unit_convert(): Convert milliliters to ounces.,ml,oz,"[{'input': '10 ml', 'output': '0.33814023 oz'}, {'input': '39 ml', 'output': '1.31874689 oz'}, {'input': '200 ml', 'output': '6.76280455 oz'}, {'input': '3 ml', 'output': '0.10144207 oz'}, {'input': '30 ml', 'output': '1.01442068 oz'}]"
benchmark-bing-query-logs/unit_24,Convert centimeters to feet.,unit_convert(): Convert centimeters to feet.,cm,feet,"[{'input': '4 cm', 'output': '0.131234 feet'}, {'input': '17 cm', 'output': '0.557743 feet'}, {'input': '201 cm', 'output': '6.59449 feet'}, {'input': '3 cm', 'output': '0.0984252 feet'}, {'input': '2 cm', 'output': '0.0656168 feet'}]"
benchmark-bing-query-logs/unit_25,Convert Fahrenheit to Celsius.,unit_convert(): Convert Fahrenheit to Celsius.,fahrenheit,celsius,"[{'input': '19 fahrenheit', 'output': '-7.22222 celsius'}, {'input': '100 fahrenheit', 'output': '37.7778 celsius'}, {'input': '350 fahrenheit', 'output': '176.667 celsius'}, {'input': '1 fahrenheit', 'output': '-17.2222 celsius'}, {'input': '123 fahrenheit', 'output': '50.5556 celsius'}]"
benchmark-bing-query-logs/unit_26,Convert grams to cups.,unit_convert(): Convert grams to cups.,grams,cups,"[{'input': '2 grams', 'output': '0.00845 cups'}, {'input': '15 grams', 'output': '0.0634 cups'}, {'input': '50 grams', 'output': '0.21134 cups'}, {'input': '25 grams', 'output': '0.10567 cups'}, {'input': '10 grams', 'output': '0.04227 cups'}]"
benchmark-bing-query-logs/unit_27,Convert feet to inches.,unit_convert(): Convert feet to inches.,feet,inches,"[{'input': '2 feet', 'output': '24 inches'}, {'input': '30 feet', 'output': '360 inches'}, {'input': '53 feet', 'output': '636 inches'}, {'input': '44 feet', 'output': '528 inches'}, {'input': '23 feet', 'output': '276 inches'}]"
benchmark-bing-query-logs/unit_28,Convert millimeters to centimeters.,unit_convert(): Convert millimeters to centimeters.,mm,cm,"[{'input': '9 mm', 'output': '0.9 cm'}, {'input': '145 mm', 'output': '14.5 cm'}, {'input': '23 mm', 'output': '2.3 cm'}, {'input': '3 mm', 'output': '0.3 cm'}, {'input': '199 mm', 'output': '19.9 cm'}]"
benchmark-bing-query-logs/unit_29,Convert square feet to acres.,unit_convert(): Convert square feet to acres.,square feet,acres,"[{'input': '45 square feet', 'output': '0.00103306 acres'}, {'input': '120 square feet', 'output': '0.00275482 acres'}, {'input': '2300 square feet', 'output': '0.05280073 acres'}, {'input': '1300 square feet', 'output': '0.02984389 acres'}, {'input': '890 square feet', 'output': '0.02043159 acres'}]"
benchmark-bing-query-logs/unit_3,Convert celsius to fahrenheit.,unit_convert(): Convert Celsius to Fahrenheit.,Celsius,Fahrenheit,"[{'input': '1 Celsius', 'output': '33.8 Fahrenheit'}, {'input': '7 Celsius', 'output': '44.6 Fahrenheit'}, {'input': '18 Celsius', 'output': '64.4 Fahrenheit'}, {'input': '-17.2222 Celsius', 'output': '1 Fahrenheit'}, {'input': '50.5556 Celsius', 'output': '123 Fahrenheit'}]"
benchmark-bing-query-logs/unit_30,Convert inches to centimeters.,unit_convert(): Convert inches to centimeters.,inches,centimeters,"[{'input': '1 inch', 'output': '2.54 cm'}, {'input': '23 inch', 'output': '58.42 cm'}, {'input': '921 inch', 'output': '2339.34 cm'}, {'input': '13 inch', 'output': '33.02 cm'}, {'input': '22 inch', 'output': '55.88 cm'}]"
benchmark-bing-query-logs/unit_31,Convert kilobytes to megabytes.,unit_convert(): Convert kilobytes to megabytes.,kb,mb,"[{'input': '3 kb', 'output': '0.003 mb'}, {'input': '59 kb', 'output': '0.059 mb'}, {'input': '140 kb', 'output': '0.14 mb'}, {'input': '2 kb', 'output': '0.002 mb'}, {'input': '123 kb', 'output': '0.123 mb'}]"
benchmark-bing-query-logs/unit_32,Convert ounces to grams.,unit_convert(): Convert ounces to grams.,oz,g,"[{'input': '3 oz', 'output': '85.0486 g'}, {'input': '19 oz', 'output': '538.641 g'}, {'input': '320 oz', 'output': '9071.85 g'}, {'input': '11 oz', 'output': '311.845 g'}, {'input': '23 oz', 'output': '652.039 g'}]"
benchmark-bing-query-logs/unit_34,Convert gallons to cups.,unit_convert(): Convert gallons to cups.,gallons,cups,"[{'input': '1 gallons', 'output': '16 cups'}, {'input': '3 gallons', 'output': '48 cups'}, {'input': '11 gallons', 'output': '176 cups'}, {'input': '15 gallons', 'output': '240 cups'}]"
benchmark-bing-query-logs/unit_35,Convert euros to dollars.,unit_convert(): Convert euros to dollars.,euro,dollar,"[{'input': '8 euro', 'output': '8.86 dollar'}, {'input': '67 euro', 'output': '74.20 dollar'}, {'input': '360 euro', 'output': '398.70 dollar'}, {'input': '21 euro', 'output': '23.26 dollar'}, {'input': '11 euro', 'output': '12.18 dollar'}]"
benchmark-bing-query-logs/unit_37,Convert megabytes to gigabytes.,unit_convert(): Convert megabytes to gigabytes.,mb,gb,"[{'input': '1 mb', 'output': '0.001 gb'}, {'input': '790 mb', 'output': '0.790 gb'}, {'input': '49 mb', 'output': '0.049 gb'}, {'input': '744 mb', 'output': '0.744 gb'}, {'input': '42 mb', 'output': '0.042 gb'}]"
benchmark-bing-query-logs/unit_38,Convert Celsius to Kelvin.,unit_convert(): Convert Celsius to Kelvin.,Celsius,Kelvin,"[{'input': '1 Celsius', 'output': '274.15 Kelvin'}, {'input': '12 Celsius', 'output': '285.15 Kelvin'}, {'input': '12.3 Celsius', 'output': '285.45 Kelvin'}, {'input': '188 Celsius', 'output': '461.15 Kelvin'}, {'input': '24 Celsius', 'output': '297.15 Kelvin'}]"
benchmark-bing-query-logs/unit_39,Convert ounces to pounds.,unit_convert(): Convert ounces to pounds.,oz,lb,"[{'input': '3 oz', 'output': '0.1875 lb'}, {'input': '862 oz', 'output': '53.875 lb'}, {'input': '51 oz', 'output': '3.1875 lb'}, {'input': '1 oz', 'output': '0.0625 lb'}, {'input': '5 oz', 'output': '0.3125 lb'}]"
benchmark-bing-query-logs/unit_4,Convert kg to lbs.,unit_convert(): Convert kilograms to pounds.,kg,lbs,"[{'input': '3 kg', 'output': '6.61387 b'}, {'input': '7 kg', 'output': '15.4324 b'}, {'input': '11 kg', 'output': '24.2508 b'}, {'input': '23 kg', 'output': '50.7063 b'}, {'input': '1 kg', 'output': '2.20462 b'}]"
benchmark-bing-query-logs/unit_40,Convert meters to miles.,unit_convert(): Convert meters to miles.,meters,miles,"[{'input': '5 meter', 'output': '0.00310686 mile'}, {'input': '180 meter', 'output': '0.111847 mile'}, {'input': '92 meter', 'output': '0.0571661 mile'}, {'input': '23 meter', 'output': '0.0142915 mile'}, {'input': '11 meter', 'output': '0.00683508 mile'}]"
benchmark-bing-query-logs/unit_41,Convert pounds to grams.,unit_convert(): Convert pounds to grams.,pounds,grams,"[{'input': '1 lb', 'output': '453.59237 g'}, {'input': '502 lb', 'output': '227703.37 g'}, {'input': '76 lb', 'output': '34473.0201 g'}, {'input': '234 lb', 'output': '106140.614 g'}, {'input': '122 lb', 'output': '55338.2691 g'}]"
benchmark-bing-query-logs/unit_42,Convert ounces to cups.,unit_convert(): Convert ounces to cups.,oz,cups,"[{'input': '2 oz', 'output': '0.25 cup'}, {'input': '1988 oz', 'output': '248.5 cup'}, {'input': '37 oz', 'output': '4.625 cup'}, {'input': '33 oz', 'output': '4.125 cup'}, {'input': '123 oz', 'output': '15.375 cup'}]"
benchmark-bing-query-logs/unit_43,Convert meters to inches.,unit_convert(): Convert meters to inches.,meters,inches,"[{'input': '1 m', 'output': '39.3700787 inch'}, {'input': '1856 m', 'output': '73070.8661 inch'}, {'input': '200 m', 'output': '7874.01575 inch'}, {'input': '188 m', 'output': '7401.5748 inch'}, {'input': '33 m', 'output': '1299.2126 inch'}]"
benchmark-bing-query-logs/unit_44,Convert pounds to dollars.,unit_convert(): Convert pounds to dollars.,pounds,dollars,"[{'input': '1 pound', 'output': '1.57 dollar'}, {'input': '300 pound', 'output': '470.78 dollar'}, {'input': '2100 pound', 'output': '3295.45 dollar'}, {'input': '123 pound', 'output': '193.02 dollar'}, {'input': '444 pound', 'output': '696.75 dollar'}]"
benchmark-bing-query-logs/unit_45,Convert square meters to square feet.,unit_convert(): Convert square meters to square feet.,square meters,square feet,"[{'input': '4 square meters', 'output': '43.0556417 square feet'}, {'input': '560 square meters', 'output': '6027.78983 square feet'}, {'input': '2000 square meters', 'output': '21527.8208 square feet'}, {'input': '42 square meters', 'output': '452.084238 square feet'}, {'input': '323 square meters', 'output': '3476.74306 square feet'}]"
benchmark-bing-query-logs/unit_46,Convert square feet to square yards.,unit_convert(): Convert square feet to square yards.,square feet,square yards,"[{'input': '9 square feet', 'output': '1 square yards'}, {'input': '390 square feet', 'output': '43.3333333 square yards'}, {'input': '2456 square feet', 'output': '272.888889 square yards'}, {'input': '123 square feet', 'output': '13.6666667 square yards'}, {'input': '872 square feet', 'output': '96.8888889 square yards'}]"
benchmark-bing-query-logs/unit_47,Convert inches to meters.,unit_convert(): Convert inches to meters.,inches,meters,"[{'input': '4 inch', 'output': '0.1016 m'}, {'input': '980 inch', 'output': '24.892 m'}, {'input': '2000 inch', 'output': '50.8 m'}, {'input': '321 inch', 'output': '8.1534 m'}, {'input': '111 inch', 'output': '2.8194 m'}]"
benchmark-bing-query-logs/unit_48,convert acres to square feet,unit_convert(): Convert the original acres to square feet,acres,square feet,"[{'input': '2 acres', 'output': '87120 square feet'}, {'input': '0.5 acres', 'output': '21780 square feet'}, {'input': '15 acres', 'output': '653400 square feet'}, {'input': '1 acres', 'output': '43560 square feet'}, {'input': '4 acres', 'output': '174240 square feet'}]"
benchmark-bing-query-logs/unit_49,convert liters to ounces,unit_convert(): Convert the original liters to ounces,liters,ounces,"[{'input': '1 L', 'output': '33.8140227 oz'}, {'input': '5870 L', 'output': '198488.313 oz'}, {'input': '35 L', 'output': '1183.4908 oz'}, {'input': '112 L', 'output': '3787.17055 oz'}, {'input': '99 L', 'output': '3347.58825 oz'}]"
benchmark-bing-query-logs/unit_5,Convert cm to inches.,unit_convert(): Convert centimeters to inches.,cm,inches,"[{'input': '1 cm', 'output': '0.39370079 inch'}, {'input': '5 cm', 'output': '1.96850394 inch'}, {'input': '6 cm', 'output': '2.36220472 inch'}, {'input': '2 cm', 'output': '0.78740157 inch'}, {'input': '3 cm', 'output': '1.18110236 inch'}]"
benchmark-bing-query-logs/unit_6,Convert feet to meters.,unit_convert(): Convert feet to meters.,feet,meters,"[{'input': '3 feet', 'output': '0.9144 m'}, {'input': '7 feet', 'output': '2.1336 m'}, {'input': '18 feet', 'output': '5.4864 m'}, {'input': '4 feet', 'output': '1.2192 m'}, {'input': '22 feet', 'output': '6.7056 m'}]"
benchmark-bing-query-logs/unit_7,Convert dollars to euros.,unit_convert(): Convert US dollars to euros.,US Dollar,euros,"[{'input': '3 US Dollar', 'output': '2.72 euros'}, {'input': '21 US Dollar', 'output': '19.02 euros'}, {'input': '111 US Dollar', 'output': '100.56 euros'}, {'input': '33 US Dollar', 'output': '29.90 euros'}, {'input': '12 US Dollar', 'output': '10.87 euros'}]"
benchmark-bing-query-logs/unit_8,Convert inches to mm.,unit_convert(): Convert inches to millimeters.,inches,mm,"[{'input': '3 inch', 'output': '76.2 mm'}, {'input': '17 inch', 'output': '431.8 mm'}, {'input': '100 inch', 'output': '2540 mm'}, {'input': '13 inch', 'output': '330.2 mm'}, {'input': '33 inch', 'output': '838.2 mm'}]"
benchmark-bing-query-logs/unit_9,Convert miles to kilometers.,unit_convert(): Convert miles to kilometers.,miles,kilometers,"[{'input': '15 mile', 'output': '24.1402 km'}, {'input': '19 mile', 'output': '30.5775 km'}, {'input': '240 mile', 'output': '386.243 km'}, {'input': '33 mile', 'output': '53.1084 km'}, {'input': '11 mile', 'output': '17.7028 km'}]"
benchmark-headcase/datetime_diff_transformation,date time roll back 1 hour,domain_calculate(): Roll back the datetime value by 1 hour,original datetime value,datetime value rolled back by 1 hour,"[{'input': '2007/02/26 18:37:58', 'output': '2007/02/26 17:37:58'}, {'input': '2008/02/26 17:37:58', 'output': '2008/02/26 16:37:58'}, {'input': '2000/02/26 00:37:50', 'output': '2000/02/25 23:37:50'}, {'input': '2009/02/26 16:37:58', 'output': '2009/02/26 15:37:58'}, {'input': '2000/02/26 11:37:50', 'output': '2000/02/26 10:37:50'}]"
benchmark-headcase/funct_bytesize,covert raw size to byte size,transform(): Convert the original size to byte size,raw size,byte size,"[{'input': '10B', 'output': '10 Bytes'}, {'input': '100 KB', 'output': '102400 Bytes'}, {'input': '1000MB', 'output': '1048576000 Bytes'}, {'input': '1b', 'output': '0.125 Bytes'}, {'input': '100 B', 'output': '100 Bytes'}, {'input': '1GB', 'output': '1073741824 Bytes'}]"
benchmark-headcase/funct_bytesize2,covert raw size to byte size and present in standard format,transform(): Convert the original size to byte size and present in standard format,raw size,byte size in standard format,"[{'input': '10B', 'output': '10 Bytes'}, {'input': '100 KB', 'output': '102,400 Bytes'}, {'input': '1000MB', 'output': '1,048,576,000 Bytes'}, {'input': '1b', 'output': '0.125 Bytes'}, {'input': '100 B', 'output': '100 Bytes'}, {'input': '1GB', 'output': '1,073,741,824 Bytes'}]"
benchmark-headcase/funct_bytesize3,covert raw size to byte size and present in scientific notation,transform(): Convert the original size to byte size and present in scientific notation,raw size,byte size in scientific notation with 2 decimal places,"[{'input': '10B', 'output': '1.00E1 Bytes'}, {'input': '100 KB', 'output': '1.02E5 Bytes'}, {'input': '1000MB', 'output': '1.05E9 Bytes'}, {'input': '1b', 'output': '1.25E-1 Bytes'}, {'input': '100 B', 'output': '1.00E2 Bytes'}, {'input': '1GB', 'output': '1.07E9 Bytes'}]"
benchmark-headcase/funct_comp_address_city,extract city from address,extract(): Extract the city from the given address,full address,city,"[{'input': '1 microsoft way, redmond, wa, 98052', 'output': 'Redmond'}, {'input': '1201 super commerce blvd Ste H, Richmond, VA, 23452', 'output': 'Richmond'}, {'input': '100 sunset blvd, room 301, Beverley Hills California', 'output': 'Beverley Hills'}, {'input': '32 super blvd Ste H, Riverside California', 'output': 'Riverside'}, {'input': '100 turing way, Redmond, wa, 98052', 'output': 'Redmond'}]"
benchmark-headcase/funct_comp_address_secondaryline,extract secondary line from address,extract(): Extract the secondary line from the given address,full address,secondary line,"[{'input': '1 microsoft way, redmond, wa, 98052', 'output': ''}, {'input': '1201 super commerce blvd Ste H, Richmond, VA, 23452', 'output': 'STE H'}, {'input': '100 sunset blvd, Room 301, Sacramento California', 'output': 'RM 301'}, {'input': '747 6th St, room 1010, Kirkland, WA 98033', 'output': 'ROOM 1010'}, {'input': '10 commerce way ste a, Richmond, VA, 23452', 'output': 'STE A'}]"
benchmark-headcase/funct_comp_address_state,extract state from address,extract(): Extract the state from the given address,full address,state,"[{'input': '1 microsoft way, redmond, wa, 98052', 'output': 'WA'}, {'input': '1201 super commerce blvd Ste H, Richmond, VA, 23452', 'output': 'VA'}, {'input': '100 sunset blvd, room 301, Sacramento California', 'output': 'CA'}, {'input': '747 6th St S, Kirkland, WA 98033', 'output': 'WA'}, {'input': '10 commerce way, Richmond, VA, 23452', 'output': 'VA'}]"
benchmark-headcase/funct_comp_address_street,extract street from address,extract(): Extract the street from the given address,full address,street,"[{'input': '1 microsoft way, redmond, wa, 98052', 'output': 'microsoft way'}, {'input': '5 super commerce place blvd Ste H, Richmond, VA, 23452', 'output': 'super commerce place blvd'}, {'input': '1001 sunset blvd, Room 301, Sacramento California', 'output': 'sunset blvd'}, {'input': '747 6th St room 111, Kirkland, WA 98033', 'output': '6th st'}, {'input': '10 commerce way, Richmond, VA, 23452', 'output': 'commerce way'}]"
benchmark-headcase/funct_comp_address_streetline,extract street line from address,extract(): Extract the street line from the given address,full address,street line,"[{'input': '1 microsoft way, redmond, wa, 98052', 'output': '1 microsoft way'}, {'input': '5 super commerce place blvd Ste H, Richmond, VA, 23452', 'output': '5 super commerce place blvd'}, {'input': '1001 sunset blvd, Room 301, Sacramento California', 'output': '1001 sunset blvd'}, {'input': '1730 Minor Ave, Seattle, WA 98101', 'output': '1730 minor ave'}, {'input': '100 main street, redmond, wa, 98052', 'output': '100 main street'}]"
benchmark-headcase/funct_comp_datetime,convert date to readable format,transform(): Convert the date to a readable format,original date,readable date,"[{'input': '2011-09-21', 'output': 'September 21'}, {'input': '2011-Jan-12', 'output': 'January 12'}, {'input': '7/1/2009', 'output': 'July 1'}, {'input': '2012-02-12', 'output': 'February 12'}, {'input': '6/1/2009 12:01:01', 'output': 'June 1'}]"
benchmark-headcase/funct_comp_datetime_timezone,compute date time by adding 12 hours and 30 minutes,domain_calculate(): Compute the datetime by adding 12 hours and 30 minutes,original datetime,shifted datetime,"[{'input': 'August 20, 2015, 16:11', 'output': 'August 21, 2015, 04:41'}, {'input': 'April 11, 2015, 15:14', 'output': 'April 12, 2015, 03:44'}, {'input': 'April 27, 2015, 10:00', 'output': 'April 27, 2015, 22:30'}, {'input': 'May 27, 2015, 01:00', 'output': 'May 27, 2015, 13:30'}, {'input': 'December 27, 2015, 15:00', 'output': 'December 28, 2015, 03:30'}]"
benchmark-headcase/funct_comp_pname,convert name to initial and last name,format(): Convert the name to initial and last name,full name,initial and last name,"[{'input': 'Doe, John', 'output': 'J. Doe'}, {'input': 'James Smith', 'output': 'J. Smith'}, {'input': 'Mr. Charles P. Wooten, III', 'output': 'C. Wooten'}, {'input': 'John Johnson', 'output': 'J. Johnson'}, {'input': 'Alice C. Doe', 'output': 'A. Doe'}]"
benchmark-headcase/funct_comp_pname_initials,convert name to initials,format(): Convert the name to initials,full name,initials,"[{'input': 'Doe, John', 'output': 'DJ'}, {'input': 'James Smith', 'output': 'SJ'}, {'input': 'Mr. Charles P. Wooten, III', 'output': 'WC'}, {'input': 'John Johnson', 'output': 'JJ'}, {'input': 'Alice Bob Doe', 'output': 'DA'}]"
benchmark-headcase/funct_comp_pname_lastname,extract last name from full name,extract(): Extract the last name from the full name,full name,last name,"[{'input': 'Doe, John', 'output': 'Doe'}, {'input': 'James Smith', 'output': 'Smith'}, {'input': 'Mr. Charles P. Wooten, III', 'output': 'Wooten'}, {'input': 'John Johnson', 'output': 'Johnson'}]"
benchmark-headcase/funct_comp_pname_middle,extract middle name from full name,extract(): Extract the middle name from the full name,full name,middle name initials,"[{'input': 'Mr. Charles P. Wooten, III', 'output': 'P'}, {'input': 'John Adam Johnson', 'output': 'A'}, {'input': 'Doe, John', 'output': ''}, {'input': 'James Bob Smith', 'output': 'B'}, {'input': 'Charlie Denis Edwards', 'output': 'D'}]"
benchmark-headcase/funct_cookie,extract domain from cookie,extract(): Extract the domain from the cookie,cookie string,domain,"[{'input': 'username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/', 'output': ''}, {'input': 'skin=noskin; path=/; domain=.amazon.com; expires=Mon, 22-Mar-2010 18:40:34 GMT;', 'output': '.amazon.com'}, {'input': 'path=/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.foo.com;', 'output': '.foo.com'}, {'input': 'path=/; domain=.microsoft.com; expires=Mon, 1-Mar-2010 18:40:34 GMT;', 'output': '.microsoft.com'}, {'input': 'path=/; expires=Wed, 13 Jan 2021 22:23:01 GMT; domain=.abc.com;', 'output': '.abc.com'}]"
benchmark-headcase/funct_datetime_daysofweek,parse day of the week from date,extract(): Parse the day of the week from the date,date,day of the week,"[{'input': '05/13/2015', 'output': 'Wednesday'}, {'input': '05/12/2015', 'output': 'Tuesday'}, {'input': '01/21/2014', 'output': 'Tuesday'}, {'input': '03/01/2013', 'output': 'Friday'}, {'input': '01/01/2014', 'output': 'Wednesday'}]"
benchmark-headcase/funct_datetime_month,parse month from date,extract(): Parse the month from the date,date,month name,"[{'input': '2011-10-11', 'output': 'October'}, {'input': '2011-Jan-12', 'output': 'January'}, {'input': '7/1/2009', 'output': 'July'}, {'input': '2012-02-12', 'output': 'February'}, {'input': '6/1/2009 12:01:01', 'output': 'June'}]"
benchmark-headcase/funct_datetime_month2,parse month number from date,extract(): Parse the month number from the date,date,month number,"[{'input': '2014-08-03', 'output': '8'}, {'input': '2011-04-01', 'output': '4'}, {'input': '01/31/2014', 'output': '1'}, {'input': '2/21/2009 10:35 PM', 'output': '2'}, {'input': 'February 26, 2009', 'output': '2'}, {'input': 'March 26, 2009', 'output': '3'}]"
benchmark-headcase/funct_domain_sld,parse second-level domain from URL,extract(): Parse the second-level domain from the URL,URL,second-level domain,"[{'input': 'www.news.cnn.com', 'output': 'cnn'}, {'input': 'cnn.co.uk', 'output': 'cnn'}, {'input': 'drive.google.ca', 'output': 'google'}, {'input': 'photos.twitter.com', 'output': 'twitter'}, {'input': 'www.photos.abc.com', 'output': 'abc'}]"
benchmark-headcase/funct_domain_tld,extract top-level domain from URL,extract(): Extract the top-level domain from the URL,URL,top-level domain,"[{'input': 'photos.facebook.co.uk', 'output': 'co.uk'}, {'input': 'photos.twitter.com', 'output': 'com'}, {'input': 'cnn.com.au', 'output': 'com.au'}, {'input': 'news.abc.com.ca', 'output': 'ca'}, {'input': 'cnbc.com', 'output': 'com'}]"
benchmark-headcase/funct_email,validate email address,transform(): Validate the email address,email address,validity boolean,"[{'input': 'Abcdef@example.com', 'output': 'true'}, {'input': 'very.common@example.com', 'output': 'true'}, {'input': 'A@b@c@example.com', 'output': 'false'}, {'input': 'good@example.com', 'output': 'true'}, {'input': 'A@b.com@example.com', 'output': 'false'}]"
benchmark-headcase/funct_expression,evaluate mathematical expression,domain_calculate(): Evaluate the mathematical expression,expression,result,"[{'input': '1 + 23', 'output': '24'}, {'input': '6/2', 'output': '3'}, {'input': '(1+3)/2', 'output': '2'}, {'input': '3 + 4', 'output': '7'}, {'input': '2 / 2 + 1', 'output': '2'}]"
benchmark-headcase/funct_iprange_begin,extract beginning of IP range,transform(): Extract the beginning of the IP range,IP range,beginning IP,"[{'input': '192.168.70.30-192.168.70.31', 'output': '192.168.70.31'}, {'input': 'fe80::/10', 'output': 'fe80::'}, {'input': 'fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586', 'output': 'fe80::d502:4ee:3882:c586'}, {'input': '192.168.100.0/22', 'output': '192.168.100.0'}, {'input': '192.168.100.14/24', 'output': '192.168.100.14'}]"
benchmark-headcase/funct_iprange_end,extract end of IP range,transform(): Extract the end of the IP range,IP range,end IP,"[{'input': '192.168.70.30-192.168.70.31', 'output': '192.168.70.31'}, {'input': 'fe80::/10', 'output': 'febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff'}, {'input': 'fe80::d501:4ee:3882:c586-fe80::d502:4ee:3882:c586', 'output': 'fe80::d502:4ee:3882:c586'}, {'input': '2001:db8::/48', 'output': '2001:db8:0:ffff:ffff:ffff:ffff:ffff'}]"
benchmark-headcase/funct_ipv4v6,convert IPv4 to IPv6,domain_calculate(): Convert the IPv4 address to IPv6,IPv4 address,IPv6 address,"[{'input': '102.3.1.2', 'output': '0:0:0:0:0:ffff:6603:102'}, {'input': '102.31.1.244', 'output': '0:0:0:0:0:ffff:661f:1f4'}, {'input': '20.55.255.255', 'output': '0:0:0:0:0:ffff:1437:ffff'}, {'input': '39.91.29.11', 'output': '0:0:0:0:0:ffff:275b:1d0b'}, {'input': '39.255.255.255', 'output': '0:0:0:0:0:ffff:27ff:ffff'}]"
benchmark-headcase/funct_isbn10to13,convert ISBN-10 to ISBN-13,domain_map(): Convert the ISBN-10 to ISBN-13,ISBN-10,ISBN-13,"[{'input': '0830818030', 'output': '978-0-8308-1803-7'}, {'input': '316148410X', 'output': '978-3-1614-8410-0'}, {'input': '1566199093', 'output': '978-1-56619-909-4'}, {'input': '0198526636', 'output': '978-0-19-852663-6'}, {'input': '1861972717', 'output': '978-1-86197-271-2'}]"
benchmark-headcase/funct_nmea_bearing,extract bearing from NMEA sentence,extract(): Extract the bearing from the NMEA sentence,NMEA sentence,bearing,"[{'input': '$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12', 'output': '62.01'}, {'input': '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28', 'output': '83.25'}, {'input': '$GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D', 'output': '0'}, {'input': '$GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25', 'output': '89.68'}, {'input': '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28', 'output': '83.25'}]"
benchmark-headcase/funct_nmea_speed,parse NMEA speed to km/h,transform(): extract and convert the speed from NMEA sentence to km/h,NMEA sentence,speed in km/h,"[{'input': '$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12', 'output': '22.0388 km/h'}, {'input': '$GPRMC,235947.000,V,0000.0000,N,00000.0000,E,,,041299,,*1D', 'output': '0 km/h'}, {'input': '$GPRMC,155123.000,A,4043.8432,N,07359.7653,W,0.15,83.25,200407,,*28', 'output': '0.2778 km/h'}, {'input': '$GPRMC,092204.999,A,4250.5589,S,14718.5084,E,0.00,89.68,211200,,*25', 'output': '0 km/h'}, {'input': '$GPRMC,084752.000,A,5152.4175,N,00832.5083,W,11.90,62.01,231110,,*12', 'output': '22.0388 km/h'}]"
benchmark-headcase/funct_unit,convert feet to meters,unit_convert(): Convert the length from feet to meters,length in feet,length in meters,"[{'input': '1 ft', 'output': '0.3 m'}, {'input': '3 ft', 'output': '0.9 m'}, {'input': '10.5 ft', 'output': '3.2 m'}, {'input': '11 ft', 'output': '3.4 m'}, {'input': '12 ft', 'output': '3.7 m'}]"
benchmark-headcase/funct_user_agent,extract OS from user agent string,extract(): Extract the operating system from the user agent string,user agent string,operating system,"[{'input': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)', 'output': 'Windows NT 6.1'}, {'input': 'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US)', 'output': 'Windows'}, {'input': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36', 'output': 'X11'}, {'input': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1', 'output': 'Windows NT 6.1'}, {'input': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0', 'output': 'Macintosh'}]"
benchmark-headcase/numeric_const_significant,round to significant figures,format(): Round the number to significant figures,number,rounded number,"[{'input': '2.431', 'output': '2.4'}, {'input': '0.15857', 'output': '0.16'}, {'input': '123', 'output': '1.2E+02'}, {'input': '13.4', 'output': '13'}, {'input': '1.234', 'output': '1.2'}]"
benchmark-headcase/numeric_currency,convert USD to CAD,transform(): Convert the amount from USD to CAD,amount in USD,amount in CAD,"[{'input': '$1', 'output': 'CAD$1.30'}, {'input': '$10', 'output': 'CAD$12.98'}, {'input': '$55', 'output': 'CAD$71.39'}, {'input': '$88', 'output': 'CAD$114.22'}, {'input': '$3', 'output': 'CAD$3.89'}]"
benchmark-headcase/numeric_fahrenheit,convert Celsius to Fahrenheit,unit_convert(): Convert the temperature from Celsius to Fahrenheit,temperature in Celsius,temperature in Fahrenheit,"[{'input': '10ºC', 'output': '50ºF'}, {'input': '33ºC', 'output': '91.4ºF'}, {'input': '46ºC', 'output': '114.8ºF'}, {'input': '3ºC', 'output': '37.4ºF'}, {'input': '6ºC', 'output': '42.8ºF'}]"
benchmark-headcase/numeric_linear,calculate by x3,domain_calculate(): Calculate by x3,number,3x number,"[{'input': '1', 'output': '3'}, {'input': '3', 'output': '9'}, {'input': '5', 'output': '15'}, {'input': '8', 'output': '24'}, {'input': '9', 'output': '27'}]"
benchmark-headcase/numeric_padding,pad number with leading zeros,format(): Pad the number with leading zeros in 5-digit format,number,padded number,"[{'input': '2', 'output': '00002'}, {'input': '144', 'output': '00144'}, {'input': '12345', 'output': '12345'}, {'input': '789', 'output': '00789'}, {'input': '99', 'output': '00099'}]"
benchmark-headcase/numeric_rounding,round number,format(): Round the number in 1-decimal format,number,rounded number,"[{'input': '2.431', 'output': '2.4'}, {'input': '1.5857E+0', 'output': '1.6'}, {'input': '1234567890', 'output': '1234567890.0'}, {'input': '13.33e-11', 'output': '0.0'}, {'input': '23.45', 'output': '23.5'}]"
benchmark-headcase/numeric_scientific_notation,convert to scientific notation with 1 decimal place,transform(): Convert the number to scientific notation with 1 decimal place,number,scientific notation with 1 decimal place,"[{'input': '2.431', 'output': '2.4E0'}, {'input': '1.55', 'output': '1.6E0'}, {'input': '1293.3', 'output': '1.3E3'}, {'input': '0.0013', 'output': '1.3E-3'}, {'input': '123', 'output': '1.2E2'}]"
benchmark-headcase/numeric_scientific_notation2,convert to scientific notation with more precision,transform(): Convert the number to scientific notation with 2 decimal places,number,scientific notation,"[{'input': '2.431', 'output': '2.43E0'}, {'input': '1.5857E+0', 'output': '1.59E0'}, {'input': '1234567890', 'output': '1.23E9'}, {'input': '13.33e-11', 'output': '1.33E-10'}, {'input': '12.34', 'output': '1.23E1'}]"
benchmark-headcase/string_camelize_transformation,convert to camel case,format(): Convert the string to camel case,string,camel case string,"[{'input': 'active_record', 'output': 'activeRecord'}, {'input': 'good_spirit', 'output': 'goodSpirit'}, {'input': 'a_string_var', 'output': 'aStringVar'}, {'input': 'num_hit_count_curr', 'output': 'numHitCountCurr'}, {'input': 'a_bc_de_fg_hi_jk', 'output': 'aBcDeFgHiJk'}]"
benchmark-headcase/string_padleft_transformation,pad string on the left with 3 spaces,format(): Pad the string on the left with 3 spaces,string,padded string with 3 spaces,"[{'input': 'xxx', 'output': '  xxx'}, {'input': 'yy', 'output': '   yy'}, {'input': 'zzzzz', 'output': 'zzzzz'}, {'input': 'abcdefg', 'output': 'abcdefg'}, {'input': 'c', 'output': '    c'}]"
benchmark-headcase/string_uppercaseing_transformation,convert to uppercase,format(): Convert the string to uppercase,string,uppercase string,"[{'input': 'xxx', 'output': 'XXX'}, {'input': 'this is well', 'output': 'THIS IS WELL'}, {'input': 'In my backpack, There is a monkey', 'output': 'IN MY BACKPACK, THERE IS A MONKEY'}, {'input': 'test', 'output': 'TEST'}, {'input': 'Test Is Good', 'output': 'TEST IS GOOD'}]"
benchmark-stackoverflow/1,Use scientific notation only if needed,format(): Convert numbers to scientific notation when appropriate,double value which can be int or float,string with scientific notation,"[{'input': '.2367', 'output': '0.23'}, {'input': '.00367', 'output': '3.67E-3'}, {'input': '22.3', 'output': '22.3'}, {'input': '3364.0', 'output': '3.36E3'}, {'input': '11', 'output': '11'}]"
benchmark-stackoverflow/10,"kgs to pounds, one digit after the decimal, rounding","unit_convert(): Convert kilograms to pounds, rounding to one decimal place",a weight in kilograms,"a weight in pounds, rounded to one decimal place","[{'input': 1, 'output': 2.2}, {'input': 2, 'output': 4.4}, {'input': 3, 'output': 6.6}, {'input': 4, 'output': 8.8}, {'input': 5, 'output': 11.0}, {'input': 6, 'output': 13.2}, {'input': 7, 'output': 15.4}, {'input': 8, 'output': 17.6}, {'input': 9, 'output': 19.8}, {'input': 10, 'output': 22.0}, {'input': 11, 'output': 24.3}, {'input': 12, 'output': 26.5}]"
benchmark-stackoverflow/11,Add commas to numbers,format(): format numbers by adding commas,a number,formatted number with commas at every three digits,"[{'input': '1234567890', 'output': '1,234,567,890'}, {'input': '2134', 'output': '2,134'}, {'input': '1234.123', 'output': '1,234.123'}, {'input': '123456789', 'output': '123,456,789'}, {'input': '1234', 'output': '1,234'}]"
benchmark-stackoverflow/12,"Number formatting using K, M, B","format(): Format numbers into K, M, B notation",a number,"formatted number with K, M, B","[{'input': '10000', 'output': '10K'}, {'input': '212321', 'output': '212K'}, {'input': '9876549', 'output': '9M'}, {'input': '7321876984', 'output': '7M'}, {'input': '1111111111', 'output': '1B'}, {'input': '12123123123', 'output': '12B'}, {'input': '10001', 'output': '10K'}, {'input': '212341', 'output': '212K'}, {'input': '9876149', 'output': '9M'}, {'input': '7321176984', 'output': '7M'}, {'input': '2111111111', 'output': '2B'}, {'input': '22123123123', 'output': '22B'}]"
benchmark-stackoverflow/13,"Number formatting, use , before . , and keep two digits after .",format(): Format numbers by adding commas and keeping two decimal places,a number,formatted number with commas and two decimal places,"[{'input': '432324', 'output': '432,324.00'}, {'input': '12334.13', 'output': '12,334.13'}, {'input': '12334.133', 'output': '12,334.13'}, {'input': '12334.137', 'output': '12,334.13'}]"
benchmark-stackoverflow/14,Pad numbers to the left,format(): Pad numbers to the left with zeros to ensure they are two digits.,a number,padded number with leading zeros,"[{'input': '2', 'output': '02'}, {'input': '3', 'output': '03'}, {'input': '12', 'output': '12'}, {'input': '1', 'output': '01'}, {'input': '5', 'output': '05'}]"
benchmark-stackoverflow/15,Parse an integer from a string with trailing garbage,extract(): Parse an integer from a string with trailing garbage,a string containing an integer and possibly some trailing garbage,"the integer part of the string, ignoring any trailing garbage","[{'input': '1', 'output': 1}, {'input': ' 42 ', 'output': 42}, {'input': '3 -x..', 'output': 3}, {'input': '2 3 4 5', 'output': 2}, {'input': '3 1 4 1', 'output': 3}, {'input': '21 asg', 'output': 21}]"
benchmark-stackoverflow/16,Extract month from datetime,extract(): Extract the month from a given datetime string.,a datetime string,the month as a string,"[{'input': 'Thursday, 1st January, 1970', 'output': 'January'}, {'input': 'Wednesday, 2nd March, 1980', 'output': 'March'}, {'input': 'Monday, 5th May, 1999', 'output': 'May'}, {'input': 'Friday, 3rd April, 1989', 'output': 'April'}, {'input': 'Sunday, 3rd March, 2013', 'output': 'March'}]"
benchmark-stackoverflow/17,Leave proper space,format(): Ensure proper spacing in the input text,text with inconsistent spacing,text with proper spacing,"[{'input': 'SampleText', 'output': 'Sample Text'}, {'input': 'DoesNotMatterHowManyWords', 'output': 'Does Not Matter How Many Words'}, {'input': 'WhatIf', 'output': 'What If'}, {'input': 'SunInTheRain', 'output': 'Sun In The Rain'}, {'input': 'TestIsGood', 'output': 'Test Is Good'}]"
benchmark-stackoverflow/18,Concateneate words with Camel Case,format(): Convert phrases to Camel Case,text with phrases to convert,text with Camel Case,"[{'input': 'Hello there everyone', 'output': 'HelloThereEveryone'}, {'input': 'What is wrong', 'output': 'WhatIsWrong'}, {'input': 'Wait for a while', 'output': 'WaitForAWhile'}, {'input': 'Main page', 'output': 'MainPage'}, {'input': 'Test is good for everyone', 'output': 'TestIsGoodForEveryone'}]"
benchmark-stackoverflow/19,lower to upper case,format(): Convert phrases to upper case,text with phrases to convert to upper case,text with upper case,"[{'input': 'What is the matter', 'output': 'WHAT IS THE MATTER'}, {'input': 'Something is wrong', 'output': 'SOMETHING IS WRONG'}, {'input': 'Background color', 'output': 'BACKGROUND COLOR'}, {'input': 'Everyday activity', 'output': 'EVERYDAY ACTIVITY'}, {'input': 'Test is good for everyone', 'output': 'TEST IS GOOD FOR EVERYONE'}]"
benchmark-stackoverflow/2,convert non-ASCII characters to their URL-encoded equivalents,domain_map(): Convert characters to their URL-encoded equivalents,single character outside the ASCII set,"URL-encoded string with a ""%"" followed by two hexadecimal digits","[{'input': ' ', 'output': '%20'}, {'input': '!', 'output': '%21'}, {'input': '""', 'output': '%22'}, {'input': '#', 'output': '%23'}, {'input': '$', 'output': '%24'}, {'input': '%', 'output': '%25'}, {'input': '&', 'output': '%26'}, {'input': ""'"", 'output': '%27'}, {'input': '(', 'output': '%28'}, {'input': ')', 'output': '%29'}]"
benchmark-stackoverflow/20,replace multiple spaces with a single space,format(): Replace multiple spaces with a single space,string with multiple spaces,string with a single space,"[{'input': '1 2 3 4   5', 'output': '1 2 3 4 5'}, {'input': 'How are    you', 'output': 'How are you'}, {'input': 'What   is the   matter', 'output': 'What is the matter'}, {'input': '1   2  4  4', 'output': '1 2 4 4'}, {'input': 'How   fun', 'output': 'How fun'}]"
benchmark-stackoverflow/21,How does Stack Overflow generate its SEO-friendly URLs?,format(): Generate a SEO-friendly URL for the given text,a string,a SEO-friendly URL,"[{'input': 'How do you change a title to be part of the URL like Stack Overflow', 'output': 'how-do-you-change-a-title-to-be-part-of-the-url-like-stack-overflow'}, {'input': 'Built-In Character Casing functions in .Net', 'output': 'built-in-character-casing-functions-in-net'}, {'input': ""What's the difference between String and string"", 'output': 'whats-the-difference-between-string-and-string'}, {'input': 'Asp.Net Routing - Replace white spaces %20 with dashes from URLs generated', 'output': 'asp-net-routing-replace-white-spaces-20-with-dashes-from-urls-generated'}, {'input': '.NET method to convert a string to sentence case', 'output': 'net-method-to-convert-a-string-to-sentence-case'}]"
benchmark-stackoverflow/22,Phone number processing,format(): Process phone numbers by removing non-numeric characters,a phone number,a numeric phone number,"[{'input': '519-781-8816', 'output': '5197818816'}, {'input': '(913)-444-5555', 'output': '9134445555'}, {'input': '509-791-8816', 'output': '5097918816'}, {'input': '(912)-444-5555', 'output': '9124445555'}, {'input': '4654764768', 'output': '4654764768'}]"
benchmark-stackoverflow/23,Phone number processing,format(): Process phone numbers by formatting them into a standard format,a phone number,a formatted phone number,"[{'input': '5197818816', 'output': '519-781-8816'}, {'input': '9134445555', 'output': '913-444-5555'}, {'input': '5097918816', 'output': '509-791-8816'}, {'input': '9124445555', 'output': '912-444-5555'}, {'input': '4654764768', 'output': '465-476-4768'}]"
benchmark-stackoverflow/24,"Sort alphanumeric string, then alternate numeric and alphabet characters",transform(): Sort alphanumeric strings and alternate numeric and alphabet characters in the output,an alphanumeric string,a sorted string with alternating numeric and alphabet characters,"[{'input': 'D4C3B2A1', 'output': 'A1B2C3D4'}, {'input': 'E7C3B2A1', 'output': 'A1B2C3E7'}, {'input': 'ABCDE12345', 'output': 'A1B2C3D4E5'}, {'input': 'AB12345CDE', 'output': 'A1B2C3D4E5'}, {'input': 'E12HY5', 'output': 'E1H2Y5'}]"
benchmark-stackoverflow/25,Month to number conversion,domain_map(): Convert month names to their corresponding numerical values,a particular month name,the corresponding month number,"[{'input': 'January', 'output': '1'}, {'input': 'February', 'output': '2'}, {'input': 'March', 'output': '3'}, {'input': 'April', 'output': '4'}, {'input': 'May', 'output': '5'}, {'input': 'June', 'output': '6'}, {'input': 'July', 'output': '7'}, {'input': 'August', 'output': '8'}, {'input': 'September', 'output': '9'}, {'input': 'October', 'output': '10'}, {'input': 'November', 'output': '11'}, {'input': 'December', 'output': '12'}]"
benchmark-stackoverflow/26,How to filter out xml attributes?,extract(),xml,xml without attributes,"[{'input': '<sample1 xns:id=""e7b014d9-6271-4e32-921d-7488edfd6ea4"">a</sample1>', 'output': '<sample1>a</sample1>'}, {'input': '<sample2 xns:id=""d3450e86-7264-4512-9891-6c7183257741"">b</sample2>', 'output': '<sample2>b</sample2>'}, {'input': '<sample4 xns:id=""abc"">xyz</sample3>', 'output': '<sample3>xyz</sample3>'}, {'input': '<sample3 xns:id=""7f04f178-f235-4647-8584-c4e77f73fecf"">c</sample3>', 'output': '<sample3>c</sample3>'}, {'input': '<sample6 xns:id=""test"">b</sample6>', 'output': '<sample6>b</sample6>'}]"
benchmark-stackoverflow/27,"F -> C, need calculation + rounding",unit_convert(): Fahrenheit temperatures to Celsius with rounding,a temperature in Fahrenheit,"temperature in Celsius, rounded","[{'input': '40', 'output': '4'}, {'input': '45', 'output': '7'}, {'input': '50', 'output': '10'}, {'input': '55', 'output': '13'}, {'input': '60', 'output': '16'}]"
benchmark-stackoverflow/28,"Most efficient way to remove special characters from string, only allow A-Z a-Z 0-9","extract(): Remove special characters and retain only A-Z, a-z, 0-9",a string with special characters,a cleaned string with only alphanumeric characters,"[{'input': 'BA(kfa1237fdn', 'output': 'BAkfa1237fdn'}, {'input': '*9kk12jf7eYTk1', 'output': '9kk12jf7eYTk1'}, {'input': '()kjfdsk13^$$*A', 'output': 'kjfdsk13A'}, {'input': '092378LLLL111', 'output': '092378LLLL111'}, {'input': '11PP))(*(&^%%&*', 'output': '11PP'}]"
benchmark-stackoverflow/29,Chemistry: Parsing a chemical formula,transform(): Convert chemical formulas to their corresponding elemental compositions,a chemical formula,the corresponding elemental composition,"[{'input': 'Pb', 'output': 'Pb'}, {'input': 'H', 'output': 'H'}, {'input': 'Pb2', 'output': '2Pb'}, {'input': 'H2', 'output': '2H'}, {'input': '3Pb2', 'output': '6Pb'}, {'input': 'PbH2', 'output': 'Pb 2H'}, {'input': '(PbH2)2', 'output': '2Pb 4H'}, {'input': 'Pb(H2)2', 'output': 'Pb 4H'}, {'input': '(Pb(H2)2)2NO3', 'output': '2Pb 8H N 3O'}, {'input': '(Ag(Pb(H2)2)2)2SO4', 'output': '2Ag 4Pb 16H S 4O'}, {'input': 'Pb(CH3(CH2)2CH3)2', 'output': 'Pb 2C 6H 4C 8H 2C 6H'}, {'input': 'Na2(CH3(CH2)2CH3)2', 'output': '2Na 2C 6H 4C 8H 2C 6H'}, {'input': 'Tc(H2O)3Fe3(SO4)2', 'output': 'Tc 6H 3O 3Fe 2S 8O'}, {'input': 'Tc(H2O)3(Fe3(SO4)2)2', 'output': 'Tc 6H 3O 6Fe 4S 16O'}, {'input': '(Tc(H2O)3(Fe3(SO4)2)2)2', 'output': '2Tc 12H 6O 12Fe 8S 32O'}, {'input': '(Tc(H2O)3CO(Fe3(SO4)2)2)2', 'output': '2Tc 12H 6O 2C 2O 12Fe 8S 32O'}]"
benchmark-stackoverflow/3,Remove HTML tags from string,extract(): Remove HTML tags from text,string with HTML tags,string without HTML tags,"[{'input': '<b>Hello World.</b><br/><p><i>Is there anyone out there?</i><p>', 'output': 'Hello World. Is there anyone out there?'}, {'input': '<html><body>bla bla</td><td>bla bla<body><html>', 'output': 'bla bla bla bla'}, {'input': '<b>hello world!</b><br /><i>it is me! !</i>', 'output': 'hello world! it is me! !'}, {'input': '<b>test</b>', 'output': 'test'}]"
benchmark-stackoverflow/30,Math expressions evaluation,domain_calculate(): Calculate the result of basic math expressions,a mathematical expression,the evaluated result,"[{'input': '3+6', 'output': '9'}, {'input': '40-9', 'output': '31'}, {'input': '2*6', 'output': '12'}, {'input': '9/3', 'output': '3'}, {'input': '1+9-2', 'output': '8'}, {'input': '1+4/2', 'output': '3'}]"
benchmark-stackoverflow/31,How to convert number to words in Python,transform(): Provide a mapping of numbers to their corresponding words.,a number,number described in words,"[{'input': 10183, 'output': 'ten thousand one hundred eighty three'}, {'input': 90, 'output': 'ninety'}, {'input': 5888, 'output': 'five thousand eight hundred eighty eight'}, {'input': 100000, 'output': 'one hundred thousand'}, {'input': 999999, 'output': 'nine hundred ninety-nine thousand nine hundred ninety-nine'}, {'input': 1000001, 'output': 'one million one'}, {'input': 10000007, 'output': 'ten million seven'}]"
benchmark-stackoverflow/32,Algorithm help! Fast algorithm in searching for a string with its partner,domain_map(): Map a DNA sequence to its partner sequence,a DNA sequence,the partner DNA sequence,"[{'input': 'TAGTC', 'output': 'ATCAG'}, {'input': 'CGCAT', 'output': 'GCGTA'}, {'input': 'ACCAG', 'output': 'TGGTC'}, {'input': 'GACTA', 'output': 'CTGAT'}, {'input': 'CGCAA', 'output': 'GCGTT'}]"
benchmark-stackoverflow/33,Prefix a word with 'a' or 'an',transform(): Determine the correct article ('a' or 'an') to prefix a given word.,a word,the word prefixed with the correct article,"[{'input': 'used car', 'output': 'a used car'}, {'input': 'honest mistake', 'output': 'an honest mistake'}, {'input': 'computer', 'output': 'a computer'}, {'input': 'orange', 'output': 'an orange'}, {'input': 'hour', 'output': 'an hour'}]"
benchmark-stackoverflow/34,Median,domain_calculate(): Calculate the median of a list of numbers.,a list of numbers,the median value,"[{'input': '2, 2, 3, 4, 7, 8, 9', 'output': 4}, {'input': '1, 2, 3, 5, 6, 7, 8', 'output': 5}, {'input': '1, 2, 3', 'output': 2}, {'input': '4, 5, 6, 7, 8, 9, 10, 11, 12', 'output': 8}, {'input': '1, 2, 3, 4, 5', 'output': 3}]"
benchmark-stackoverflow/35,Increment date by one day,domain_calculate(): Increment a given date by one day.,a date in YYYY-MM-DD format,the date incremented by one day in YYYY-MM-DD format,"[{'input': '2007-01-01', 'output': '2007-01-02'}, {'input': '2008-12-12', 'output': '2008-12-13'}, {'input': '2009-03-31', 'output': '2010-04-01'}, {'input': '2015-02-28', 'output': '2015-03-01'}, {'input': '2015-12-31', 'output': '2016-01-01'}]"
benchmark-stackoverflow/36,Convert date from y-m-d to m/d/y,format(): Convert dates from 'y-m-d' format to 'm/d/y' format.,a date in 'y-m-d' format,the date in 'm/d/y' format,"[{'input': '2009/8/19', 'output': '8/19/2009'}, {'input': '2001/12/12', 'output': '12/12/2001'}, {'input': '2014/3/20', 'output': '3/20/2014'}, {'input': '2011/12/22', 'output': '12/22/2011'}, {'input': '2012/4/11', 'output': '4/11/2012'}]"
benchmark-stackoverflow/37,Get month name from Date,extract(): Retrieve the month name from a given date in 'MM/DD/YYYY' format.,a date in 'MM/DD/YYYY' format,the name of the month,"[{'input': '10/11/2009', 'output': 'October'}, {'input': '01/12/2012', 'output': 'January'}, {'input': '03/14/2013', 'output': 'March'}, {'input': '05/09/2014', 'output': 'May'}, {'input': '12/12/2012', 'output': 'December'}]"
benchmark-stackoverflow/38,person name abbreviation,format(): Generate the abbreviation for a given person's name.,a person's full name,the abbreviated name,"[{'input': 'Jack Bauer', 'output': 'J. Bauer'}, {'input': 'Charles Wooten', 'output': 'C. Wooten'}, {'input': 'Kim Lee', 'output': 'K. Lee'}, {'input': 'Lucy Goodman', 'output': 'L. Goodman'}, {'input': 'Rachel Green', 'output': 'R. Green'}]"
benchmark-stackoverflow/39,Splitting string into sizes of 4,format(): Split a given string into chunks of 4 characters.,a string of characters,"a string of characters, with each chunk of 4 characters separated by comma","[{'input': '1111222233334444', 'output': '1111,2222,3333,4444'}, {'input': '123412341234', 'output': '1234,1234,1234'}, {'input': '1111222', 'output': '1111,222'}, {'input': '123412345', 'output': '1234,1234,5'}, {'input': '1', 'output': '1'}]"
benchmark-stackoverflow/4,Get distinct characters of a string,extract(): Get distinct characters from text,string with possibly repeated characters,string with only distinct characters,"[{'input': 'DHCH', 'output': 'DHC'}, {'input': 'KLKLHHMO', 'output': 'KLHMO'}, {'input': 'XUCHU', 'output': 'XUCH'}, {'input': '123123', 'output': '123'}, {'input': '9090', 'output': '90'}]"
benchmark-stackoverflow/40,Standard Deviation Calculation,domain_calculate(): Calculate the standard deviation of a list of numbers.,a list of numbers,the standard deviation value,"[{'input': '12, 13, 14, 12', 'output': 0.957}, {'input': '12, 13, 14, 12, 5', 'output': 3.564}, {'input': '12, 12', 'output': 0}, {'input': '1, 100, 2', 'output': 56.871}, {'input': '1, 100, 2, 50', 'output': 47.091}]"
benchmark-stackoverflow/41,ip address to country,domain_map(): Map an IP address to its corresponding country.,an IP address,the country associated with the IP address,"[{'input': '131.107.160.83', 'output': 'United States'}, {'input': '103.235.46.39', 'output': 'Hong Kong'}, {'input': '151.249.89.230', 'output': 'Germany'}, {'input': '129.97.208.23', 'output': 'Canada'}, {'input': '173.194.44.50', 'output': 'United States'}, {'input': '77.67.27.8', 'output': 'Germany'}]"
benchmark-stackoverflow/42,Year to common year or leap year,domain_calculate(): Classify a year as 'common' or 'leap'.,a year,the classification of the year as 'common' or 'leap',"[{'input': '2007', 'output': 'common'}, {'input': '2008', 'output': 'leap'}, {'input': '2009', 'output': 'common'}, {'input': '2010', 'output': 'common'}, {'input': '2011', 'output': 'common'}, {'input': '2012', 'output': 'leap'}, {'input': '2016', 'output': 'leap'}, {'input': '2017', 'output': 'common'}]"
benchmark-stackoverflow/43,Email Validation,transform(): Check if the provided email address is valid.,an email address,"return original email address if valid, otherwise return 'invalid'","[{'input': 'testing@invalid@email.com', 'output': 'invalid'}, {'input': 'walter@xyz.com', 'output': 'walter@xyz.com'}, {'input': 'tom@qq.com', 'output': 'tom@qq.com'}, {'input': 'asdf', 'output': 'invalid'}, {'input': 'ab@xyz.xyz', 'output': 'ab@xyz.xyz'}, {'input': 'wa@lter@xyz.com', 'output': 'invalid'}]"
benchmark-stackoverflow/44,"phone number, default 425",format(): Format a phone number to include a default area code if missing.,a phone number,a formatted phone number,"[{'input': '499-999-2020', 'output': '499-999-2020'}, {'input': '999-2020', 'output': '425-999-2020'}, {'input': '390-9292', 'output': '425-390-9292'}, {'input': '299-398-0003', 'output': '299-398-0003'}, {'input': '321-2020', 'output': '425-321-2020'}]"
benchmark-stackoverflow/45,"phone number, default 425","format(): format the phone number to xxx-xxx-xxxx, if missing default area code, then format to 425-xxx-xxxx",A phone number.,A normalized phone number with the default area code if missing.,"[{'input': '390-9292', 'output': '425-390-9292'}, {'input': '499-999-2020', 'output': '499-999-2020'}, {'input': '(299)-398-0003', 'output': '299-398-0003'}, {'input': '(288) 3998888', 'output': '288-399-8888'}, {'input': '999-2020', 'output': '425-999-2020'}, {'input': '425-9990200', 'output': '425-999-0200'}]"
benchmark-stackoverflow/46,First element in the second set,extract(): Retrieve the first element from the second set of a given pair.,A group of sets,The first element from the second set,"[{'input': '{{aaa, bbb}, {ccc, ddd}, {eee, fff}}', 'output': 'ccc'}, {'input': '{{x, y}, {z, zz}}', 'output': 'z'}, {'input': '{{a}, {bb}, {ccc, ddd, eee, fff}}', 'output': 'bb'}, {'input': '{{p, q}, {r, s, t}, {u, v, w}}', 'output': 'r'}]"
benchmark-stackoverflow/47,capture capital words,extract(): Capture all capitalized words from a given text.,A string of text,A list of capitalized words found in the text,"[{'input': 'This is one of the best breakfasts I have had! Is the decor dated? Absolutely but it just adds to the nostalgic charm! The place just reeks of beef cooking... Ahhh delicious! Check out the pastry cases!!!! OMG, is all I have to say!', 'output': ['OMG']}, {'input': 'When she asked if we had reservations, I replied no, and she commented NO? You KNOW IT IS SATURDAY. I wanted to say yes, yesterday was Friday and tomorrow is Sunday. Instead I replied that I was TERRIBLY sorry i did not realize i needed a reservation', 'output': ['NO', 'KNOW', 'IT', 'IS', 'SATURDAY', 'TERRIBLY']}, {'input': 'ABC ajib DDD xyz', 'output': ['ABC', 'DDD']}, {'input': 'This is MY work', 'output': ['MY']}, {'input': 'HOW ARE YOU', 'output': ['HOW', 'ARE', 'YOU']}]"
benchmark-stackoverflow/48,"convert y-m-d to m/d/y, add 0 if necessary","format(): Convert date format from y-m-d to m/d/y, ensuring zero-padded month and day.",A string of dates in y-m-d format,A string of dates in m/d/y format,"[{'input': '2009/8/1', 'output': '08/01/2009'}, {'input': '2001/12/12', 'output': '12/12/2001'}, {'input': '2014/3/2', 'output': '03/02/2014'}, {'input': '2011/12/22', 'output': '12/22/2011'}, {'input': '2012/4/11', 'output': '04/11/2012'}]"
benchmark-stackoverflow/49,plus 20,domain_calculate(): Add 20 to the input number.,A number,A number increased by 20,"[{'input': 25, 'output': 45}, {'input': 35, 'output': 55}, {'input': 10, 'output': 30}, {'input': 1, 'output': 21}, {'input': 11, 'output': 31}]"
benchmark-stackoverflow/5,How to strip http:// and www. from an entered domain name using c#,extract(): Remove http and www from domain names,domain names,domain names without http and www,"[{'input': 'http://stackoverflow.com', 'output': 'stackoverflow.com'}, {'input': 'www.stackoverflow.com', 'output': 'stackoverflow.com'}, {'input': 'http://www.stackoverflow.com', 'output': 'stackoverflow.com'}, {'input': 'facebook.com', 'output': 'facebook.com'}, {'input': 'www.facebook.com', 'output': 'facebook.com'}, {'input': 'http://facebook.com', 'output': 'facebook.com'}, {'input': 'http://www.facebook.com', 'output': 'facebook.com'}, {'input': 'google.com', 'output': 'google.com'}, {'input': 'www.google.com', 'output': 'google.com'}, {'input': 'http://google.com', 'output': 'google.com'}, {'input': 'http://www.google.com', 'output': 'google.com'}]"
benchmark-stackoverflow/6,"Extract something between the first dot and the last dot, not so good an example, don't know what it tries to do",extract(): Extract substring between the first dot and the last dot,full url,substring between the first dot and the last dot,"[{'input': 'www.google.com', 'output': 'google'}, {'input': 'www.facebook.com', 'output': 'facebook'}, {'input': 'www.sina.cn', 'output': 'sina'}, {'input': 'www.cs.uwaterloo.ca', 'output': 'cs.uwaterloo'}, {'input': 'www.abc.com', 'output': 'abc'}]"
benchmark-stackoverflow/7,Get a domain name from a URL,extract(): Extract domain names from URLs,URL,domain name,"[{'input': 'http://www.google.com/url?sa=t&source=web&ct=res&cd=1&ved=0CAgQFjAA&url=http://www.test.com/&rct=j&q=test&ei=G2phS-HdJJWTjAfckvHJDA&usg=AFQjCNFSEAztaqtkaIvEzxmRm2uOARn1kQ', 'output': 'google.com'}, {'input': 'http://www.beta.microsoft.com/path/page.htm', 'output': 'microsoft.com'}, {'input': 'http://www.beta.microsoft.co.uk/path/page.htm', 'output': 'microsoft.co.uk'}, {'input': 'ftp://username:password@website.com', 'output': 'website.com'}, {'input': 'http://www.microsoft.com/', 'output': 'microsoft.com'}]"
benchmark-stackoverflow/8,Remove spaces in HTML source in between markups?,extract(): Remove unnecessary spaces in HTML source code,HTML source code,cleaned HTML source code,"[{'input': '<p>blahblahblah</p>            <p>blahblahblah</p>', 'output': '<p>blahblahblah</p><p>blahblahblah</p>'}, {'input': '<head> <title>A Simple HTML Example</title> </head>', 'output': '<head><title>A Simple HTML Example</title></head>'}, {'input': '<h2>HTML is Easy To Learn</h2> <p>Welcome to the world of the </p>', 'output': '<h2>HTML is Easy To Learn</h2><p>Welcome to the world of the </p>'}, {'input': '<h2>test1</h2> <p>test2</p>', 'output': '<h2>test1</h2><p>test2</p>'}, {'input': '<h2>test1</h2> <p>test2</p> <p>test3</p> <p>test4</p>', 'output': '<h2>test1</h2><p>test2</p><p>test3</p><p>test4</p>'}]"
benchmark-stackoverflow/9,Get MIME type from filename extension,domain_map(): Map the MIME type from the filename extension,the extension of the filename,the MIME type,"[{'input': '.html', 'output': 'text/html'}, {'input': '.css', 'output': 'text/css'}, {'input': '.js', 'output': 'application/javascript'}, {'input': '.json', 'output': 'application/json'}, {'input': '.xml', 'output': 'application/xml'}, {'input': '.jpg', 'output': 'image/jpeg'}, {'input': '.jpeg', 'output': 'image/jpeg'}, {'input': '.png', 'output': 'image/png'}, {'input': '.gif', 'output': 'image/gif'}, {'input': '.svg', 'output': 'image/svg+xml'}, {'input': '.pdf', 'output': 'application/pdf'}, {'input': '.zip', 'output': 'application/zip'}, {'input': '.rar', 'output': 'application/vnd.rar'}, {'input': '.mp4', 'output': 'video/mp4'}, {'input': '.mp3', 'output': 'audio/mpeg'}, {'input': '.wav', 'output': 'audio/wav'}, {'input': '.ogg', 'output': 'audio/ogg'}, {'input': '.csv', 'output': 'text/csv'}, {'input': '.txt', 'output': 'text/plain'}, {'input': '.doc', 'output': 'application/msword'}, {'input': '.docx', 'output': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'}, {'input': '.xls', 'output': 'application/vnd.ms-excel'}, {'input': '.xlsx', 'output': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}, {'input': '.ppt', 'output': 'application/vnd.ms-powerpoint'}, {'input': '.pptx', 'output': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'}]"
